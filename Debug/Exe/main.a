;/*******************************************************
;This program was created by the
;CodeWizardAVR V3.12 Advanced
;Automatic Program Generator
;ï¿½ Copyright 1998-2014 Pavel Haiduc, HP InfoTech s.r.l.
;http://www.hpinfotech.com
;
;Project : DC_Power_Supply_Protect
;Version : 1.0
;Date    : 11/28/2018
;Author  :
;Company :
;Comments:
;Bao ve duong nguon DC +24V +12V -12V +5V -5V
;
;
;Chip type               : ATtiny24
;AVR Core Clock frequency: 8.000000 MHz
;Memory model            : Tiny
;External RAM size       : 0
;Data Stack size         : 32
;*******************************************************/
;
;#include <tiny24.h>
;PCODE: $00000000 VOL: 0
	#ifndef __SLEEP_DEFINED__
;PCODE: $00000001 VOL: 0
	#define __SLEEP_DEFINED__
;PCODE: $00000002 VOL: 0
	.EQU __se_bit=0x20
;PCODE: $00000003 VOL: 0
	.EQU __sm_mask=0x18
;PCODE: $00000004 VOL: 0
	.EQU __sm_adc_noise_red=0x08
;PCODE: $00000005 VOL: 0
	.EQU __sm_powerdown=0x10
;PCODE: $00000006 VOL: 0
	.EQU __sm_standby=0x18
;PCODE: $00000007 VOL: 0
	.SET power_ctrl_reg=mcucr
;PCODE: $00000008 VOL: 0
	#endif
;PCODE: $00000009 VOL: 0
;PCODE: $0000000A VOL: 0
;#include <delay.h>
;
;#define ADC_Negative_5  1
;#define ADC_Negative_12 4
;#define ADC_Positive_5  5
;#define ADC_Positive_12 3
;#define ADC_Positive_24 2
;
;
;#define ADC_Negative_5_ratio    1
;#define ADC_Positive_5_ratio    1
;
;#define ADC_Negative_12_ratio   1
;#define ADC_Positive_12_ratio   1
;
;#define ADC_Positive_24_ratio   1
;
;#define ADC_Negative_5_Set_OVER 10
;#define ADC_Positive_5_Set_OVER 10
;
;#define ADC_Negative_12_Set_OVER    10
;#define ADC_Positive_12_Set_OVER    10
;
;#define ADC_Positive_24_Set_OVER    10
;
;#define CONTROL_UNDER_24    PORTA.7
;#define CONTROL_24  PORTA.6
;#define BUZZER  PORTB.2
;
;#define CONTROL_UNDER_24_ON CONTROL_UNDER_24=0
;#define CONTROL_UNDER_24_OFF CONTROL_UNDER_24=1
;
;#define CONTROL_24_ON   CONTROL_24=0
;#define CONTROL_24_OFF  CONTROL_24=1
;
;#define BUZZER_ON   BUZZER = 1
;#define BUZZER_OFF  BUZZER = 0
;
;
;unsigned char  Uc_Negative_5_over_count;
;unsigned char  Uc_Negative_5_under_count;
;
;unsigned char  Uc_Positive_5_over_count;
;unsigned char  Uc_Positive_5_under_count;
;
;unsigned char  Uc_Positive_12_over_count;
;unsigned char  Uc_Positive_12_under_count;
;
;unsigned char  Uc_Negative_12_over_count;
;unsigned char  Uc_Negative_12_under_count;
;
;unsigned char  Uc_Positive_24_over_count;
;unsigned char  Uc_Positive_24_under_count;
;
;
;bit  Uc_Negative_5_warning;
;bit  Uc_Positive_5_warning;
;bit  Uc_Positive_12_warning;
;bit  Uc_Negative_12_warning;
;bit  Uc_Positive_24_warning;
;// Declare your global variables here
;
;// Voltage Reference: AVCC pin
;#define ADC_VREF_TYPE ((0<<REFS1) | (0<<REFS0))
;
;// Read the AD conversion result
;unsigned int read_adc(unsigned char adc_input)
; 0000 005C {

	.CSEG
;PCODE: $0000000B VOL: 0
;PCODE: $0000000C VOL: 0
; 0000 005D ADMUX=(adc_input & 0x3f) | ADC_VREF_TYPE;
;PCODE: $0000000D VOL: 0
;	adc_input -> Y+0
;PCODE: $0000000E VOL: 0
;PCODE: $0000000F VOL: 0
;PCODE: $00000010 VOL: 0
;PCODE: $00000011 VOL: 0
; 0000 005E // Delay needed for the stabilization of the ADC input voltage
; 0000 005F delay_us(10);
;PCODE: $00000012 VOL: 0
; 0000 0060 // Start the AD conversion
; 0000 0061 ADCSRA|=(1<<ADSC);
;PCODE: $00000013 VOL: 0
;PCODE: $00000014 VOL: 0
; 0000 0062 // Wait for the AD conversion to complete
; 0000 0063 while ((ADCSRA & (1<<ADIF))==0);
;PCODE: $00000015 VOL: 0
;PCODE: $00000016 VOL: 0
;PCODE: $00000017 VOL: 0
;PCODE: $00000018 VOL: 0
;PCODE: $00000019 VOL: 0
;PCODE: $0000001A VOL: 0
; 0000 0064 ADCSRA|=(1<<ADIF);
;PCODE: $0000001B VOL: 0
;PCODE: $0000001C VOL: 0
; 0000 0065 return ADCW;
;PCODE: $0000001D VOL: 0
;PCODE: $0000001E VOL: 0
;PCODE: $0000001F VOL: 0
; 0000 0066 }
;PCODE: $00000020 VOL: 0
;
;void    Init(void)
; 0000 0069 {
;PCODE: $00000021 VOL: 0
;PCODE: $00000022 VOL: 0
; 0000 006A     Uc_Negative_5_warning = 0;
;PCODE: $00000023 VOL: 0
;PCODE: $00000024 VOL: 0
; 0000 006B     Uc_Positive_5_warning = 0;
;PCODE: $00000025 VOL: 0
;PCODE: $00000026 VOL: 0
; 0000 006C     Uc_Positive_12_warning = 0;
;PCODE: $00000027 VOL: 0
;PCODE: $00000028 VOL: 0
; 0000 006D     Uc_Negative_12_warning = 0;
;PCODE: $00000029 VOL: 0
;PCODE: $0000002A VOL: 0
; 0000 006E     Uc_Positive_24_warning = 0;
;PCODE: $0000002B VOL: 0
;PCODE: $0000002C VOL: 0
; 0000 006F 
; 0000 0070     Uc_Negative_5_over_count = 0;
;PCODE: $0000002D VOL: 0
; 0000 0071     Uc_Negative_5_under_count = 0;
;PCODE: $0000002E VOL: 0
; 0000 0072     Uc_Positive_5_over_count = 0;
;PCODE: $0000002F VOL: 0
; 0000 0073     Uc_Positive_5_under_count = 0;
;PCODE: $00000030 VOL: 0
; 0000 0074     Uc_Positive_12_over_count = 0;
;PCODE: $00000031 VOL: 0
; 0000 0075     Uc_Positive_12_under_count = 0;
;PCODE: $00000032 VOL: 0
; 0000 0076     Uc_Negative_12_over_count = 0;
;PCODE: $00000033 VOL: 0
; 0000 0077     Uc_Negative_12_under_count = 0;
;PCODE: $00000034 VOL: 0
; 0000 0078     Uc_Positive_24_over_count = 0;
;PCODE: $00000035 VOL: 0
; 0000 0079     Uc_Positive_24_under_count = 0;
;PCODE: $00000036 VOL: 0
; 0000 007A 
; 0000 007B     CONTROL_24_ON;
;PCODE: $00000037 VOL: 0
;PCODE: $00000038 VOL: 0
; 0000 007C     CONTROL_UNDER_24_ON;
;PCODE: $00000039 VOL: 0
;PCODE: $0000003A VOL: 0
; 0000 007D 
; 0000 007E     BUZZER_ON;
;PCODE: $0000003B VOL: 0
;PCODE: $0000003C VOL: 0
; 0000 007F     delay_ms(200);
;PCODE: $0000003D VOL: 0
;PCODE: $0000003E VOL: 0
;PCODE: $0000003F VOL: 0
; 0000 0080     BUZZER_OFF;
;PCODE: $00000040 VOL: 0
;PCODE: $00000041 VOL: 0
; 0000 0081 }
;PCODE: $00000042 VOL: 0
;PCODE: $00000043 VOL: 0
;
;void    Protect(void)
; 0000 0084 {
;PCODE: $00000044 VOL: 0
;PCODE: $00000045 VOL: 0
; 0000 0085     unsigned int    Uint_adc_value;
; 0000 0086 
; 0000 0087     /* Kiem tra nguon -5vdc */
; 0000 0088     Uint_adc_value = read_adc(ADC_Negative_5);
;PCODE: $00000046 VOL: 0
;	Uint_adc_value -> R16,R17
;PCODE: $00000047 VOL: 0
;PCODE: $00000048 VOL: 0
;PCODE: $00000049 VOL: 0
; 0000 0089     if(Uint_adc_value*ADC_Negative_5_ratio > ADC_Negative_5_Set_OVER)
;PCODE: $0000004A VOL: 0
;PCODE: $0000004B VOL: 0
;PCODE: $0000004C VOL: 0
; 0000 008A     {
; 0000 008B         Uc_Negative_5_over_count++;
;PCODE: $0000004D VOL: 0
; 0000 008C         if(Uc_Negative_5_over_count > 10)
;PCODE: $0000004E VOL: 0
;PCODE: $0000004F VOL: 0
;PCODE: $00000050 VOL: 0
; 0000 008D         {
; 0000 008E             Uc_Negative_5_over_count = 11;
;PCODE: $00000051 VOL: 0
;PCODE: $00000052 VOL: 0
; 0000 008F             Uc_Negative_5_under_count = 0;
;PCODE: $00000053 VOL: 0
; 0000 0090             /* Set warning */
; 0000 0091             Uc_Negative_5_warning = 1;
;PCODE: $00000054 VOL: 0
;PCODE: $00000055 VOL: 0
; 0000 0092         }
; 0000 0093     }
;PCODE: $00000056 VOL: 0
; 0000 0094     else
;PCODE: $00000057 VOL: 0
;PCODE: $00000058 VOL: 0
; 0000 0095     {
; 0000 0096         Uc_Negative_5_under_count++;
;PCODE: $00000059 VOL: 0
; 0000 0097         if(Uc_Negative_5_under_count > 10)
;PCODE: $0000005A VOL: 0
;PCODE: $0000005B VOL: 0
;PCODE: $0000005C VOL: 0
; 0000 0098         {
; 0000 0099             Uc_Negative_5_over_count = 0;
;PCODE: $0000005D VOL: 0
; 0000 009A             Uc_Negative_5_under_count = 11;
;PCODE: $0000005E VOL: 0
;PCODE: $0000005F VOL: 0
; 0000 009B             /* clear warning */
; 0000 009C             Uc_Negative_5_warning = 0;
;PCODE: $00000060 VOL: 0
;PCODE: $00000061 VOL: 0
; 0000 009D         }
; 0000 009E     }
;PCODE: $00000062 VOL: 0
;PCODE: $00000063 VOL: 0
; 0000 009F 
; 0000 00A0     /* Kiem tra nguon +5VDC */
; 0000 00A1     Uint_adc_value = read_adc(ADC_Positive_5);
;PCODE: $00000064 VOL: 0
;PCODE: $00000065 VOL: 0
;PCODE: $00000066 VOL: 0
; 0000 00A2     if(Uint_adc_value*ADC_Positive_5_ratio > ADC_Positive_5_Set_OVER)
;PCODE: $00000067 VOL: 0
;PCODE: $00000068 VOL: 0
;PCODE: $00000069 VOL: 0
; 0000 00A3     {
; 0000 00A4         Uc_Positive_5_over_count++;
;PCODE: $0000006A VOL: 0
; 0000 00A5         if(Uc_Positive_5_over_count > 10)
;PCODE: $0000006B VOL: 0
;PCODE: $0000006C VOL: 0
;PCODE: $0000006D VOL: 0
; 0000 00A6         {
; 0000 00A7             Uc_Positive_5_over_count = 11;
;PCODE: $0000006E VOL: 0
;PCODE: $0000006F VOL: 0
; 0000 00A8             Uc_Positive_5_under_count = 0;
;PCODE: $00000070 VOL: 0
; 0000 00A9             /* Set warning */
; 0000 00AA             Uc_Positive_5_warning = 1;
;PCODE: $00000071 VOL: 0
;PCODE: $00000072 VOL: 0
; 0000 00AB         }
; 0000 00AC     }
;PCODE: $00000073 VOL: 0
; 0000 00AD     else
;PCODE: $00000074 VOL: 0
;PCODE: $00000075 VOL: 0
; 0000 00AE     {
; 0000 00AF         Uc_Positive_5_under_count++;
;PCODE: $00000076 VOL: 0
; 0000 00B0         if(Uc_Positive_5_under_count > 10)
;PCODE: $00000077 VOL: 0
;PCODE: $00000078 VOL: 0
;PCODE: $00000079 VOL: 0
; 0000 00B1         {
; 0000 00B2             Uc_Positive_5_over_count = 0;
;PCODE: $0000007A VOL: 0
; 0000 00B3             Uc_Positive_5_under_count = 11;
;PCODE: $0000007B VOL: 0
;PCODE: $0000007C VOL: 0
; 0000 00B4             /* clear warning */
; 0000 00B5             Uc_Positive_5_warning = 0;
;PCODE: $0000007D VOL: 0
;PCODE: $0000007E VOL: 0
; 0000 00B6         }
; 0000 00B7     }
;PCODE: $0000007F VOL: 0
;PCODE: $00000080 VOL: 0
; 0000 00B8 
; 0000 00B9     /* Kiem tra nguon -12VDC */
; 0000 00BA     Uint_adc_value = read_adc(ADC_Negative_12);
;PCODE: $00000081 VOL: 0
;PCODE: $00000082 VOL: 0
;PCODE: $00000083 VOL: 0
; 0000 00BB     if(Uint_adc_value*ADC_Negative_12_ratio > ADC_Negative_12_Set_OVER)
;PCODE: $00000084 VOL: 0
;PCODE: $00000085 VOL: 0
;PCODE: $00000086 VOL: 0
; 0000 00BC     {
; 0000 00BD         Uc_Negative_12_over_count++;
;PCODE: $00000087 VOL: 0
; 0000 00BE         if(Uc_Negative_12_over_count > 10)
;PCODE: $00000088 VOL: 0
;PCODE: $00000089 VOL: 0
;PCODE: $0000008A VOL: 0
; 0000 00BF         {
; 0000 00C0             Uc_Negative_12_over_count = 11;
;PCODE: $0000008B VOL: 0
;PCODE: $0000008C VOL: 0
; 0000 00C1             Uc_Negative_12_under_count = 0;
;PCODE: $0000008D VOL: 0
; 0000 00C2             /* Set warning */
; 0000 00C3             Uc_Negative_12_warning = 1;
;PCODE: $0000008E VOL: 0
;PCODE: $0000008F VOL: 0
; 0000 00C4         }
; 0000 00C5     }
;PCODE: $00000090 VOL: 0
; 0000 00C6     else
;PCODE: $00000091 VOL: 0
;PCODE: $00000092 VOL: 0
; 0000 00C7     {
; 0000 00C8         Uc_Negative_12_under_count++;
;PCODE: $00000093 VOL: 0
; 0000 00C9         if(Uc_Negative_12_under_count > 10)
;PCODE: $00000094 VOL: 0
;PCODE: $00000095 VOL: 0
;PCODE: $00000096 VOL: 0
; 0000 00CA         {
; 0000 00CB             Uc_Negative_12_over_count = 0;
;PCODE: $00000097 VOL: 0
; 0000 00CC             Uc_Negative_12_under_count = 11;
;PCODE: $00000098 VOL: 0
;PCODE: $00000099 VOL: 0
; 0000 00CD             /* clear warning */
; 0000 00CE             Uc_Negative_12_warning = 0;
;PCODE: $0000009A VOL: 0
;PCODE: $0000009B VOL: 0
; 0000 00CF         }
; 0000 00D0     }
;PCODE: $0000009C VOL: 0
;PCODE: $0000009D VOL: 0
; 0000 00D1 
; 0000 00D2     /* Kiem tra nguon +12VDC */
; 0000 00D3     Uint_adc_value = read_adc(ADC_Positive_12);
;PCODE: $0000009E VOL: 0
;PCODE: $0000009F VOL: 0
;PCODE: $000000A0 VOL: 0
; 0000 00D4     if(Uint_adc_value*ADC_Positive_12_ratio > ADC_Positive_12_Set_OVER)
;PCODE: $000000A1 VOL: 0
;PCODE: $000000A2 VOL: 0
;PCODE: $000000A3 VOL: 0
; 0000 00D5     {
; 0000 00D6         Uc_Positive_12_over_count++;
;PCODE: $000000A4 VOL: 0
; 0000 00D7         if(Uc_Positive_12_over_count > 10)
;PCODE: $000000A5 VOL: 0
;PCODE: $000000A6 VOL: 0
;PCODE: $000000A7 VOL: 0
; 0000 00D8         {
; 0000 00D9             Uc_Positive_12_over_count = 11;
;PCODE: $000000A8 VOL: 0
;PCODE: $000000A9 VOL: 0
; 0000 00DA             Uc_Positive_12_under_count = 0;
;PCODE: $000000AA VOL: 0
; 0000 00DB             /* Set warning */
; 0000 00DC             Uc_Positive_12_warning = 1;
;PCODE: $000000AB VOL: 0
;PCODE: $000000AC VOL: 0
; 0000 00DD         }
; 0000 00DE     }
;PCODE: $000000AD VOL: 0
; 0000 00DF     else
;PCODE: $000000AE VOL: 0
;PCODE: $000000AF VOL: 0
; 0000 00E0     {
; 0000 00E1         Uc_Positive_12_under_count++;
;PCODE: $000000B0 VOL: 0
; 0000 00E2         if(Uc_Positive_12_under_count > 10)
;PCODE: $000000B1 VOL: 0
;PCODE: $000000B2 VOL: 0
;PCODE: $000000B3 VOL: 0
; 0000 00E3         {
; 0000 00E4             Uc_Positive_12_over_count = 0;
;PCODE: $000000B4 VOL: 0
; 0000 00E5             Uc_Positive_12_under_count = 11;
;PCODE: $000000B5 VOL: 0
;PCODE: $000000B6 VOL: 0
; 0000 00E6             /* clear warning */
; 0000 00E7             Uc_Positive_12_warning = 0;
;PCODE: $000000B7 VOL: 0
;PCODE: $000000B8 VOL: 0
; 0000 00E8         }
; 0000 00E9     }
;PCODE: $000000B9 VOL: 0
;PCODE: $000000BA VOL: 0
; 0000 00EA 
; 0000 00EB     /* Kiem tra nguon +24VDC */
; 0000 00EC     Uint_adc_value = read_adc(ADC_Positive_24);
;PCODE: $000000BB VOL: 0
;PCODE: $000000BC VOL: 0
;PCODE: $000000BD VOL: 0
; 0000 00ED     if(Uint_adc_value*ADC_Positive_24_ratio > ADC_Positive_24_Set_OVER)
;PCODE: $000000BE VOL: 0
;PCODE: $000000BF VOL: 0
;PCODE: $000000C0 VOL: 0
; 0000 00EE     {
; 0000 00EF         Uc_Positive_24_over_count++;
;PCODE: $000000C1 VOL: 0
; 0000 00F0         if(Uc_Positive_24_over_count > 10)
;PCODE: $000000C2 VOL: 0
;PCODE: $000000C3 VOL: 0
;PCODE: $000000C4 VOL: 0
; 0000 00F1         {
; 0000 00F2             Uc_Positive_24_over_count = 11;
;PCODE: $000000C5 VOL: 0
;PCODE: $000000C6 VOL: 0
; 0000 00F3             Uc_Positive_24_under_count = 0;
;PCODE: $000000C7 VOL: 0
; 0000 00F4             /* Set warning */
; 0000 00F5             Uc_Positive_24_warning = 1;
;PCODE: $000000C8 VOL: 0
;PCODE: $000000C9 VOL: 0
; 0000 00F6         }
; 0000 00F7     }
;PCODE: $000000CA VOL: 0
; 0000 00F8     else
;PCODE: $000000CB VOL: 0
;PCODE: $000000CC VOL: 0
; 0000 00F9     {
; 0000 00FA         Uc_Positive_24_under_count++;
;PCODE: $000000CD VOL: 0
; 0000 00FB         if(Uc_Positive_24_under_count > 10)
;PCODE: $000000CE VOL: 0
;PCODE: $000000CF VOL: 0
;PCODE: $000000D0 VOL: 0
; 0000 00FC         {
; 0000 00FD             Uc_Positive_24_over_count = 0;
;PCODE: $000000D1 VOL: 0
; 0000 00FE             Uc_Positive_24_under_count = 11;
;PCODE: $000000D2 VOL: 0
;PCODE: $000000D3 VOL: 0
; 0000 00FF             /* clear warning */
; 0000 0100             Uc_Positive_24_warning = 0;
;PCODE: $000000D4 VOL: 0
;PCODE: $000000D5 VOL: 0
; 0000 0101         }
; 0000 0102     }
;PCODE: $000000D6 VOL: 0
;PCODE: $000000D7 VOL: 0
; 0000 0103 
; 0000 0104     if(Uc_Negative_5_warning || Uc_Negative_12_warning || Uc_Positive_5_warning || Uc_Positive_12_warning)
;PCODE: $000000D8 VOL: 0
;PCODE: $000000D9 VOL: 0
;PCODE: $000000DA VOL: 0
;PCODE: $000000DB VOL: 0
;PCODE: $000000DC VOL: 0
;PCODE: $000000DD VOL: 0
;PCODE: $000000DE VOL: 0
;PCODE: $000000DF VOL: 0
;PCODE: $000000E0 VOL: 0
;PCODE: $000000E1 VOL: 0
;PCODE: $000000E2 VOL: 0
;PCODE: $000000E3 VOL: 0
;PCODE: $000000E4 VOL: 0
;PCODE: $000000E5 VOL: 0
; 0000 0105     {
; 0000 0106         CONTROL_UNDER_24_OFF;
;PCODE: $000000E6 VOL: 0
;PCODE: $000000E7 VOL: 0
; 0000 0107     }
; 0000 0108     else
;PCODE: $000000E8 VOL: 0
;PCODE: $000000E9 VOL: 0
; 0000 0109     {
; 0000 010A         CONTROL_UNDER_24_ON;
;PCODE: $000000EA VOL: 0
;PCODE: $000000EB VOL: 0
; 0000 010B     }
;PCODE: $000000EC VOL: 0
; 0000 010C 
; 0000 010D     if(Uc_Positive_24_warning)
;PCODE: $000000ED VOL: 0
;PCODE: $000000EE VOL: 0
;PCODE: $000000EF VOL: 0
; 0000 010E     {
; 0000 010F         CONTROL_24_OFF;
;PCODE: $000000F0 VOL: 0
;PCODE: $000000F1 VOL: 0
; 0000 0110     }
; 0000 0111     else
;PCODE: $000000F2 VOL: 0
;PCODE: $000000F3 VOL: 0
; 0000 0112     {
; 0000 0113         CONTROL_24_ON;
;PCODE: $000000F4 VOL: 0
;PCODE: $000000F5 VOL: 0
; 0000 0114     }
;PCODE: $000000F6 VOL: 0
; 0000 0115     delay_ms(10);
;PCODE: $000000F7 VOL: 0
;PCODE: $000000F8 VOL: 0
;PCODE: $000000F9 VOL: 0
; 0000 0116 }
;PCODE: $000000FA VOL: 0
;PCODE: $000000FB VOL: 0
;PCODE: $000000FC VOL: 0
;
;void main(void)
; 0000 0119 {
;PCODE: $000000FD VOL: 0
; 0000 011A     // Declare your local variables here
; 0000 011B 
; 0000 011C     // Crystal Oscillator division factor: 1
; 0000 011D     #pragma optsize-
; 0000 011E     CLKPR=(1<<CLKPCE);
;PCODE: $000000FE VOL: 0
;PCODE: $000000FF VOL: 0
; 0000 011F     CLKPR=(0<<CLKPCE) | (0<<CLKPS3) | (0<<CLKPS2) | (0<<CLKPS1) | (0<<CLKPS0);
;PCODE: $00000100 VOL: 0
;PCODE: $00000101 VOL: 0
; 0000 0120     #ifdef _OPTIMIZE_SIZE_
; 0000 0121     #pragma optsize+
; 0000 0122     #endif
; 0000 0123 
; 0000 0124     // Input/Output Ports initialization
; 0000 0125     // Port A initialization
; 0000 0126     // Function: Bit7=Out Bit6=Out Bit5=In Bit4=In Bit3=In Bit2=In Bit1=In Bit0=In
; 0000 0127     DDRA=(1<<DDA7) | (1<<DDA6) | (0<<DDA5) | (0<<DDA4) | (0<<DDA3) | (0<<DDA2) | (0<<DDA1) | (0<<DDA0);
;PCODE: $00000102 VOL: 0
;PCODE: $00000103 VOL: 0
; 0000 0128     // State: Bit7=0 Bit6=0 Bit5=T Bit4=T Bit3=T Bit2=T Bit1=T Bit0=T
; 0000 0129     PORTA=(0<<PORTA7) | (0<<PORTA6) | (0<<PORTA5) | (0<<PORTA4) | (0<<PORTA3) | (0<<PORTA2) | (0<<PORTA1) | (0<<PORTA0);
;PCODE: $00000104 VOL: 0
;PCODE: $00000105 VOL: 0
; 0000 012A 
; 0000 012B     // Port B initialization
; 0000 012C     // Function: Bit3=In Bit2=Out Bit1=In Bit0=In
; 0000 012D     DDRB=(0<<DDB3) | (1<<DDB2) | (0<<DDB1) | (0<<DDB0);
;PCODE: $00000106 VOL: 0
;PCODE: $00000107 VOL: 0
; 0000 012E     // State: Bit3=T Bit2=0 Bit1=T Bit0=T
; 0000 012F     PORTB=(0<<PORTB3) | (0<<PORTB2) | (0<<PORTB1) | (0<<PORTB0);
;PCODE: $00000108 VOL: 0
;PCODE: $00000109 VOL: 0
; 0000 0130 
; 0000 0131     // Timer/Counter 0 initialization
; 0000 0132     // Clock source: System Clock
; 0000 0133     // Clock value: Timer 0 Stopped
; 0000 0134     // Mode: Normal top=0xFF
; 0000 0135     // OC0A output: Disconnected
; 0000 0136     // OC0B output: Disconnected
; 0000 0137     TCCR0A=(0<<COM0A1) | (0<<COM0A0) | (0<<COM0B1) | (0<<COM0B0) | (0<<WGM01) | (0<<WGM00);
;PCODE: $0000010A VOL: 0
;PCODE: $0000010B VOL: 0
; 0000 0138     TCCR0B=(0<<WGM02) | (0<<CS02) | (0<<CS01) | (0<<CS00);
;PCODE: $0000010C VOL: 0
;PCODE: $0000010D VOL: 0
; 0000 0139     TCNT0=0x00;
;PCODE: $0000010E VOL: 0
;PCODE: $0000010F VOL: 0
; 0000 013A     OCR0A=0x00;
;PCODE: $00000110 VOL: 0
;PCODE: $00000111 VOL: 0
; 0000 013B     OCR0B=0x00;
;PCODE: $00000112 VOL: 0
;PCODE: $00000113 VOL: 0
; 0000 013C 
; 0000 013D     // Timer/Counter 1 initialization
; 0000 013E     // Clock source: System Clock
; 0000 013F     // Clock value: Timer1 Stopped
; 0000 0140     // Mode: Normal top=0xFFFF
; 0000 0141     // OC1A output: Disconnected
; 0000 0142     // OC1B output: Disconnected
; 0000 0143     // Noise Canceler: Off
; 0000 0144     // Input Capture on Falling Edge
; 0000 0145     // Timer1 Overflow Interrupt: Off
; 0000 0146     // Input Capture Interrupt: Off
; 0000 0147     // Compare A Match Interrupt: Off
; 0000 0148     // Compare B Match Interrupt: Off
; 0000 0149     TCCR1A=(0<<COM1A1) | (0<<COM1A0) | (0<<COM1B1) | (0<<COM1B0) | (0<<WGM11) | (0<<WGM10);
;PCODE: $00000114 VOL: 0
;PCODE: $00000115 VOL: 0
; 0000 014A     TCCR1B=(0<<ICNC1) | (0<<ICES1) | (0<<WGM13) | (0<<WGM12) | (0<<CS12) | (0<<CS11) | (0<<CS10);
;PCODE: $00000116 VOL: 0
;PCODE: $00000117 VOL: 0
; 0000 014B     TCNT1H=0x00;
;PCODE: $00000118 VOL: 0
;PCODE: $00000119 VOL: 0
; 0000 014C     TCNT1L=0x00;
;PCODE: $0000011A VOL: 0
;PCODE: $0000011B VOL: 0
; 0000 014D     ICR1H=0x00;
;PCODE: $0000011C VOL: 0
;PCODE: $0000011D VOL: 0
; 0000 014E     ICR1L=0x00;
;PCODE: $0000011E VOL: 0
;PCODE: $0000011F VOL: 0
; 0000 014F     OCR1AH=0x00;
;PCODE: $00000120 VOL: 0
;PCODE: $00000121 VOL: 0
; 0000 0150     OCR1AL=0x00;
;PCODE: $00000122 VOL: 0
;PCODE: $00000123 VOL: 0
; 0000 0151     OCR1BH=0x00;
;PCODE: $00000124 VOL: 0
;PCODE: $00000125 VOL: 0
; 0000 0152     OCR1BL=0x00;
;PCODE: $00000126 VOL: 0
;PCODE: $00000127 VOL: 0
; 0000 0153 
; 0000 0154     // Timer/Counter 0 Interrupt(s) initialization
; 0000 0155     TIMSK0=(0<<OCIE0B) | (0<<OCIE0A) | (0<<TOIE0);
;PCODE: $00000128 VOL: 0
;PCODE: $00000129 VOL: 0
; 0000 0156 
; 0000 0157     // Timer/Counter 1 Interrupt(s) initialization
; 0000 0158     TIMSK1=(0<<ICIE1) | (0<<OCIE1B) | (0<<OCIE1A) | (0<<TOIE1);
;PCODE: $0000012A VOL: 0
;PCODE: $0000012B VOL: 0
; 0000 0159 
; 0000 015A     // External Interrupt(s) initialization
; 0000 015B     // INT0: Off
; 0000 015C     // Interrupt on any change on pins PCINT0-7: Off
; 0000 015D     // Interrupt on any change on pins PCINT8-11: Off
; 0000 015E     MCUCR=(0<<ISC01) | (0<<ISC00);
;PCODE: $0000012C VOL: 0
;PCODE: $0000012D VOL: 0
; 0000 015F     GIMSK=(0<<INT0) | (0<<PCIE1) | (0<<PCIE0);
;PCODE: $0000012E VOL: 0
;PCODE: $0000012F VOL: 0
; 0000 0160 
; 0000 0161     // USI initialization
; 0000 0162     // Mode: Disabled
; 0000 0163     // Clock source: Register & Counter=no clk.
; 0000 0164     // USI Counter Overflow Interrupt: Off
; 0000 0165     USICR=(0<<USISIE) | (0<<USIOIE) | (0<<USIWM1) | (0<<USIWM0) | (0<<USICS1) | (0<<USICS0) | (0<<USICLK) | (0<<USITC);
;PCODE: $00000130 VOL: 0
;PCODE: $00000131 VOL: 0
; 0000 0166 
; 0000 0167     // Analog Comparator initialization
; 0000 0168     // Analog Comparator: Off
; 0000 0169     // The Analog Comparator's positive input is
; 0000 016A     // connected to the AIN0 pin
; 0000 016B     // The Analog Comparator's negative input is
; 0000 016C     // connected to the AIN1 pin
; 0000 016D     ACSR=(1<<ACD) | (0<<ACBG) | (0<<ACO) | (0<<ACI) | (0<<ACIE) | (0<<ACIC) | (0<<ACIS1) | (0<<ACIS0);
;PCODE: $00000132 VOL: 0
;PCODE: $00000133 VOL: 0
; 0000 016E     // Digital input buffer on AIN0: On
; 0000 016F     // Digital input buffer on AIN1: On
; 0000 0170     DIDR0=(0<<ADC1D) | (0<<ADC2D);
;PCODE: $00000134 VOL: 0
;PCODE: $00000135 VOL: 0
; 0000 0171 
; 0000 0172     // ADC initialization
; 0000 0173     // ADC Clock frequency: 1000.000 kHz
; 0000 0174     // ADC Voltage Reference: AVCC pin
; 0000 0175     // ADC Bipolar Input Mode: Off
; 0000 0176     // ADC Auto Trigger Source: ADC Stopped
; 0000 0177     // Digital input buffers on ADC0: On, ADC1: On, ADC2: On, ADC3: On
; 0000 0178     // ADC4: On, ADC5: On, ADC6: On, ADC7: On
; 0000 0179     DIDR0=(0<<ADC7D) | (0<<ADC6D) | (0<<ADC5D) | (0<<ADC4D) | (0<<ADC3D) | (0<<ADC2D) | (0<<ADC1D) | (0<<ADC0D);
;PCODE: $00000136 VOL: 0
;PCODE: $00000137 VOL: 0
; 0000 017A     ADMUX=ADC_VREF_TYPE;
;PCODE: $00000138 VOL: 0
;PCODE: $00000139 VOL: 0
; 0000 017B     ADCSRA=(1<<ADEN) | (0<<ADSC) | (0<<ADATE) | (0<<ADIF) | (0<<ADIE) | (0<<ADPS2) | (1<<ADPS1) | (1<<ADPS0);
;PCODE: $0000013A VOL: 0
;PCODE: $0000013B VOL: 0
; 0000 017C     ADCSRB=(0<<BIN) | (0<<ADLAR) | (0<<ADTS2) | (0<<ADTS1) | (0<<ADTS0);
;PCODE: $0000013C VOL: 0
;PCODE: $0000013D VOL: 0
; 0000 017D 
; 0000 017E     Init();
;PCODE: $0000013E VOL: 0
; 0000 017F     while (1)
;PCODE: $0000013F VOL: 0
; 0000 0180     {
; 0000 0181     // Place your code here
; 0000 0182         Protect();
;PCODE: $00000140 VOL: 0
; 0000 0183 
; 0000 0184     }
;PCODE: $00000141 VOL: 0
;PCODE: $00000142 VOL: 0
; 0000 0185 }
;PCODE: $00000143 VOL: 0
;PCODE: $00000144 VOL: 0
;PCODE: $00000145 VOL: 0
