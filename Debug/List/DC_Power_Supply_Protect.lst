
AVRASM ver. 2.1.30  D:\Mydata\Work\Tan Phat\Bien doi nguon 3 phase\Firmware_2\DC_power_supply_fix\Debug\List\DC_Power_Supply_Protect.asm Wed Dec 05 19:54:42 2018

D:\Mydata\Work\Tan Phat\Bien doi nguon 3 phase\Firmware_2\DC_power_supply_fix\Debug\List\DC_Power_Supply_Protect.asm(987): warning: Register r3 already defined by the .DEF directive
D:\Mydata\Work\Tan Phat\Bien doi nguon 3 phase\Firmware_2\DC_power_supply_fix\Debug\List\DC_Power_Supply_Protect.asm(988): warning: Register r2 already defined by the .DEF directive
D:\Mydata\Work\Tan Phat\Bien doi nguon 3 phase\Firmware_2\DC_power_supply_fix\Debug\List\DC_Power_Supply_Protect.asm(989): warning: Register r5 already defined by the .DEF directive
D:\Mydata\Work\Tan Phat\Bien doi nguon 3 phase\Firmware_2\DC_power_supply_fix\Debug\List\DC_Power_Supply_Protect.asm(990): warning: Register r4 already defined by the .DEF directive
D:\Mydata\Work\Tan Phat\Bien doi nguon 3 phase\Firmware_2\DC_power_supply_fix\Debug\List\DC_Power_Supply_Protect.asm(991): warning: Register r7 already defined by the .DEF directive
D:\Mydata\Work\Tan Phat\Bien doi nguon 3 phase\Firmware_2\DC_power_supply_fix\Debug\List\DC_Power_Supply_Protect.asm(992): warning: Register r6 already defined by the .DEF directive
D:\Mydata\Work\Tan Phat\Bien doi nguon 3 phase\Firmware_2\DC_power_supply_fix\Debug\List\DC_Power_Supply_Protect.asm(993): warning: Register r9 already defined by the .DEF directive
D:\Mydata\Work\Tan Phat\Bien doi nguon 3 phase\Firmware_2\DC_power_supply_fix\Debug\List\DC_Power_Supply_Protect.asm(994): warning: Register r8 already defined by the .DEF directive
D:\Mydata\Work\Tan Phat\Bien doi nguon 3 phase\Firmware_2\DC_power_supply_fix\Debug\List\DC_Power_Supply_Protect.asm(995): warning: Register r11 already defined by the .DEF directive
D:\Mydata\Work\Tan Phat\Bien doi nguon 3 phase\Firmware_2\DC_power_supply_fix\Debug\List\DC_Power_Supply_Protect.asm(996): warning: Register r10 already defined by the .DEF directive
D:\Mydata\Work\Tan Phat\Bien doi nguon 3 phase\Firmware_2\DC_power_supply_fix\Debug\List\DC_Power_Supply_Protect.asm(997): warning: Register r12 already defined by the .DEF directive
D:\Mydata\Work\Tan Phat\Bien doi nguon 3 phase\Firmware_2\DC_power_supply_fix\Debug\List\DC_Power_Supply_Protect.asm(998): warning: Register r13 already defined by the .DEF directive
                 
                 
                 ;CodeVisionAVR C Compiler V3.12 Advanced
                 ;(C) Copyright 1998-2014 Pavel Haiduc, HP InfoTech s.r.l.
                 ;http://www.hpinfotech.com
                 
                 ;Build configuration    : Debug
                 ;Chip type              : ATtiny24
                 ;Program type           : Application
                 ;Clock frequency        : 8,000000 MHz
                 ;Memory model           : Tiny
                 ;Optimize for           : Size
                 ;(s)printf features     : int, width
                 ;(s)scanf features      : int, width
                 ;External RAM size      : 0
                 ;Data Stack size        : 32 byte(s)
                 ;Heap size              : 0 byte(s)
                 ;Promote 'char' to 'int': Yes
                 ;'char' is unsigned     : Yes
                 ;8 bit enums            : Yes
                 ;Global 'const' stored in FLASH: Yes
                 ;Enhanced function parameter passing: Yes
                 ;Enhanced core instructions: On
                 ;Automatic register allocation for global variables: On
                 ;Smart register allocation: On
                 
                 	#define _MODEL_TINY_
                 
                 	#pragma AVRPART ADMIN PART_NAME ATtiny24
                 	#pragma AVRPART MEMORY PROG_FLASH 2048
                 	#pragma AVRPART MEMORY EEPROM 128
                 	#pragma AVRPART MEMORY INT_SRAM SIZE 128
                 	#pragma AVRPART MEMORY INT_SRAM START_ADDR 0x60
                 
                 	.LISTMAC
                 	.EQU EERE=0x0
                 	.EQU EEWE=0x1
                 	.EQU EEMWE=0x2
                 	.EQU EECR=0x1C
                 	.EQU EEDR=0x1D
                 	.EQU EEARL=0x1E
                 
                 	.EQU WDTCSR=0x21
                 	.EQU MCUSR=0x34
                 	.EQU MCUCR=0x35
                 	.EQU SPL=0x3D
                 	.EQU SREG=0x3F
                 	.EQU GPIOR0=0x13
                 	.EQU GPIOR1=0x14
                 	.EQU GPIOR2=0x15
                 
                 	.DEF R0X0=R0
                 	.DEF R0X1=R1
                 	.DEF R0X2=R2
                 	.DEF R0X3=R3
                 	.DEF R0X4=R4
                 	.DEF R0X5=R5
                 	.DEF R0X6=R6
                 	.DEF R0X7=R7
                 	.DEF R0X8=R8
                 	.DEF R0X9=R9
                 	.DEF R0XA=R10
                 	.DEF R0XB=R11
                 	.DEF R0XC=R12
                 	.DEF R0XD=R13
                 	.DEF R0XE=R14
                 	.DEF R0XF=R15
                 	.DEF R0X10=R16
                 	.DEF R0X11=R17
                 	.DEF R0X12=R18
                 	.DEF R0X13=R19
                 	.DEF R0X14=R20
                 	.DEF R0X15=R21
                 	.DEF R0X16=R22
                 	.DEF R0X17=R23
                 	.DEF R0X18=R24
                 	.DEF R0X19=R25
                 	.DEF R0X1A=R26
                 	.DEF R0X1B=R27
                 	.DEF R0X1C=R28
                 	.DEF R0X1D=R29
                 	.DEF R0X1E=R30
                 	.DEF R0X1F=R31
                 
                 	.EQU __SRAM_START=0x0060
                 	.EQU __SRAM_END=0x00DF
                 	.EQU __DSTACK_SIZE=0x0020
                 	.EQU __HEAP_SIZE=0x0000
                 	.EQU __CLEAR_SRAM_SIZE=__SRAM_END-__SRAM_START+1
                 
                 	.MACRO __CPD1N
                 	CPI  R30,LOW(@0)
                 	LDI  R26,HIGH(@0)
                 	CPC  R31,R26
                 	LDI  R26,BYTE3(@0)
                 	CPC  R22,R26
                 	LDI  R26,BYTE4(@0)
                 	CPC  R23,R26
                 	.ENDM
                 
                 	.MACRO __CPD2N
                 	CPI  R26,LOW(@0)
                 	LDI  R30,HIGH(@0)
                 	CPC  R27,R30
                 	LDI  R30,BYTE3(@0)
                 	CPC  R24,R30
                 	LDI  R30,BYTE4(@0)
                 	CPC  R25,R30
                 	.ENDM
                 
                 	.MACRO __CPWRR
                 	CP   R@0,R@2
                 	CPC  R@1,R@3
                 	.ENDM
                 
                 	.MACRO __CPWRN
                 	CPI  R@0,LOW(@2)
                 	LDI  R30,HIGH(@2)
                 	CPC  R@1,R30
                 	.ENDM
                 
                 	.MACRO __ADDB1MN
                 	SUBI R30,LOW(-@0-(@1))
                 	.ENDM
                 
                 	.MACRO __ADDB2MN
                 	SUBI R26,LOW(-@0-(@1))
                 	.ENDM
                 
                 	.MACRO __ADDW1MN
                 	SUBI R30,LOW(-@0-(@1))
                 	SBCI R31,HIGH(-@0-(@1))
                 	.ENDM
                 
                 	.MACRO __ADDW2MN
                 	SUBI R26,LOW(-@0-(@1))
                 	SBCI R27,HIGH(-@0-(@1))
                 	.ENDM
                 
                 	.MACRO __ADDW1FN
                 	SUBI R30,LOW(-2*@0-(@1))
                 	SBCI R31,HIGH(-2*@0-(@1))
                 	.ENDM
                 
                 	.MACRO __ADDD1FN
                 	SUBI R30,LOW(-2*@0-(@1))
                 	SBCI R31,HIGH(-2*@0-(@1))
                 	SBCI R22,BYTE3(-2*@0-(@1))
                 	.ENDM
                 
                 	.MACRO __ADDD1N
                 	SUBI R30,LOW(-@0)
                 	SBCI R31,HIGH(-@0)
                 	SBCI R22,BYTE3(-@0)
                 	SBCI R23,BYTE4(-@0)
                 	.ENDM
                 
                 	.MACRO __ADDD2N
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	SBCI R24,BYTE3(-@0)
                 	SBCI R25,BYTE4(-@0)
                 	.ENDM
                 
                 	.MACRO __SUBD1N
                 	SUBI R30,LOW(@0)
                 	SBCI R31,HIGH(@0)
                 	SBCI R22,BYTE3(@0)
                 	SBCI R23,BYTE4(@0)
                 	.ENDM
                 
                 	.MACRO __SUBD2N
                 	SUBI R26,LOW(@0)
                 	SBCI R27,HIGH(@0)
                 	SBCI R24,BYTE3(@0)
                 	SBCI R25,BYTE4(@0)
                 	.ENDM
                 
                 	.MACRO __ANDBMNN
                 	LDS  R30,@0+(@1)
                 	ANDI R30,LOW(@2)
                 	STS  @0+(@1),R30
                 	.ENDM
                 
                 	.MACRO __ANDWMNN
                 	LDS  R30,@0+(@1)
                 	ANDI R30,LOW(@2)
                 	STS  @0+(@1),R30
                 	LDS  R30,@0+(@1)+1
                 	ANDI R30,HIGH(@2)
                 	STS  @0+(@1)+1,R30
                 	.ENDM
                 
                 	.MACRO __ANDD1N
                 	ANDI R30,LOW(@0)
                 	ANDI R31,HIGH(@0)
                 	ANDI R22,BYTE3(@0)
                 	ANDI R23,BYTE4(@0)
                 	.ENDM
                 
                 	.MACRO __ANDD2N
                 	ANDI R26,LOW(@0)
                 	ANDI R27,HIGH(@0)
                 	ANDI R24,BYTE3(@0)
                 	ANDI R25,BYTE4(@0)
                 	.ENDM
                 
                 	.MACRO __ORBMNN
                 	LDS  R30,@0+(@1)
                 	ORI  R30,LOW(@2)
                 	STS  @0+(@1),R30
                 	.ENDM
                 
                 	.MACRO __ORWMNN
                 	LDS  R30,@0+(@1)
                 	ORI  R30,LOW(@2)
                 	STS  @0+(@1),R30
                 	LDS  R30,@0+(@1)+1
                 	ORI  R30,HIGH(@2)
                 	STS  @0+(@1)+1,R30
                 	.ENDM
                 
                 	.MACRO __ORD1N
                 	ORI  R30,LOW(@0)
                 	ORI  R31,HIGH(@0)
                 	ORI  R22,BYTE3(@0)
                 	ORI  R23,BYTE4(@0)
                 	.ENDM
                 
                 	.MACRO __ORD2N
                 	ORI  R26,LOW(@0)
                 	ORI  R27,HIGH(@0)
                 	ORI  R24,BYTE3(@0)
                 	ORI  R25,BYTE4(@0)
                 	.ENDM
                 
                 	.MACRO __DELAY_USB
                 	LDI  R24,LOW(@0)
                 __DELAY_USB_LOOP:
                 	DEC  R24
                 	BRNE __DELAY_USB_LOOP
                 	.ENDM
                 
                 	.MACRO __DELAY_USW
                 	LDI  R24,LOW(@0)
                 	LDI  R25,HIGH(@0)
                 __DELAY_USW_LOOP:
                 	SBIW R24,1
                 	BRNE __DELAY_USW_LOOP
                 	.ENDM
                 
                 	.MACRO __GETD1S
                 	LDD  R30,Y+@0
                 	LDD  R31,Y+@0+1
                 	LDD  R22,Y+@0+2
                 	LDD  R23,Y+@0+3
                 	.ENDM
                 
                 	.MACRO __GETD2S
                 	LDD  R26,Y+@0
                 	LDD  R27,Y+@0+1
                 	LDD  R24,Y+@0+2
                 	LDD  R25,Y+@0+3
                 	.ENDM
                 
                 	.MACRO __PUTD1S
                 	STD  Y+@0,R30
                 	STD  Y+@0+1,R31
                 	STD  Y+@0+2,R22
                 	STD  Y+@0+3,R23
                 	.ENDM
                 
                 	.MACRO __PUTD2S
                 	STD  Y+@0,R26
                 	STD  Y+@0+1,R27
                 	STD  Y+@0+2,R24
                 	STD  Y+@0+3,R25
                 	.ENDM
                 
                 	.MACRO __PUTDZ2
                 	STD  Z+@0,R26
                 	STD  Z+@0+1,R27
                 	STD  Z+@0+2,R24
                 	STD  Z+@0+3,R25
                 	.ENDM
                 
                 	.MACRO __CLRD1S
                 	STD  Y+@0,R30
                 	STD  Y+@0+1,R30
                 	STD  Y+@0+2,R30
                 	STD  Y+@0+3,R30
                 	.ENDM
                 
                 	.MACRO __POINTB1MN
                 	LDI  R30,LOW(@0+(@1))
                 	.ENDM
                 
                 	.MACRO __POINTW1MN
                 	LDI  R30,LOW(@0+(@1))
                 	LDI  R31,HIGH(@0+(@1))
                 	.ENDM
                 
                 	.MACRO __POINTD1M
                 	LDI  R30,LOW(@0)
                 	LDI  R31,HIGH(@0)
                 	LDI  R22,BYTE3(@0)
                 	LDI  R23,BYTE4(@0)
                 	.ENDM
                 
                 	.MACRO __POINTW1FN
                 	LDI  R30,LOW(2*@0+(@1))
                 	LDI  R31,HIGH(2*@0+(@1))
                 	.ENDM
                 
                 	.MACRO __POINTD1FN
                 	LDI  R30,LOW(2*@0+(@1))
                 	LDI  R31,HIGH(2*@0+(@1))
                 	LDI  R22,BYTE3(2*@0+(@1))
                 	LDI  R23,BYTE4(2*@0+(@1))
                 	.ENDM
                 
                 	.MACRO __POINTB2MN
                 	LDI  R26,LOW(@0+(@1))
                 	.ENDM
                 
                 	.MACRO __POINTW2MN
                 	LDI  R26,LOW(@0+(@1))
                 	LDI  R27,HIGH(@0+(@1))
                 	.ENDM
                 
                 	.MACRO __POINTW2FN
                 	LDI  R26,LOW(2*@0+(@1))
                 	LDI  R27,HIGH(2*@0+(@1))
                 	.ENDM
                 
                 	.MACRO __POINTD2FN
                 	LDI  R26,LOW(2*@0+(@1))
                 	LDI  R27,HIGH(2*@0+(@1))
                 	LDI  R24,BYTE3(2*@0+(@1))
                 	LDI  R25,BYTE4(2*@0+(@1))
                 	.ENDM
                 
                 	.MACRO __POINTBRM
                 	LDI  R@0,LOW(@1)
                 	.ENDM
                 
                 	.MACRO __POINTWRM
                 	LDI  R@0,LOW(@2)
                 	LDI  R@1,HIGH(@2)
                 	.ENDM
                 
                 	.MACRO __POINTBRMN
                 	LDI  R@0,LOW(@1+(@2))
                 	.ENDM
                 
                 	.MACRO __POINTWRMN
                 	LDI  R@0,LOW(@2+(@3))
                 	LDI  R@1,HIGH(@2+(@3))
                 	.ENDM
                 
                 	.MACRO __POINTWRFN
                 	LDI  R@0,LOW(@2*2+(@3))
                 	LDI  R@1,HIGH(@2*2+(@3))
                 	.ENDM
                 
                 	.MACRO __GETD1N
                 	LDI  R30,LOW(@0)
                 	LDI  R31,HIGH(@0)
                 	LDI  R22,BYTE3(@0)
                 	LDI  R23,BYTE4(@0)
                 	.ENDM
                 
                 	.MACRO __GETD2N
                 	LDI  R26,LOW(@0)
                 	LDI  R27,HIGH(@0)
                 	LDI  R24,BYTE3(@0)
                 	LDI  R25,BYTE4(@0)
                 	.ENDM
                 
                 	.MACRO __GETB1MN
                 	LDS  R30,@0+(@1)
                 	.ENDM
                 
                 	.MACRO __GETB1HMN
                 	LDS  R31,@0+(@1)
                 	.ENDM
                 
                 	.MACRO __GETW1MN
                 	LDS  R30,@0+(@1)
                 	LDS  R31,@0+(@1)+1
                 	.ENDM
                 
                 	.MACRO __GETD1MN
                 	LDS  R30,@0+(@1)
                 	LDS  R31,@0+(@1)+1
                 	LDS  R22,@0+(@1)+2
                 	LDS  R23,@0+(@1)+3
                 	.ENDM
                 
                 	.MACRO __GETBRMN
                 	LDS  R@0,@1+(@2)
                 	.ENDM
                 
                 	.MACRO __GETWRMN
                 	LDS  R@0,@2+(@3)
                 	LDS  R@1,@2+(@3)+1
                 	.ENDM
                 
                 	.MACRO __GETWRZ
                 	LDD  R@0,Z+@2
                 	LDD  R@1,Z+@2+1
                 	.ENDM
                 
                 	.MACRO __GETD2Z
                 	LDD  R26,Z+@0
                 	LDD  R27,Z+@0+1
                 	LDD  R24,Z+@0+2
                 	LDD  R25,Z+@0+3
                 	.ENDM
                 
                 	.MACRO __GETB2MN
                 	LDS  R26,@0+(@1)
                 	.ENDM
                 
                 	.MACRO __GETW2MN
                 	LDS  R26,@0+(@1)
                 	LDS  R27,@0+(@1)+1
                 	.ENDM
                 
                 	.MACRO __GETD2MN
                 	LDS  R26,@0+(@1)
                 	LDS  R27,@0+(@1)+1
                 	LDS  R24,@0+(@1)+2
                 	LDS  R25,@0+(@1)+3
                 	.ENDM
                 
                 	.MACRO __PUTB1MN
                 	STS  @0+(@1),R30
                 	.ENDM
                 
                 	.MACRO __PUTW1MN
                 	STS  @0+(@1),R30
                 	STS  @0+(@1)+1,R31
                 	.ENDM
                 
                 	.MACRO __PUTD1MN
                 	STS  @0+(@1),R30
                 	STS  @0+(@1)+1,R31
                 	STS  @0+(@1)+2,R22
                 	STS  @0+(@1)+3,R23
                 	.ENDM
                 
                 	.MACRO __PUTB1EN
                 	LDI  R26,LOW(@0+(@1))
                 	LDI  R27,HIGH(@0+(@1))
                 	RCALL __EEPROMWRB
                 	.ENDM
                 
                 	.MACRO __PUTW1EN
                 	LDI  R26,LOW(@0+(@1))
                 	LDI  R27,HIGH(@0+(@1))
                 	RCALL __EEPROMWRW
                 	.ENDM
                 
                 	.MACRO __PUTD1EN
                 	LDI  R26,LOW(@0+(@1))
                 	LDI  R27,HIGH(@0+(@1))
                 	RCALL __EEPROMWRD
                 	.ENDM
                 
                 	.MACRO __PUTBR0MN
                 	STS  @0+(@1),R0
                 	.ENDM
                 
                 	.MACRO __PUTBMRN
                 	STS  @0+(@1),R@2
                 	.ENDM
                 
                 	.MACRO __PUTWMRN
                 	STS  @0+(@1),R@2
                 	STS  @0+(@1)+1,R@3
                 	.ENDM
                 
                 	.MACRO __PUTBZR
                 	STD  Z+@1,R@0
                 	.ENDM
                 
                 	.MACRO __PUTWZR
                 	STD  Z+@2,R@0
                 	STD  Z+@2+1,R@1
                 	.ENDM
                 
                 	.MACRO __GETW1R
                 	MOV  R30,R@0
                 	MOV  R31,R@1
                 	.ENDM
                 
                 	.MACRO __GETW2R
                 	MOV  R26,R@0
                 	MOV  R27,R@1
                 	.ENDM
                 
                 	.MACRO __GETWRN
                 	LDI  R@0,LOW(@2)
                 	LDI  R@1,HIGH(@2)
                 	.ENDM
                 
                 	.MACRO __PUTW1R
                 	MOV  R@0,R30
                 	MOV  R@1,R31
                 	.ENDM
                 
                 	.MACRO __PUTW2R
                 	MOV  R@0,R26
                 	MOV  R@1,R27
                 	.ENDM
                 
                 	.MACRO __ADDWRN
                 	SUBI R@0,LOW(-@2)
                 	SBCI R@1,HIGH(-@2)
                 	.ENDM
                 
                 	.MACRO __ADDWRR
                 	ADD  R@0,R@2
                 	ADC  R@1,R@3
                 	.ENDM
                 
                 	.MACRO __SUBWRN
                 	SUBI R@0,LOW(@2)
                 	SBCI R@1,HIGH(@2)
                 	.ENDM
                 
                 	.MACRO __SUBWRR
                 	SUB  R@0,R@2
                 	SBC  R@1,R@3
                 	.ENDM
                 
                 	.MACRO __ANDWRN
                 	ANDI R@0,LOW(@2)
                 	ANDI R@1,HIGH(@2)
                 	.ENDM
                 
                 	.MACRO __ANDWRR
                 	AND  R@0,R@2
                 	AND  R@1,R@3
                 	.ENDM
                 
                 	.MACRO __ORWRN
                 	ORI  R@0,LOW(@2)
                 	ORI  R@1,HIGH(@2)
                 	.ENDM
                 
                 	.MACRO __ORWRR
                 	OR   R@0,R@2
                 	OR   R@1,R@3
                 	.ENDM
                 
                 	.MACRO __EORWRR
                 	EOR  R@0,R@2
                 	EOR  R@1,R@3
                 	.ENDM
                 
                 	.MACRO __GETWRS
                 	LDD  R@0,Y+@2
                 	LDD  R@1,Y+@2+1
                 	.ENDM
                 
                 	.MACRO __PUTBSR
                 	STD  Y+@1,R@0
                 	.ENDM
                 
                 	.MACRO __PUTWSR
                 	STD  Y+@2,R@0
                 	STD  Y+@2+1,R@1
                 	.ENDM
                 
                 	.MACRO __MOVEWRR
                 	MOV  R@0,R@2
                 	MOV  R@1,R@3
                 	.ENDM
                 
                 	.MACRO __INWR
                 	IN   R@0,@2
                 	IN   R@1,@2+1
                 	.ENDM
                 
                 	.MACRO __OUTWR
                 	OUT  @2+1,R@1
                 	OUT  @2,R@0
                 	.ENDM
                 
                 	.MACRO __CALL1MN
                 	LDS  R30,@0+(@1)
                 	LDS  R31,@0+(@1)+1
                 	ICALL
                 	.ENDM
                 
                 	.MACRO __CALL1FN
                 	LDI  R30,LOW(2*@0+(@1))
                 	LDI  R31,HIGH(2*@0+(@1))
                 	RCALL __GETW1PF
                 	ICALL
                 	.ENDM
                 
                 	.MACRO __CALL2EN
                 	PUSH R26
                 	PUSH R27
                 	LDI  R26,LOW(@0+(@1))
                 	LDI  R27,HIGH(@0+(@1))
                 	RCALL __EEPROMRDW
                 	POP  R27
                 	POP  R26
                 	ICALL
                 	.ENDM
                 
                 	.MACRO __CALL2EX
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	RCALL __EEPROMRDD
                 	ICALL
                 	.ENDM
                 
                 	.MACRO __GETW1STACK
                 	IN   R30,SPL
                 	IN   R31,SPH
                 	ADIW R30,@0+1
                 	LD   R0,Z+
                 	LD   R31,Z
                 	MOV  R30,R0
                 	.ENDM
                 
                 	.MACRO __GETD1STACK
                 	IN   R30,SPL
                 	IN   R31,SPH
                 	ADIW R30,@0+1
                 	LD   R0,Z+
                 	LD   R1,Z+
                 	LD   R22,Z
                 	MOVW R30,R0
                 	.ENDM
                 
                 	.MACRO __NBST
                 	BST  R@0,@1
                 	IN   R30,SREG
                 	LDI  R31,0x40
                 	EOR  R30,R31
                 	OUT  SREG,R30
                 	.ENDM
                 
                 
                 	.MACRO __PUTB1SN
                 	LDD  R26,Y+@0
                 	SUBI R26,-@1
                 	ST   X,R30
                 	.ENDM
                 
                 	.MACRO __PUTW1SN
                 	LDD  R26,Y+@0
                 	SUBI R26,-@1
                 	ST   X+,R30
                 	ST   X,R31
                 	.ENDM
                 
                 	.MACRO __PUTD1SN
                 	LDD  R26,Y+@0
                 	SUBI R26,-@1
                 	RCALL __PUTDP1
                 	.ENDM
                 
                 	.MACRO __PUTB1SNS
                 	LDD  R26,Y+@0
                 	SUBI R26,-@1
                 	ST   X,R30
                 	.ENDM
                 
                 	.MACRO __PUTW1SNS
                 	LDD  R26,Y+@0
                 	SUBI R26,-@1
                 	ST   X+,R30
                 	ST   X,R31
                 	.ENDM
                 
                 	.MACRO __PUTD1SNS
                 	LDD  R26,Y+@0
                 	SUBI R26,-@1
                 	RCALL __PUTDP1
                 	.ENDM
                 
                 	.MACRO __PUTB1RN
                 	MOV  R26,R@0
                 	SUBI R26,-@1
                 	ST   X,R30
                 	.ENDM
                 
                 	.MACRO __PUTW1RN
                 	MOV  R26,R@0
                 	SUBI R26,-@1
                 	ST   X+,R30
                 	ST   X,R31
                 	.ENDM
                 
                 	.MACRO __PUTD1RN
                 	MOV  R26,R@0
                 	SUBI R26,-@1
                 	RCALL __PUTDP1
                 	.ENDM
                 
                 	.MACRO __PUTB1RNS
                 	MOV  R26,R@0
                 	SUBI R26,-@1
                 	ST   X,R30
                 	.ENDM
                 
                 	.MACRO __PUTW1RNS
                 	MOV  R26,R@0
                 	SUBI R26,-@1
                 	ST   X+,R30
                 	ST   X,R31
                 	.ENDM
                 
                 	.MACRO __PUTD1RNS
                 	MOV  R26,R@0
                 	SUBI R26,-@1
                 	RCALL __PUTDP1
                 	.ENDM
                 
                 	.MACRO __PUTB1PMN
                 	LDS  R26,@0
                 	SUBI R26,-@1
                 	ST   X,R30
                 	.ENDM
                 
                 	.MACRO __PUTW1PMN
                 	LDS  R26,@0
                 	SUBI R26,-@1
                 	ST   X+,R30
                 	ST   X,R31
                 	.ENDM
                 
                 	.MACRO __PUTD1PMN
                 	LDS  R26,@0
                 	SUBI R26,-@1
                 	RCALL __PUTDP1
                 	.ENDM
                 
                 	.MACRO __PUTB1PMNS
                 	LDS  R26,@0
                 	SUBI R26,-@1
                 	ST   X,R30
                 	.ENDM
                 
                 	.MACRO __PUTW1PMNS
                 	LDS  R26,@0
                 	SUBI R26,-@1
                 	ST   X+,R30
                 	ST   X,R31
                 	.ENDM
                 
                 	.MACRO __PUTD1PMNS
                 	LDS  R26,@0
                 	SUBI R26,-@1
                 	RCALL __PUTDP1
                 	.ENDM
                 
                 	.MACRO __GETB1SX
                 	MOVW R30,R28
                 	SUBI R30,LOW(-@0)
                 	SBCI R31,HIGH(-@0)
                 	LD   R30,Z
                 	.ENDM
                 
                 	.MACRO __GETB1HSX
                 	MOVW R30,R28
                 	SUBI R30,LOW(-@0)
                 	SBCI R31,HIGH(-@0)
                 	LD   R31,Z
                 	.ENDM
                 
                 	.MACRO __GETW1SX
                 	MOVW R30,R28
                 	SUBI R30,LOW(-@0)
                 	SBCI R31,HIGH(-@0)
                 	LD   R0,Z+
                 	LD   R31,Z
                 	MOV  R30,R0
                 	.ENDM
                 
                 	.MACRO __GETD1SX
                 	MOVW R30,R28
                 	SUBI R30,LOW(-@0)
                 	SBCI R31,HIGH(-@0)
                 	LD   R0,Z+
                 	LD   R1,Z+
                 	LD   R22,Z+
                 	LD   R23,Z
                 	MOVW R30,R0
                 	.ENDM
                 
                 	.MACRO __GETB2SX
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	LD   R26,X
                 	.ENDM
                 
                 	.MACRO __GETW2SX
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	LD   R0,X+
                 	LD   R27,X
                 	MOV  R26,R0
                 	.ENDM
                 
                 	.MACRO __GETD2SX
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	LD   R0,X+
                 	LD   R1,X+
                 	LD   R24,X+
                 	LD   R25,X
                 	MOVW R26,R0
                 	.ENDM
                 
                 	.MACRO __GETBRSX
                 	MOVW R30,R28
                 	SUBI R30,LOW(-@1)
                 	SBCI R31,HIGH(-@1)
                 	LD   R@0,Z
                 	.ENDM
                 
                 	.MACRO __GETWRSX
                 	MOVW R30,R28
                 	SUBI R30,LOW(-@2)
                 	SBCI R31,HIGH(-@2)
                 	LD   R@0,Z+
                 	LD   R@1,Z
                 	.ENDM
                 
                 	.MACRO __GETBRSX2
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	LD   R@0,X
                 	.ENDM
                 
                 	.MACRO __GETWRSX2
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@2)
                 	SBCI R27,HIGH(-@2)
                 	LD   R@0,X+
                 	LD   R@1,X
                 	.ENDM
                 
                 	.MACRO __LSLW8SX
                 	MOVW R30,R28
                 	SUBI R30,LOW(-@0)
                 	SBCI R31,HIGH(-@0)
                 	LD   R31,Z
                 	CLR  R30
                 	.ENDM
                 
                 	.MACRO __PUTB1SX
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	ST   X,R30
                 	.ENDM
                 
                 	.MACRO __PUTW1SX
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	ST   X+,R30
                 	ST   X,R31
                 	.ENDM
                 
                 	.MACRO __PUTD1SX
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	ST   X+,R30
                 	ST   X+,R31
                 	ST   X+,R22
                 	ST   X,R23
                 	.ENDM
                 
                 	.MACRO __CLRW1SX
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	ST   X+,R30
                 	ST   X,R30
                 	.ENDM
                 
                 	.MACRO __CLRD1SX
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	ST   X+,R30
                 	ST   X+,R30
                 	ST   X+,R30
                 	ST   X,R30
                 	.ENDM
                 
                 	.MACRO __PUTB2SX
                 	MOVW R30,R28
                 	SUBI R30,LOW(-@0)
                 	SBCI R31,HIGH(-@0)
                 	ST   Z,R26
                 	.ENDM
                 
                 	.MACRO __PUTW2SX
                 	MOVW R30,R28
                 	SUBI R30,LOW(-@0)
                 	SBCI R31,HIGH(-@0)
                 	ST   Z+,R26
                 	ST   Z,R27
                 	.ENDM
                 
                 	.MACRO __PUTD2SX
                 	MOVW R30,R28
                 	SUBI R30,LOW(-@0)
                 	SBCI R31,HIGH(-@0)
                 	ST   Z+,R26
                 	ST   Z+,R27
                 	ST   Z+,R24
                 	ST   Z,R25
                 	.ENDM
                 
                 	.MACRO __PUTBSRX
                 	MOVW R30,R28
                 	SUBI R30,LOW(-@1)
                 	SBCI R31,HIGH(-@1)
                 	ST   Z,R@0
                 	.ENDM
                 
                 	.MACRO __PUTWSRX
                 	MOVW R30,R28
                 	SUBI R30,LOW(-@2)
                 	SBCI R31,HIGH(-@2)
                 	ST   Z+,R@0
                 	ST   Z,R@1
                 	.ENDM
                 
                 	.MACRO __PUTB1SNX
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	LD   R0,X+
                 	LD   R27,X
                 	MOV  R26,R0
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	ST   X,R30
                 	.ENDM
                 
                 	.MACRO __PUTW1SNX
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	LD   R0,X+
                 	LD   R27,X
                 	MOV  R26,R0
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	ST   X+,R30
                 	ST   X,R31
                 	.ENDM
                 
                 	.MACRO __PUTD1SNX
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	LD   R0,X+
                 	LD   R27,X
                 	MOV  R26,R0
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	ST   X+,R30
                 	ST   X+,R31
                 	ST   X+,R22
                 	ST   X,R23
                 	.ENDM
                 
                 ;NAME DEFINITIONS FOR GLOBAL VARIABLES ALLOCATED TO REGISTERS
                 	.DEF _Uc_Negative_5_over_count=R3
                 	.DEF _Uc_Negative_5_under_count=R2
                 	.DEF _Uc_Positive_5_over_count=R5
                 	.DEF _Uc_Positive_5_under_count=R4
                 	.DEF _Uc_Positive_12_over_count=R7
                 	.DEF _Uc_Positive_12_under_count=R6
                 	.DEF _Uc_Negative_12_over_count=R9
                 	.DEF _Uc_Negative_12_under_count=R8
                 	.DEF _Uc_Positive_24_over_count=R11
                 	.DEF _Uc_Positive_24_under_count=R10
                 	.DEF _Uint_Warning_timer=R12
                 	.DEF _Uint_Warning_timer_msb=R13
                 
                 ;GPIOR0-GPIOR2 INITIALIZATION VALUES
                 	.EQU __GPIOR0_INIT=0x00
                 	.EQU __GPIOR1_INIT=0x00
                 	.EQU __GPIOR2_INIT=0x00
                 
                 	.CSEG
                 	.ORG 0x00
                 
                 ;START OF CODE MARKER
                 __START_OF_CODE:
                 
                 ;INTERRUPT VECTORS
000000 c015      	RJMP __RESET
000001 cffe      	RJMP 0x00
000002 cffd      	RJMP 0x00
000003 cffc      	RJMP 0x00
000004 cffb      	RJMP 0x00
000005 cffa      	RJMP 0x00
000006 cff9      	RJMP 0x00
000007 cff8      	RJMP 0x00
000008 cff7      	RJMP 0x00
000009 cff6      	RJMP 0x00
00000a cff5      	RJMP 0x00
00000b cff4      	RJMP 0x00
00000c cff3      	RJMP 0x00
00000d cff2      	RJMP 0x00
00000e cff1      	RJMP 0x00
00000f cff0      	RJMP 0x00
000010 cfef      	RJMP 0x00
                 
                 ;GLOBAL REGISTER VARIABLES INITIALIZATION
                 __REG_VARS:
000011 0190      	.DB  0x90,0x1
                 
                 
                 __GLOBAL_INI_TBL:
000012 0002      	.DW  0x02
000013 000c      	.DW  0x0C
000014 0022      	.DW  __REG_VARS*2
                 
                 _0xFFFFFFFF:
000015 0000      	.DW  0
                 
                 #define __GLOBAL_INI_TBL_PRESENT 1
                 
                 __RESET:
000016 94f8      	CLI
000017 27ee      	CLR  R30
000018 bbec      	OUT  EECR,R30
000019 bfe5      	OUT  MCUCR,R30
                 
                 ;CLEAR R2-R14
00001a e08d      	LDI  R24,(14-2)+1
00001b e0a2      	LDI  R26,2
                 __CLEAR_REG:
00001c 93ed      	ST   X+,R30
00001d 958a      	DEC  R24
00001e f7e9      	BRNE __CLEAR_REG
                 
                 ;CLEAR SRAM
00001f e880      	LDI  R24,__CLEAR_SRAM_SIZE
000020 e6a0      	LDI  R26,__SRAM_START
                 __CLEAR_SRAM:
000021 93ed      	ST   X+,R30
000022 958a      	DEC  R24
000023 f7e9      	BRNE __CLEAR_SRAM
                 
                 ;GLOBAL VARIABLES INITIALIZATION
000024 e2e4      	LDI  R30,LOW(__GLOBAL_INI_TBL*2)
000025 e0f0      	LDI  R31,HIGH(__GLOBAL_INI_TBL*2)
                 __GLOBAL_INI_NEXT:
000026 9185      	LPM  R24,Z+
000027 9195      	LPM  R25,Z+
000028 9700      	SBIW R24,0
000029 f061      	BREQ __GLOBAL_INI_END
00002a 91a5      	LPM  R26,Z+
00002b 91b5      	LPM  R27,Z+
00002c 9005      	LPM  R0,Z+
00002d 9015      	LPM  R1,Z+
00002e 01bf      	MOVW R22,R30
00002f 01f0      	MOVW R30,R0
                 __GLOBAL_INI_LOOP:
000030 9005      	LPM  R0,Z+
000031 920d      	ST   X+,R0
000032 9701      	SBIW R24,1
000033 f7e1      	BRNE __GLOBAL_INI_LOOP
000034 01fb      	MOVW R30,R22
000035 cff0      	RJMP __GLOBAL_INI_NEXT
                 __GLOBAL_INI_END:
                 
                 ;GPIOR0-GPIOR2 INITIALIZATION
000036 e0e0      	LDI  R30,__GPIOR0_INIT
000037 bbe3      	OUT  GPIOR0,R30
                 	;__GPIOR1_INIT = __GPIOR0_INIT
000038 bbe4      	OUT  GPIOR1,R30
                 	;__GPIOR2_INIT = __GPIOR0_INIT
000039 bbe5      	OUT  GPIOR2,R30
                 
                 ;HARDWARE STACK POINTER INITIALIZATION
00003a edef      	LDI  R30,LOW(__SRAM_END-__HEAP_SIZE)
00003b bfed      	OUT  SPL,R30
                 
                 ;DATA STACK POINTER INITIALIZATION
00003c e8c0      	LDI  R28,LOW(__SRAM_START+__DSTACK_SIZE)
                 
00003d c0d4      	RJMP _main
                 
                 	.ESEG
                 	.ORG 0
                 
                 	.DSEG
                 	.ORG 0x80
                 
                 	.CSEG
                 ;/*******************************************************
                 ;This program was created by the
                 ;CodeWizardAVR V3.12 Advanced
                 ;Automatic Program Generator
                 ;� Copyright 1998-2014 Pavel Haiduc, HP InfoTech s.r.l.
                 ;http://www.hpinfotech.com
                 ;
                 ;Project : DC_Power_Supply_Protect
                 ;Version : 1.0
                 ;Date    : 11/28/2018
                 ;Author  :
                 ;Company :
                 ;Comments:
                 ;Bao ve duong nguon DC +24V +12V -12V +5V -5V
                 ;
                 ;
                 ;Chip type               : ATtiny24
                 ;AVR Core Clock frequency: 8.000000 MHz
                 ;Memory model            : Tiny
                 ;External RAM size       : 0
                 ;Data Stack size         : 32
                 ;*******************************************************/
                 ;
                 ;#include <tiny24.h>
                 	#ifndef __SLEEP_DEFINED__
                 	#define __SLEEP_DEFINED__
                 	.EQU __se_bit=0x20
                 	.EQU __sm_mask=0x18
                 	.EQU __sm_adc_noise_red=0x08
                 	.EQU __sm_powerdown=0x10
                 	.EQU __sm_standby=0x18
                 	.SET power_ctrl_reg=mcucr
                 	#endif
                 ;#include <delay.h>
                 ;
                 ;#define ADC_Negative_5  1
                 ;#define ADC_Negative_12 4
                 ;#define ADC_Positive_5  5
                 ;#define ADC_Positive_12 3
                 ;#define ADC_Positive_24 2
                 ;
                 ;#define ADC_Negative_5_Set_OVER 444
                 ;#define ADC_Positive_5_Set_OVER 448
                 ;#define ADC_Negative_12_Set_OVER    448
                 ;#define ADC_Positive_12_Set_OVER    446
                 ;#define ADC_Positive_24_Set_OVER    460
                 ;
                 ;
                 ;#define CONTROL_UNDER_24    PORTA.7
                 ;#define CONTROL_24  PORTA.6
                 ;#define BUZZER  PORTB.2
                 ;
                 ;#define CONTROL_UNDER_24_ON CONTROL_UNDER_24=0
                 ;#define CONTROL_UNDER_24_OFF CONTROL_UNDER_24=1
                 ;
                 ;#define CONTROL_24_ON   CONTROL_24=1
                 ;#define CONTROL_24_OFF  CONTROL_24=0
                 ;
                 ;#define BUZZER_ON   BUZZER = 1
                 ;#define BUZZER_OFF  BUZZER = 0
                 ;
                 ;#define TIME_BUZZER 40
                 ;#define TIME_WARNING    500
                 ;
                 ;
                 ;unsigned char  Uc_Negative_5_over_count;
                 ;unsigned char  Uc_Negative_5_under_count;
                 ;
                 ;unsigned char  Uc_Positive_5_over_count;
                 ;unsigned char  Uc_Positive_5_under_count;
                 ;
                 ;unsigned char  Uc_Positive_12_over_count;
                 ;unsigned char  Uc_Positive_12_under_count;
                 ;
                 ;unsigned char  Uc_Negative_12_over_count;
                 ;unsigned char  Uc_Negative_12_under_count;
                 ;
                 ;unsigned char  Uc_Positive_24_over_count;
                 ;unsigned char  Uc_Positive_24_under_count;
                 ;
                 ;unsigned int    Uint_Warning_timer = 400;
                 ;
                 ;
                 ;bit  Uc_Negative_5_warning;
                 ;bit  Uc_Positive_5_warning;
                 ;bit  Uc_Positive_12_warning;
                 ;bit  Uc_Negative_12_warning;
                 ;bit  Uc_Positive_24_warning;
                 ;// Declare your global variables here
                 ;
                 ;// Voltage Reference: AVCC pin
                 ;#define ADC_VREF_TYPE ((0<<REFS1) | (0<<REFS0))
                 ;
                 ;// Read the AD conversion result
                 ;unsigned int read_adc(unsigned char adc_input)
                 ; 0000 0057 {
                 
                 	.CSEG
                 _read_adc:
                 ; .FSTART _read_adc
                 ; 0000 0058 ADMUX=(adc_input & 0x3f) | ADC_VREF_TYPE;
00003e 93aa      	ST   -Y,R26
                 ;	adc_input -> Y+0
00003f 81e8      	LD   R30,Y
000040 73ef      	ANDI R30,LOW(0x3F)
000041 b9e7      	OUT  0x7,R30
                 ; 0000 0059 // Delay needed for the stabilization of the ADC input voltage
                 ; 0000 005A delay_us(10);
                +
000042 e18b     +LDI R24 , LOW ( 27 )
                +__DELAY_USB_LOOP :
000043 958a     +DEC R24
000044 f7f1     +BRNE __DELAY_USB_LOOP
                 	__DELAY_USB 27
                 ; 0000 005B // Start the AD conversion
                 ; 0000 005C ADCSRA|=(1<<ADSC);
000045 9a36      	SBI  0x6,6
                 ; 0000 005D // Wait for the AD conversion to complete
                 ; 0000 005E while ((ADCSRA & (1<<ADIF))==0);
                 _0x3:
000046 9b34      	SBIS 0x6,4
000047 cffe      	RJMP _0x3
                 ; 0000 005F ADCSRA|=(1<<ADIF);
000048 9a34      	SBI  0x6,4
                 ; 0000 0060 return ADCW;
000049 b1e4      	IN   R30,0x4
00004a b1f5      	IN   R31,0x4+1
00004b 9621      	ADIW R28,1
00004c 9508      	RET
                 ; 0000 0061 }
                 ; .FEND
                 ;
                 ;void    Init(void)
                 ; 0000 0064 {
                 _Init:
                 ; .FSTART _Init
                 ; 0000 0065     Uc_Negative_5_warning = 0;
00004d 9898      	CBI  0x13,0
                 ; 0000 0066     Uc_Positive_5_warning = 0;
00004e 9899      	CBI  0x13,1
                 ; 0000 0067     Uc_Positive_12_warning = 0;
00004f 989a      	CBI  0x13,2
                 ; 0000 0068     Uc_Negative_12_warning = 0;
000050 989b      	CBI  0x13,3
                 ; 0000 0069     Uc_Positive_24_warning = 0;
000051 989c      	CBI  0x13,4
                 ; 0000 006A 
                 ; 0000 006B     Uc_Negative_5_over_count = 0;
000052 2433      	CLR  R3
                 ; 0000 006C     Uc_Negative_5_under_count = 0;
000053 2422      	CLR  R2
                 ; 0000 006D     Uc_Positive_5_over_count = 0;
000054 2455      	CLR  R5
                 ; 0000 006E     Uc_Positive_5_under_count = 0;
000055 2444      	CLR  R4
                 ; 0000 006F     Uc_Positive_12_over_count = 0;
000056 2477      	CLR  R7
                 ; 0000 0070     Uc_Positive_12_under_count = 0;
000057 2466      	CLR  R6
                 ; 0000 0071     Uc_Negative_12_over_count = 0;
000058 2499      	CLR  R9
                 ; 0000 0072     Uc_Negative_12_under_count = 0;
000059 2488      	CLR  R8
                 ; 0000 0073     Uc_Positive_24_over_count = 0;
00005a 24bb      	CLR  R11
                 ; 0000 0074     Uc_Positive_24_under_count = 0;
00005b 24aa      	CLR  R10
                 ; 0000 0075 
                 ; 0000 0076     CONTROL_24_ON;
00005c 9ade      	SBI  0x1B,6
                 ; 0000 0077     CONTROL_UNDER_24_ON;
00005d 98df      	CBI  0x1B,7
                 ; 0000 0078 
                 ; 0000 0079     BUZZER_ON;
00005e 9ac2      	SBI  0x18,2
                 ; 0000 007A     delay_ms(200);
00005f eca8      	LDI  R26,LOW(200)
000060 e0b0      	LDI  R27,0
000061 d0e6      	RCALL _delay_ms
                 ; 0000 007B     BUZZER_OFF;
000062 98c2      	CBI  0x18,2
                 ; 0000 007C }
000063 9508      	RET
                 ; .FEND
                 ;
                 ;void    Protect(void)
                 ; 0000 007F {
                 _Protect:
                 ; .FSTART _Protect
                 ; 0000 0080     unsigned int    Uint_adc_value;
                 ; 0000 0081 
                 ; 0000 0082     /* Kiem tra nguon -5vdc */
                 ; 0000 0083     Uint_adc_value = read_adc(ADC_Negative_5);
000064 d103      	RCALL __SAVELOCR2
                 ;	Uint_adc_value -> R16,R17
000065 e0a1      	LDI  R26,LOW(1)
000066 d0d9      	RCALL SUBOPT_0x0
                 ; 0000 0084     if(Uint_adc_value > ADC_Negative_5_Set_OVER)
                +
000067 3b0d     +CPI R16 , LOW ( 445 )
000068 e0e1     +LDI R30 , HIGH ( 445 )
000069 071e     +CPC R17 , R30
                 	__CPWRN 16,17,445
00006a f048      	BRLO _0x18
                 ; 0000 0085     {
                 ; 0000 0086         Uc_Negative_5_over_count++;
00006b 9433      	INC  R3
                 ; 0000 0087         if(Uc_Negative_5_over_count > 10)
00006c e0ea      	LDI  R30,LOW(10)
00006d 15e3      	CP   R30,R3
00006e f420      	BRSH _0x19
                 ; 0000 0088         {
                 ; 0000 0089             Uc_Negative_5_over_count = 11;
00006f e0eb      	LDI  R30,LOW(11)
000070 2e3e      	MOV  R3,R30
                 ; 0000 008A             Uc_Negative_5_under_count = 0;
000071 2422      	CLR  R2
                 ; 0000 008B             /* Set warning */
                 ; 0000 008C             Uc_Negative_5_warning = 1;
000072 9a98      	SBI  0x13,0
                 ; 0000 008D         }
                 ; 0000 008E     }
                 _0x19:
                 ; 0000 008F     else
000073 c008      	RJMP _0x1C
                 _0x18:
                 ; 0000 0090     {
                 ; 0000 0091         Uc_Negative_5_under_count++;
000074 9423      	INC  R2
                 ; 0000 0092         if(Uc_Negative_5_under_count > 10)
000075 e0ea      	LDI  R30,LOW(10)
000076 15e2      	CP   R30,R2
000077 f420      	BRSH _0x1D
                 ; 0000 0093         {
                 ; 0000 0094             Uc_Negative_5_over_count = 0;
000078 2433      	CLR  R3
                 ; 0000 0095             Uc_Negative_5_under_count = 11;
000079 e0eb      	LDI  R30,LOW(11)
00007a 2e2e      	MOV  R2,R30
                 ; 0000 0096             /* clear warning */
                 ; 0000 0097             Uc_Negative_5_warning = 0;
00007b 9898      	CBI  0x13,0
                 ; 0000 0098         }
                 ; 0000 0099     }
                 _0x1D:
                 _0x1C:
                 ; 0000 009A 
                 ; 0000 009B     /* Kiem tra nguon +5VDC */
                 ; 0000 009C     Uint_adc_value = read_adc(ADC_Positive_5);
00007c e0a5      	LDI  R26,LOW(5)
00007d d0c2      	RCALL SUBOPT_0x0
                 ; 0000 009D     if(Uint_adc_value > ADC_Positive_5_Set_OVER)
                +
00007e 3c01     +CPI R16 , LOW ( 449 )
00007f e0e1     +LDI R30 , HIGH ( 449 )
000080 071e     +CPC R17 , R30
                 	__CPWRN 16,17,449
000081 f048      	BRLO _0x20
                 ; 0000 009E     {
                 ; 0000 009F         Uc_Positive_5_over_count++;
000082 9453      	INC  R5
                 ; 0000 00A0         if(Uc_Positive_5_over_count > 10)
000083 e0ea      	LDI  R30,LOW(10)
000084 15e5      	CP   R30,R5
000085 f420      	BRSH _0x21
                 ; 0000 00A1         {
                 ; 0000 00A2             Uc_Positive_5_over_count = 11;
000086 e0eb      	LDI  R30,LOW(11)
000087 2e5e      	MOV  R5,R30
                 ; 0000 00A3             Uc_Positive_5_under_count = 0;
000088 2444      	CLR  R4
                 ; 0000 00A4             /* Set warning */
                 ; 0000 00A5             Uc_Positive_5_warning = 1;
000089 9a99      	SBI  0x13,1
                 ; 0000 00A6         }
                 ; 0000 00A7     }
                 _0x21:
                 ; 0000 00A8     else
00008a c008      	RJMP _0x24
                 _0x20:
                 ; 0000 00A9     {
                 ; 0000 00AA         Uc_Positive_5_under_count++;
00008b 9443      	INC  R4
                 ; 0000 00AB         if(Uc_Positive_5_under_count > 10)
00008c e0ea      	LDI  R30,LOW(10)
00008d 15e4      	CP   R30,R4
00008e f420      	BRSH _0x25
                 ; 0000 00AC         {
                 ; 0000 00AD             Uc_Positive_5_over_count = 0;
00008f 2455      	CLR  R5
                 ; 0000 00AE             Uc_Positive_5_under_count = 11;
000090 e0eb      	LDI  R30,LOW(11)
000091 2e4e      	MOV  R4,R30
                 ; 0000 00AF             /* clear warning */
                 ; 0000 00B0             Uc_Positive_5_warning = 0;
000092 9899      	CBI  0x13,1
                 ; 0000 00B1         }
                 ; 0000 00B2     }
                 _0x25:
                 _0x24:
                 ; 0000 00B3 
                 ; 0000 00B4     /* Kiem tra nguon -12VDC */
                 ; 0000 00B5     Uint_adc_value = read_adc(ADC_Negative_12);
000093 e0a4      	LDI  R26,LOW(4)
000094 d0ab      	RCALL SUBOPT_0x0
                 ; 0000 00B6     if(Uint_adc_value > ADC_Negative_12_Set_OVER)
                +
000095 3c01     +CPI R16 , LOW ( 449 )
000096 e0e1     +LDI R30 , HIGH ( 449 )
000097 071e     +CPC R17 , R30
                 	__CPWRN 16,17,449
000098 f048      	BRLO _0x28
                 ; 0000 00B7     {
                 ; 0000 00B8         Uc_Negative_12_over_count++;
000099 9493      	INC  R9
                 ; 0000 00B9         if(Uc_Negative_12_over_count > 10)
00009a e0ea      	LDI  R30,LOW(10)
00009b 15e9      	CP   R30,R9
00009c f420      	BRSH _0x29
                 ; 0000 00BA         {
                 ; 0000 00BB             Uc_Negative_12_over_count = 11;
00009d e0eb      	LDI  R30,LOW(11)
00009e 2e9e      	MOV  R9,R30
                 ; 0000 00BC             Uc_Negative_12_under_count = 0;
00009f 2488      	CLR  R8
                 ; 0000 00BD             /* Set warning */
                 ; 0000 00BE             Uc_Negative_12_warning = 1;
0000a0 9a9b      	SBI  0x13,3
                 ; 0000 00BF         }
                 ; 0000 00C0     }
                 _0x29:
                 ; 0000 00C1     else
0000a1 c008      	RJMP _0x2C
                 _0x28:
                 ; 0000 00C2     {
                 ; 0000 00C3         Uc_Negative_12_under_count++;
0000a2 9483      	INC  R8
                 ; 0000 00C4         if(Uc_Negative_12_under_count > 10)
0000a3 e0ea      	LDI  R30,LOW(10)
0000a4 15e8      	CP   R30,R8
0000a5 f420      	BRSH _0x2D
                 ; 0000 00C5         {
                 ; 0000 00C6             Uc_Negative_12_over_count = 0;
0000a6 2499      	CLR  R9
                 ; 0000 00C7             Uc_Negative_12_under_count = 11;
0000a7 e0eb      	LDI  R30,LOW(11)
0000a8 2e8e      	MOV  R8,R30
                 ; 0000 00C8             /* clear warning */
                 ; 0000 00C9             Uc_Negative_12_warning = 0;
0000a9 989b      	CBI  0x13,3
                 ; 0000 00CA         }
                 ; 0000 00CB     }
                 _0x2D:
                 _0x2C:
                 ; 0000 00CC 
                 ; 0000 00CD     /* Kiem tra nguon +12VDC */
                 ; 0000 00CE     Uint_adc_value = read_adc(ADC_Positive_12);
0000aa e0a3      	LDI  R26,LOW(3)
0000ab d094      	RCALL SUBOPT_0x0
                 ; 0000 00CF     if(Uint_adc_value > ADC_Positive_12_Set_OVER)
                +
0000ac 3b0f     +CPI R16 , LOW ( 447 )
0000ad e0e1     +LDI R30 , HIGH ( 447 )
0000ae 071e     +CPC R17 , R30
                 	__CPWRN 16,17,447
0000af f048      	BRLO _0x30
                 ; 0000 00D0     {
                 ; 0000 00D1         Uc_Positive_12_over_count++;
0000b0 9473      	INC  R7
                 ; 0000 00D2         if(Uc_Positive_12_over_count > 10)
0000b1 e0ea      	LDI  R30,LOW(10)
0000b2 15e7      	CP   R30,R7
0000b3 f420      	BRSH _0x31
                 ; 0000 00D3         {
                 ; 0000 00D4             Uc_Positive_12_over_count = 11;
0000b4 e0eb      	LDI  R30,LOW(11)
0000b5 2e7e      	MOV  R7,R30
                 ; 0000 00D5             Uc_Positive_12_under_count = 0;
0000b6 2466      	CLR  R6
                 ; 0000 00D6             /* Set warning */
                 ; 0000 00D7             Uc_Positive_12_warning = 1;
0000b7 9a9a      	SBI  0x13,2
                 ; 0000 00D8         }
                 ; 0000 00D9     }
                 _0x31:
                 ; 0000 00DA     else
0000b8 c008      	RJMP _0x34
                 _0x30:
                 ; 0000 00DB     {
                 ; 0000 00DC         Uc_Positive_12_under_count++;
0000b9 9463      	INC  R6
                 ; 0000 00DD         if(Uc_Positive_12_under_count > 10)
0000ba e0ea      	LDI  R30,LOW(10)
0000bb 15e6      	CP   R30,R6
0000bc f420      	BRSH _0x35
                 ; 0000 00DE         {
                 ; 0000 00DF             Uc_Positive_12_over_count = 0;
0000bd 2477      	CLR  R7
                 ; 0000 00E0             Uc_Positive_12_under_count = 11;
0000be e0eb      	LDI  R30,LOW(11)
0000bf 2e6e      	MOV  R6,R30
                 ; 0000 00E1             /* clear warning */
                 ; 0000 00E2             Uc_Positive_12_warning = 0;
0000c0 989a      	CBI  0x13,2
                 ; 0000 00E3         }
                 ; 0000 00E4     }
                 _0x35:
                 _0x34:
                 ; 0000 00E5 
                 ; 0000 00E6     /* Kiem tra nguon +24VDC */
                 ; 0000 00E7     Uint_adc_value = read_adc(ADC_Positive_24);
0000c1 e0a2      	LDI  R26,LOW(2)
0000c2 d07d      	RCALL SUBOPT_0x0
                 ; 0000 00E8     //Uint_adc_value = 150;
                 ; 0000 00E9     if(Uint_adc_value > ADC_Positive_24_Set_OVER)
                +
0000c3 3c0d     +CPI R16 , LOW ( 461 )
0000c4 e0e1     +LDI R30 , HIGH ( 461 )
0000c5 071e     +CPC R17 , R30
                 	__CPWRN 16,17,461
0000c6 f048      	BRLO _0x38
                 ; 0000 00EA     {
                 ; 0000 00EB         Uc_Positive_24_over_count++;
0000c7 94b3      	INC  R11
                 ; 0000 00EC         if(Uc_Positive_24_over_count > 5)
0000c8 e0e5      	LDI  R30,LOW(5)
0000c9 15eb      	CP   R30,R11
0000ca f420      	BRSH _0x39
                 ; 0000 00ED         {
                 ; 0000 00EE             Uc_Positive_24_over_count = 11;
0000cb e0eb      	LDI  R30,LOW(11)
0000cc 2ebe      	MOV  R11,R30
                 ; 0000 00EF             Uc_Positive_24_under_count = 0;
0000cd 24aa      	CLR  R10
                 ; 0000 00F0             /* Set warning */
                 ; 0000 00F1             Uc_Positive_24_warning = 1;
0000ce 9a9c      	SBI  0x13,4
                 ; 0000 00F2         }
                 ; 0000 00F3     }
                 _0x39:
                 ; 0000 00F4     else
0000cf c008      	RJMP _0x3C
                 _0x38:
                 ; 0000 00F5     {
                 ; 0000 00F6         Uc_Positive_24_under_count++;
0000d0 94a3      	INC  R10
                 ; 0000 00F7         if(Uc_Positive_24_under_count > 5)
0000d1 e0e5      	LDI  R30,LOW(5)
0000d2 15ea      	CP   R30,R10
0000d3 f420      	BRSH _0x3D
                 ; 0000 00F8         {
                 ; 0000 00F9             Uc_Positive_24_over_count = 0;
0000d4 24bb      	CLR  R11
                 ; 0000 00FA             Uc_Positive_24_under_count = 11;
0000d5 e0eb      	LDI  R30,LOW(11)
0000d6 2eae      	MOV  R10,R30
                 ; 0000 00FB             /* clear warning */
                 ; 0000 00FC             Uc_Positive_24_warning = 0;
0000d7 989c      	CBI  0x13,4
                 ; 0000 00FD         }
                 ; 0000 00FE     }
                 _0x3D:
                 _0x3C:
                 ; 0000 00FF 
                 ; 0000 0100     if(Uc_Negative_5_warning || Uc_Negative_12_warning || Uc_Positive_5_warning || Uc_Positive_12_warning)
0000d8 9998      	SBIC 0x13,0
0000d9 c006      	RJMP _0x41
0000da 999b      	SBIC 0x13,3
0000db c004      	RJMP _0x41
0000dc 9999      	SBIC 0x13,1
0000dd c002      	RJMP _0x41
0000de 9b9a      	SBIS 0x13,2
0000df c007      	RJMP _0x40
                 _0x41:
                 ; 0000 0101     {
                 ; 0000 0102         delay_ms(1000);
0000e0 eea8      	LDI  R26,LOW(1000)
0000e1 e0b3      	LDI  R27,HIGH(1000)
0000e2 d065      	RCALL _delay_ms
                 ; 0000 0103         CONTROL_UNDER_24_OFF;
0000e3 9adf      	SBI  0x1B,7
                 ; 0000 0104         Uint_Warning_timer = 0;
0000e4 24cc      	CLR  R12
0000e5 24dd      	CLR  R13
                 ; 0000 0105     }
                 ; 0000 0106     else  if(Uint_Warning_timer == TIME_WARNING)
0000e6 c007      	RJMP _0x45
                 _0x40:
0000e7 efe4      	LDI  R30,LOW(500)
0000e8 e0f1      	LDI  R31,HIGH(500)
0000e9 15ec      	CP   R30,R12
0000ea 05fd      	CPC  R31,R13
0000eb f411      	BRNE _0x46
                 ; 0000 0107     {
                 ; 0000 0108         CONTROL_UNDER_24_ON;
0000ec 98df      	CBI  0x1B,7
                 ; 0000 0109         BUZZER_OFF;
0000ed 98c2      	CBI  0x18,2
                 ; 0000 010A     }
                 ; 0000 010B 
                 ; 0000 010C     if(Uc_Positive_24_warning)
                 _0x46:
                 _0x45:
0000ee 9b9c      	SBIS 0x13,4
0000ef c007      	RJMP _0x4B
                 ; 0000 010D     {
                 ; 0000 010E         delay_ms(1000);
0000f0 eea8      	LDI  R26,LOW(1000)
0000f1 e0b3      	LDI  R27,HIGH(1000)
0000f2 d055      	RCALL _delay_ms
                 ; 0000 010F         CONTROL_24_OFF;
0000f3 98de      	CBI  0x1B,6
                 ; 0000 0110         Uint_Warning_timer = 0;
0000f4 24cc      	CLR  R12
0000f5 24dd      	CLR  R13
                 ; 0000 0111     }
                 ; 0000 0112     else if(Uint_Warning_timer >= TIME_WARNING)
0000f6 c003      	RJMP _0x4E
                 _0x4B:
0000f7 d04b      	RCALL SUBOPT_0x1
0000f8 f008      	BRLO _0x4F
                 ; 0000 0113     {
                 ; 0000 0114         CONTROL_24_ON;
0000f9 9ade      	SBI  0x1B,6
                 ; 0000 0115     }
                 ; 0000 0116 
                 ; 0000 0117 
                 ; 0000 0118     if(Uint_Warning_timer < TIME_WARNING)
                 _0x4F:
                 _0x4E:
0000fa d048      	RCALL SUBOPT_0x1
0000fb f478      	BRSH _0x52
                 ; 0000 0119     {
                 ; 0000 011A         Uint_Warning_timer++;
0000fc 01f6      	MOVW R30,R12
0000fd 9631      	ADIW R30,1
0000fe 016f      	MOVW R12,R30
                 ; 0000 011B         if(Uint_Warning_timer%TIME_BUZZER == 0)
0000ff 01d6      	MOVW R26,R12
000100 e2e8      	LDI  R30,LOW(40)
000101 e0f0      	LDI  R31,HIGH(40)
000102 d062      	RCALL __MODW21U
000103 9730      	SBIW R30,0
000104 f429      	BRNE _0x53
                 ; 0000 011C         {
                 ; 0000 011D             BUZZER = !BUZZER;
000105 9bc2      	SBIS 0x18,2
000106 c002      	RJMP _0x54
000107 98c2      	CBI  0x18,2
000108 c001      	RJMP _0x55
                 _0x54:
000109 9ac2      	SBI  0x18,2
                 _0x55:
                 ; 0000 011E         }
                 ; 0000 011F     }
                 _0x53:
                 ; 0000 0120     else
00010a c001      	RJMP _0x56
                 _0x52:
                 ; 0000 0121     {
                 ; 0000 0122         BUZZER_OFF;
00010b 98c2      	CBI  0x18,2
                 ; 0000 0123     }
                 _0x56:
                 ; 0000 0124     delay_ms(10);
00010c e0aa      	LDI  R26,LOW(10)
00010d e0b0      	LDI  R27,0
00010e d039      	RCALL _delay_ms
                 ; 0000 0125 }
00010f 9109      	LD   R16,Y+
000110 9119      	LD   R17,Y+
000111 9508      	RET
                 ; .FEND
                 ;
                 ;void main(void)
                 ; 0000 0128 {
                 _main:
                 ; .FSTART _main
                 ; 0000 0129     // Declare your local variables here
                 ; 0000 012A 
                 ; 0000 012B     // Crystal Oscillator division factor: 1
                 ; 0000 012C     #pragma optsize-
                 ; 0000 012D     CLKPR=(1<<CLKPCE);
000112 e8e0      	LDI  R30,LOW(128)
000113 bde6      	OUT  0x26,R30
                 ; 0000 012E     CLKPR=(0<<CLKPCE) | (0<<CLKPS3) | (0<<CLKPS2) | (0<<CLKPS1) | (0<<CLKPS0);
000114 e0e0      	LDI  R30,LOW(0)
000115 bde6      	OUT  0x26,R30
                 ; 0000 012F     #ifdef _OPTIMIZE_SIZE_
                 ; 0000 0130     #pragma optsize+
                 ; 0000 0131     #endif
                 ; 0000 0132 
                 ; 0000 0133     // Input/Output Ports initialization
                 ; 0000 0134     // Port A initialization
                 ; 0000 0135     // Function: Bit7=Out Bit6=Out Bit5=In Bit4=In Bit3=In Bit2=In Bit1=In Bit0=In
                 ; 0000 0136     DDRA=(1<<DDA7) | (1<<DDA6) | (0<<DDA5) | (0<<DDA4) | (0<<DDA3) | (0<<DDA2) | (0<<DDA1) | (0<<DDA0);
000116 ece0      	LDI  R30,LOW(192)
000117 bbea      	OUT  0x1A,R30
                 ; 0000 0137     // State: Bit7=0 Bit6=0 Bit5=T Bit4=T Bit3=T Bit2=T Bit1=T Bit0=T
                 ; 0000 0138     PORTA=(0<<PORTA7) | (0<<PORTA6) | (0<<PORTA5) | (0<<PORTA4) | (0<<PORTA3) | (0<<PORTA2) | (0<<PORTA1) | (0<<PORTA0);
000118 e0e0      	LDI  R30,LOW(0)
000119 bbeb      	OUT  0x1B,R30
                 ; 0000 0139 
                 ; 0000 013A     // Port B initialization
                 ; 0000 013B     // Function: Bit3=In Bit2=Out Bit1=In Bit0=In
                 ; 0000 013C     DDRB=(0<<DDB3) | (1<<DDB2) | (0<<DDB1) | (0<<DDB0);
00011a e0e4      	LDI  R30,LOW(4)
00011b bbe7      	OUT  0x17,R30
                 ; 0000 013D     // State: Bit3=T Bit2=0 Bit1=T Bit0=T
                 ; 0000 013E     PORTB=(0<<PORTB3) | (0<<PORTB2) | (0<<PORTB1) | (0<<PORTB0);
00011c e0e0      	LDI  R30,LOW(0)
00011d bbe8      	OUT  0x18,R30
                 ; 0000 013F 
                 ; 0000 0140     // Timer/Counter 0 initialization
                 ; 0000 0141     // Clock source: System Clock
                 ; 0000 0142     // Clock value: Timer 0 Stopped
                 ; 0000 0143     // Mode: Normal top=0xFF
                 ; 0000 0144     // OC0A output: Disconnected
                 ; 0000 0145     // OC0B output: Disconnected
                 ; 0000 0146     TCCR0A=(0<<COM0A1) | (0<<COM0A0) | (0<<COM0B1) | (0<<COM0B0) | (0<<WGM01) | (0<<WGM00);
00011e bfe0      	OUT  0x30,R30
                 ; 0000 0147     TCCR0B=(0<<WGM02) | (0<<CS02) | (0<<CS01) | (0<<CS00);
00011f bfe3      	OUT  0x33,R30
                 ; 0000 0148     TCNT0=0x00;
000120 bfe2      	OUT  0x32,R30
                 ; 0000 0149     OCR0A=0x00;
000121 bfe6      	OUT  0x36,R30
                 ; 0000 014A     OCR0B=0x00;
000122 bfec      	OUT  0x3C,R30
                 ; 0000 014B 
                 ; 0000 014C     // Timer/Counter 1 initialization
                 ; 0000 014D     // Clock source: System Clock
                 ; 0000 014E     // Clock value: Timer1 Stopped
                 ; 0000 014F     // Mode: Normal top=0xFFFF
                 ; 0000 0150     // OC1A output: Disconnected
                 ; 0000 0151     // OC1B output: Disconnected
                 ; 0000 0152     // Noise Canceler: Off
                 ; 0000 0153     // Input Capture on Falling Edge
                 ; 0000 0154     // Timer1 Overflow Interrupt: Off
                 ; 0000 0155     // Input Capture Interrupt: Off
                 ; 0000 0156     // Compare A Match Interrupt: Off
                 ; 0000 0157     // Compare B Match Interrupt: Off
                 ; 0000 0158     TCCR1A=(0<<COM1A1) | (0<<COM1A0) | (0<<COM1B1) | (0<<COM1B0) | (0<<WGM11) | (0<<WGM10);
000123 bdef      	OUT  0x2F,R30
                 ; 0000 0159     TCCR1B=(0<<ICNC1) | (0<<ICES1) | (0<<WGM13) | (0<<WGM12) | (0<<CS12) | (0<<CS11) | (0<<CS10);
000124 bdee      	OUT  0x2E,R30
                 ; 0000 015A     TCNT1H=0x00;
000125 bded      	OUT  0x2D,R30
                 ; 0000 015B     TCNT1L=0x00;
000126 bdec      	OUT  0x2C,R30
                 ; 0000 015C     ICR1H=0x00;
000127 bde5      	OUT  0x25,R30
                 ; 0000 015D     ICR1L=0x00;
000128 bde4      	OUT  0x24,R30
                 ; 0000 015E     OCR1AH=0x00;
000129 bdeb      	OUT  0x2B,R30
                 ; 0000 015F     OCR1AL=0x00;
00012a bdea      	OUT  0x2A,R30
                 ; 0000 0160     OCR1BH=0x00;
00012b bde9      	OUT  0x29,R30
                 ; 0000 0161     OCR1BL=0x00;
00012c bde8      	OUT  0x28,R30
                 ; 0000 0162 
                 ; 0000 0163     // Timer/Counter 0 Interrupt(s) initialization
                 ; 0000 0164     TIMSK0=(0<<OCIE0B) | (0<<OCIE0A) | (0<<TOIE0);
00012d bfe9      	OUT  0x39,R30
                 ; 0000 0165 
                 ; 0000 0166     // Timer/Counter 1 Interrupt(s) initialization
                 ; 0000 0167     TIMSK1=(0<<ICIE1) | (0<<OCIE1B) | (0<<OCIE1A) | (0<<TOIE1);
00012e b9ec      	OUT  0xC,R30
                 ; 0000 0168 
                 ; 0000 0169     // External Interrupt(s) initialization
                 ; 0000 016A     // INT0: Off
                 ; 0000 016B     // Interrupt on any change on pins PCINT0-7: Off
                 ; 0000 016C     // Interrupt on any change on pins PCINT8-11: Off
                 ; 0000 016D     MCUCR=(0<<ISC01) | (0<<ISC00);
00012f bfe5      	OUT  0x35,R30
                 ; 0000 016E     GIMSK=(0<<INT0) | (0<<PCIE1) | (0<<PCIE0);
000130 bfeb      	OUT  0x3B,R30
                 ; 0000 016F 
                 ; 0000 0170     // USI initialization
                 ; 0000 0171     // Mode: Disabled
                 ; 0000 0172     // Clock source: Register & Counter=no clk.
                 ; 0000 0173     // USI Counter Overflow Interrupt: Off
                 ; 0000 0174     USICR=(0<<USISIE) | (0<<USIOIE) | (0<<USIWM1) | (0<<USIWM0) | (0<<USICS1) | (0<<USICS0) | (0<<USICLK) | (0<<USITC);
000131 b9ed      	OUT  0xD,R30
                 ; 0000 0175 
                 ; 0000 0176     // Analog Comparator initialization
                 ; 0000 0177     // Analog Comparator: Off
                 ; 0000 0178     // The Analog Comparator's positive input is
                 ; 0000 0179     // connected to the AIN0 pin
                 ; 0000 017A     // The Analog Comparator's negative input is
                 ; 0000 017B     // connected to the AIN1 pin
                 ; 0000 017C     ACSR=(1<<ACD) | (0<<ACBG) | (0<<ACO) | (0<<ACI) | (0<<ACIE) | (0<<ACIC) | (0<<ACIS1) | (0<<ACIS0);
000132 e8e0      	LDI  R30,LOW(128)
000133 b9e8      	OUT  0x8,R30
                 ; 0000 017D     // Digital input buffer on AIN0: On
                 ; 0000 017E     // Digital input buffer on AIN1: On
                 ; 0000 017F     DIDR0=(0<<ADC1D) | (0<<ADC2D);
000134 e0e0      	LDI  R30,LOW(0)
000135 b9e1      	OUT  0x1,R30
                 ; 0000 0180 
                 ; 0000 0181     // ADC initialization
                 ; 0000 0182     // ADC Clock frequency: 1000.000 kHz
                 ; 0000 0183     // ADC Voltage Reference: AVCC pin
                 ; 0000 0184     // ADC Bipolar Input Mode: Off
                 ; 0000 0185     // ADC Auto Trigger Source: ADC Stopped
                 ; 0000 0186     // Digital input buffers on ADC0: On, ADC1: On, ADC2: On, ADC3: On
                 ; 0000 0187     // ADC4: On, ADC5: On, ADC6: On, ADC7: On
                 ; 0000 0188     DIDR0=(0<<ADC7D) | (0<<ADC6D) | (0<<ADC5D) | (0<<ADC4D) | (0<<ADC3D) | (0<<ADC2D) | (0<<ADC1D) | (0<<ADC0D);
000136 b9e1      	OUT  0x1,R30
                 ; 0000 0189     ADMUX=ADC_VREF_TYPE;
000137 b9e7      	OUT  0x7,R30
                 ; 0000 018A     ADCSRA=(1<<ADEN) | (0<<ADSC) | (0<<ADATE) | (0<<ADIF) | (0<<ADIE) | (0<<ADPS2) | (1<<ADPS1) | (1<<ADPS0);
000138 e8e3      	LDI  R30,LOW(131)
000139 b9e6      	OUT  0x6,R30
                 ; 0000 018B     ADCSRB=(0<<BIN) | (0<<ADLAR) | (0<<ADTS2) | (0<<ADTS1) | (0<<ADTS0);
00013a e0e0      	LDI  R30,LOW(0)
00013b b9e3      	OUT  0x3,R30
                 ; 0000 018C 
                 ; 0000 018D     Init();
00013c df10      	RCALL _Init
                 ; 0000 018E     while (1)
                 _0x59:
                 ; 0000 018F     {
                 ; 0000 0190     // Place your code here
                 ; 0000 0191         Protect();
00013d df26      	RCALL _Protect
                 ; 0000 0192     }
00013e cffe      	RJMP _0x59
                 ; 0000 0193 }
                 _0x5C:
00013f cfff      	RJMP _0x5C
                 ; .FEND
                 
                 	.CSEG
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 5 TIMES, CODE SIZE REDUCTION:2 WORDS
                 SUBOPT_0x0:
000140 defd      	RCALL _read_adc
000141 018f      	MOVW R16,R30
000142 9508      	RET
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 2 TIMES, CODE SIZE REDUCTION:1 WORDS
                 SUBOPT_0x1:
000143 efe4      	LDI  R30,LOW(500)
000144 e0f1      	LDI  R31,HIGH(500)
000145 16ce      	CP   R12,R30
000146 06df      	CPC  R13,R31
000147 9508      	RET
                 
                 
                 	.CSEG
                 _delay_ms:
000148 9610      	adiw r26,0
000149 f039      	breq __delay_ms1
                 __delay_ms0:
                +
00014a ed80     +LDI R24 , LOW ( 0x7D0 )
00014b e097     +LDI R25 , HIGH ( 0x7D0 )
                +__DELAY_USW_LOOP :
00014c 9701     +SBIW R24 , 1
00014d f7f1     +BRNE __DELAY_USW_LOOP
                 	__DELAY_USW 0x7D0
00014e 95a8      	wdr
00014f 9711      	sbiw r26,1
000150 f7c9      	brne __delay_ms0
                 __delay_ms1:
000151 9508      	ret
                 
                 __DIVW21U:
000152 2400      	CLR  R0
000153 2411      	CLR  R1
000154 e190      	LDI  R25,16
                 __DIVW21U1:
000155 0faa      	LSL  R26
000156 1fbb      	ROL  R27
000157 1c00      	ROL  R0
000158 1c11      	ROL  R1
000159 1a0e      	SUB  R0,R30
00015a 0a1f      	SBC  R1,R31
00015b f418      	BRCC __DIVW21U2
00015c 0e0e      	ADD  R0,R30
00015d 1e1f      	ADC  R1,R31
00015e c001      	RJMP __DIVW21U3
                 __DIVW21U2:
00015f 60a1      	SBR  R26,1
                 __DIVW21U3:
000160 959a      	DEC  R25
000161 f799      	BRNE __DIVW21U1
000162 01fd      	MOVW R30,R26
000163 01d0      	MOVW R26,R0
000164 9508      	RET
                 
                 __MODW21U:
000165 dfec      	RCALL __DIVW21U
000166 01fd      	MOVW R30,R26
000167 9508      	RET
                 
                 __SAVELOCR2:
000168 931a      	ST   -Y,R17
000169 930a      	ST   -Y,R16
00016a 9508      	RET
                 
                 ;END OF CODE MARKER
                 __END_OF_CODE:


RESOURCE USE INFORMATION
------------------------

Notice:
The register and instruction counts are symbol table hit counts,
and hence implicitly used resources are not counted, eg, the
'lpm' instruction without operands implicitly uses r0 and z,
none of which are counted.

x,y,z are separate entities in the symbol table and are
counted separately from r26..r31 here.

.dseg memory usage only counts static data declared with .byte

ATtiny24 register use summary:
r0 :   9 r1 :   5 r2 :   5 r3 :   5 r4 :   5 r5 :   5 r6 :   5 r7 :   5 
r8 :   5 r9 :   5 r10:   5 r11:   5 r12:   7 r13:   4 r14:   0 r15:   0 
r16:   8 r17:   7 r18:   0 r19:   0 r20:   0 r21:   0 r22:   2 r23:   0 
r24:  11 r25:   4 r26:  21 r27:   6 r28:   2 r29:   0 r30: 125 r31:   9 
x  :   3 y  :   6 z  :   7 
Registers used: 27 out of 35 (77.1%)

ATtiny24 instruction use summary:
.lds  :   0 .lds.l:   0 .sts  :   0 .sts.l:   0 adc   :   1 add   :   1 
adiw  :   3 and   :   0 andi  :   1 asr   :   0 bclr  :   0 bld   :   0 
brbc  :   0 brbs  :   0 brcc  :   1 brcs  :   0 break :   0 breq  :   2 
brge  :   0 brhc  :   0 brhs  :   0 brid  :   0 brie  :   0 brlo  :   6 
brlt  :   0 brmi  :   0 brne  :   9 brpl  :   0 brsh  :  11 brtc  :   0 
brts  :   0 brvc  :   0 brvs  :   0 bset  :   0 bst   :   0 cbi   :  17 
cbr   :   0 clc   :   0 clh   :   0 cli   :   1 cln   :   0 clr   :  27 
cls   :   0 clt   :   0 clv   :   0 clz   :   0 com   :   0 cp    :  12 
cpc   :   7 cpi   :   5 cpse  :   0 dec   :   4 des   :   0 eor   :   0 
fmul  :   0 fmuls :   0 fmulsu:   0 icall :   0 ijmp  :   0 in    :   2 
inc   :  10 ld    :   3 ldd   :   0 ldi   :  67 lds   :   0 lpm   :   7 
lsl   :   1 lsr   :   0 mov   :  10 movw  :  10 mul   :   0 muls  :   0 
mulsu :   0 neg   :   0 nop   :   0 or    :   0 ori   :   0 out   :  39 
pop   :   0 push  :   0 rcall :  17 ret   :   9 reti  :   0 rjmp  :  38 
rol   :   3 ror   :   0 sbc   :   1 sbci  :   0 sbi   :  12 sbic  :   3 
sbis  :   4 sbiw  :   5 sbr   :   1 sbrc  :   0 sbrs  :   0 sec   :   0 
seh   :   0 sei   :   0 sen   :   0 ser   :   0 ses   :   0 set   :   0 
sev   :   0 sez   :   0 sleep :   0 spm   :   0 st    :   6 std   :   0 
sts   :   0 sub   :   1 subi  :   0 swap  :   0 tst   :   0 wdr   :   1 

Instructions used: 38 out of 114 (33.3%)

ATtiny24 memory use summary [bytes]:
Segment   Begin    End      Code   Data   Used    Size   Use%
---------------------------------------------------------------
[.cseg] 0x000000 0x0002d6    716     10    726    2048  35.4%
[.dseg] 0x000060 0x000080      0      0      0     128   0.0%
[.eseg] 0x000000 0x000000      0      0      0     128   0.0%

Assembly complete, 0 errors, 12 warnings
