
AVRASM ver. 2.1.30  D:\My Data\TanPhat\DC_power_supply_fix\Debug\List\DC_Power_Supply_Protect.asm Wed Nov 28 22:59:24 2018

D:\My Data\TanPhat\DC_power_supply_fix\Debug\List\DC_Power_Supply_Protect.asm(987): warning: Register r3 already defined by the .DEF directive
D:\My Data\TanPhat\DC_power_supply_fix\Debug\List\DC_Power_Supply_Protect.asm(988): warning: Register r2 already defined by the .DEF directive
D:\My Data\TanPhat\DC_power_supply_fix\Debug\List\DC_Power_Supply_Protect.asm(989): warning: Register r5 already defined by the .DEF directive
D:\My Data\TanPhat\DC_power_supply_fix\Debug\List\DC_Power_Supply_Protect.asm(990): warning: Register r4 already defined by the .DEF directive
D:\My Data\TanPhat\DC_power_supply_fix\Debug\List\DC_Power_Supply_Protect.asm(991): warning: Register r7 already defined by the .DEF directive
D:\My Data\TanPhat\DC_power_supply_fix\Debug\List\DC_Power_Supply_Protect.asm(992): warning: Register r6 already defined by the .DEF directive
D:\My Data\TanPhat\DC_power_supply_fix\Debug\List\DC_Power_Supply_Protect.asm(993): warning: Register r9 already defined by the .DEF directive
D:\My Data\TanPhat\DC_power_supply_fix\Debug\List\DC_Power_Supply_Protect.asm(994): warning: Register r8 already defined by the .DEF directive
D:\My Data\TanPhat\DC_power_supply_fix\Debug\List\DC_Power_Supply_Protect.asm(995): warning: Register r11 already defined by the .DEF directive
D:\My Data\TanPhat\DC_power_supply_fix\Debug\List\DC_Power_Supply_Protect.asm(996): warning: Register r10 already defined by the .DEF directive
                 
                 
                 ;CodeVisionAVR C Compiler V3.12 Advanced
                 ;(C) Copyright 1998-2014 Pavel Haiduc, HP InfoTech s.r.l.
                 ;http://www.hpinfotech.com
                 
                 ;Build configuration    : Debug
                 ;Chip type              : ATtiny24
                 ;Program type           : Application
                 ;Clock frequency        : 8.000000 MHz
                 ;Memory model           : Tiny
                 ;Optimize for           : Size
                 ;(s)printf features     : int, width
                 ;(s)scanf features      : int, width
                 ;External RAM size      : 0
                 ;Data Stack size        : 32 byte(s)
                 ;Heap size              : 0 byte(s)
                 ;Promote 'char' to 'int': Yes
                 ;'char' is unsigned     : Yes
                 ;8 bit enums            : Yes
                 ;Global 'const' stored in FLASH: Yes
                 ;Enhanced function parameter passing: Yes
                 ;Enhanced core instructions: On
                 ;Automatic register allocation for global variables: On
                 ;Smart register allocation: On
                 
                 	#define _MODEL_TINY_
                 
                 	#pragma AVRPART ADMIN PART_NAME ATtiny24
                 	#pragma AVRPART MEMORY PROG_FLASH 2048
                 	#pragma AVRPART MEMORY EEPROM 128
                 	#pragma AVRPART MEMORY INT_SRAM SIZE 128
                 	#pragma AVRPART MEMORY INT_SRAM START_ADDR 0x60
                 
                 	.LISTMAC
                 	.EQU EERE=0x0
                 	.EQU EEWE=0x1
                 	.EQU EEMWE=0x2
                 	.EQU EECR=0x1C
                 	.EQU EEDR=0x1D
                 	.EQU EEARL=0x1E
                 
                 	.EQU WDTCSR=0x21
                 	.EQU MCUSR=0x34
                 	.EQU MCUCR=0x35
                 	.EQU SPL=0x3D
                 	.EQU SREG=0x3F
                 	.EQU GPIOR0=0x13
                 	.EQU GPIOR1=0x14
                 	.EQU GPIOR2=0x15
                 
                 	.DEF R0X0=R0
                 	.DEF R0X1=R1
                 	.DEF R0X2=R2
                 	.DEF R0X3=R3
                 	.DEF R0X4=R4
                 	.DEF R0X5=R5
                 	.DEF R0X6=R6
                 	.DEF R0X7=R7
                 	.DEF R0X8=R8
                 	.DEF R0X9=R9
                 	.DEF R0XA=R10
                 	.DEF R0XB=R11
                 	.DEF R0XC=R12
                 	.DEF R0XD=R13
                 	.DEF R0XE=R14
                 	.DEF R0XF=R15
                 	.DEF R0X10=R16
                 	.DEF R0X11=R17
                 	.DEF R0X12=R18
                 	.DEF R0X13=R19
                 	.DEF R0X14=R20
                 	.DEF R0X15=R21
                 	.DEF R0X16=R22
                 	.DEF R0X17=R23
                 	.DEF R0X18=R24
                 	.DEF R0X19=R25
                 	.DEF R0X1A=R26
                 	.DEF R0X1B=R27
                 	.DEF R0X1C=R28
                 	.DEF R0X1D=R29
                 	.DEF R0X1E=R30
                 	.DEF R0X1F=R31
                 
                 	.EQU __SRAM_START=0x0060
                 	.EQU __SRAM_END=0x00DF
                 	.EQU __DSTACK_SIZE=0x0020
                 	.EQU __HEAP_SIZE=0x0000
                 	.EQU __CLEAR_SRAM_SIZE=__SRAM_END-__SRAM_START+1
                 
                 	.MACRO __CPD1N
                 	CPI  R30,LOW(@0)
                 	LDI  R26,HIGH(@0)
                 	CPC  R31,R26
                 	LDI  R26,BYTE3(@0)
                 	CPC  R22,R26
                 	LDI  R26,BYTE4(@0)
                 	CPC  R23,R26
                 	.ENDM
                 
                 	.MACRO __CPD2N
                 	CPI  R26,LOW(@0)
                 	LDI  R30,HIGH(@0)
                 	CPC  R27,R30
                 	LDI  R30,BYTE3(@0)
                 	CPC  R24,R30
                 	LDI  R30,BYTE4(@0)
                 	CPC  R25,R30
                 	.ENDM
                 
                 	.MACRO __CPWRR
                 	CP   R@0,R@2
                 	CPC  R@1,R@3
                 	.ENDM
                 
                 	.MACRO __CPWRN
                 	CPI  R@0,LOW(@2)
                 	LDI  R30,HIGH(@2)
                 	CPC  R@1,R30
                 	.ENDM
                 
                 	.MACRO __ADDB1MN
                 	SUBI R30,LOW(-@0-(@1))
                 	.ENDM
                 
                 	.MACRO __ADDB2MN
                 	SUBI R26,LOW(-@0-(@1))
                 	.ENDM
                 
                 	.MACRO __ADDW1MN
                 	SUBI R30,LOW(-@0-(@1))
                 	SBCI R31,HIGH(-@0-(@1))
                 	.ENDM
                 
                 	.MACRO __ADDW2MN
                 	SUBI R26,LOW(-@0-(@1))
                 	SBCI R27,HIGH(-@0-(@1))
                 	.ENDM
                 
                 	.MACRO __ADDW1FN
                 	SUBI R30,LOW(-2*@0-(@1))
                 	SBCI R31,HIGH(-2*@0-(@1))
                 	.ENDM
                 
                 	.MACRO __ADDD1FN
                 	SUBI R30,LOW(-2*@0-(@1))
                 	SBCI R31,HIGH(-2*@0-(@1))
                 	SBCI R22,BYTE3(-2*@0-(@1))
                 	.ENDM
                 
                 	.MACRO __ADDD1N
                 	SUBI R30,LOW(-@0)
                 	SBCI R31,HIGH(-@0)
                 	SBCI R22,BYTE3(-@0)
                 	SBCI R23,BYTE4(-@0)
                 	.ENDM
                 
                 	.MACRO __ADDD2N
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	SBCI R24,BYTE3(-@0)
                 	SBCI R25,BYTE4(-@0)
                 	.ENDM
                 
                 	.MACRO __SUBD1N
                 	SUBI R30,LOW(@0)
                 	SBCI R31,HIGH(@0)
                 	SBCI R22,BYTE3(@0)
                 	SBCI R23,BYTE4(@0)
                 	.ENDM
                 
                 	.MACRO __SUBD2N
                 	SUBI R26,LOW(@0)
                 	SBCI R27,HIGH(@0)
                 	SBCI R24,BYTE3(@0)
                 	SBCI R25,BYTE4(@0)
                 	.ENDM
                 
                 	.MACRO __ANDBMNN
                 	LDS  R30,@0+(@1)
                 	ANDI R30,LOW(@2)
                 	STS  @0+(@1),R30
                 	.ENDM
                 
                 	.MACRO __ANDWMNN
                 	LDS  R30,@0+(@1)
                 	ANDI R30,LOW(@2)
                 	STS  @0+(@1),R30
                 	LDS  R30,@0+(@1)+1
                 	ANDI R30,HIGH(@2)
                 	STS  @0+(@1)+1,R30
                 	.ENDM
                 
                 	.MACRO __ANDD1N
                 	ANDI R30,LOW(@0)
                 	ANDI R31,HIGH(@0)
                 	ANDI R22,BYTE3(@0)
                 	ANDI R23,BYTE4(@0)
                 	.ENDM
                 
                 	.MACRO __ANDD2N
                 	ANDI R26,LOW(@0)
                 	ANDI R27,HIGH(@0)
                 	ANDI R24,BYTE3(@0)
                 	ANDI R25,BYTE4(@0)
                 	.ENDM
                 
                 	.MACRO __ORBMNN
                 	LDS  R30,@0+(@1)
                 	ORI  R30,LOW(@2)
                 	STS  @0+(@1),R30
                 	.ENDM
                 
                 	.MACRO __ORWMNN
                 	LDS  R30,@0+(@1)
                 	ORI  R30,LOW(@2)
                 	STS  @0+(@1),R30
                 	LDS  R30,@0+(@1)+1
                 	ORI  R30,HIGH(@2)
                 	STS  @0+(@1)+1,R30
                 	.ENDM
                 
                 	.MACRO __ORD1N
                 	ORI  R30,LOW(@0)
                 	ORI  R31,HIGH(@0)
                 	ORI  R22,BYTE3(@0)
                 	ORI  R23,BYTE4(@0)
                 	.ENDM
                 
                 	.MACRO __ORD2N
                 	ORI  R26,LOW(@0)
                 	ORI  R27,HIGH(@0)
                 	ORI  R24,BYTE3(@0)
                 	ORI  R25,BYTE4(@0)
                 	.ENDM
                 
                 	.MACRO __DELAY_USB
                 	LDI  R24,LOW(@0)
                 __DELAY_USB_LOOP:
                 	DEC  R24
                 	BRNE __DELAY_USB_LOOP
                 	.ENDM
                 
                 	.MACRO __DELAY_USW
                 	LDI  R24,LOW(@0)
                 	LDI  R25,HIGH(@0)
                 __DELAY_USW_LOOP:
                 	SBIW R24,1
                 	BRNE __DELAY_USW_LOOP
                 	.ENDM
                 
                 	.MACRO __GETD1S
                 	LDD  R30,Y+@0
                 	LDD  R31,Y+@0+1
                 	LDD  R22,Y+@0+2
                 	LDD  R23,Y+@0+3
                 	.ENDM
                 
                 	.MACRO __GETD2S
                 	LDD  R26,Y+@0
                 	LDD  R27,Y+@0+1
                 	LDD  R24,Y+@0+2
                 	LDD  R25,Y+@0+3
                 	.ENDM
                 
                 	.MACRO __PUTD1S
                 	STD  Y+@0,R30
                 	STD  Y+@0+1,R31
                 	STD  Y+@0+2,R22
                 	STD  Y+@0+3,R23
                 	.ENDM
                 
                 	.MACRO __PUTD2S
                 	STD  Y+@0,R26
                 	STD  Y+@0+1,R27
                 	STD  Y+@0+2,R24
                 	STD  Y+@0+3,R25
                 	.ENDM
                 
                 	.MACRO __PUTDZ2
                 	STD  Z+@0,R26
                 	STD  Z+@0+1,R27
                 	STD  Z+@0+2,R24
                 	STD  Z+@0+3,R25
                 	.ENDM
                 
                 	.MACRO __CLRD1S
                 	STD  Y+@0,R30
                 	STD  Y+@0+1,R30
                 	STD  Y+@0+2,R30
                 	STD  Y+@0+3,R30
                 	.ENDM
                 
                 	.MACRO __POINTB1MN
                 	LDI  R30,LOW(@0+(@1))
                 	.ENDM
                 
                 	.MACRO __POINTW1MN
                 	LDI  R30,LOW(@0+(@1))
                 	LDI  R31,HIGH(@0+(@1))
                 	.ENDM
                 
                 	.MACRO __POINTD1M
                 	LDI  R30,LOW(@0)
                 	LDI  R31,HIGH(@0)
                 	LDI  R22,BYTE3(@0)
                 	LDI  R23,BYTE4(@0)
                 	.ENDM
                 
                 	.MACRO __POINTW1FN
                 	LDI  R30,LOW(2*@0+(@1))
                 	LDI  R31,HIGH(2*@0+(@1))
                 	.ENDM
                 
                 	.MACRO __POINTD1FN
                 	LDI  R30,LOW(2*@0+(@1))
                 	LDI  R31,HIGH(2*@0+(@1))
                 	LDI  R22,BYTE3(2*@0+(@1))
                 	LDI  R23,BYTE4(2*@0+(@1))
                 	.ENDM
                 
                 	.MACRO __POINTB2MN
                 	LDI  R26,LOW(@0+(@1))
                 	.ENDM
                 
                 	.MACRO __POINTW2MN
                 	LDI  R26,LOW(@0+(@1))
                 	LDI  R27,HIGH(@0+(@1))
                 	.ENDM
                 
                 	.MACRO __POINTW2FN
                 	LDI  R26,LOW(2*@0+(@1))
                 	LDI  R27,HIGH(2*@0+(@1))
                 	.ENDM
                 
                 	.MACRO __POINTD2FN
                 	LDI  R26,LOW(2*@0+(@1))
                 	LDI  R27,HIGH(2*@0+(@1))
                 	LDI  R24,BYTE3(2*@0+(@1))
                 	LDI  R25,BYTE4(2*@0+(@1))
                 	.ENDM
                 
                 	.MACRO __POINTBRM
                 	LDI  R@0,LOW(@1)
                 	.ENDM
                 
                 	.MACRO __POINTWRM
                 	LDI  R@0,LOW(@2)
                 	LDI  R@1,HIGH(@2)
                 	.ENDM
                 
                 	.MACRO __POINTBRMN
                 	LDI  R@0,LOW(@1+(@2))
                 	.ENDM
                 
                 	.MACRO __POINTWRMN
                 	LDI  R@0,LOW(@2+(@3))
                 	LDI  R@1,HIGH(@2+(@3))
                 	.ENDM
                 
                 	.MACRO __POINTWRFN
                 	LDI  R@0,LOW(@2*2+(@3))
                 	LDI  R@1,HIGH(@2*2+(@3))
                 	.ENDM
                 
                 	.MACRO __GETD1N
                 	LDI  R30,LOW(@0)
                 	LDI  R31,HIGH(@0)
                 	LDI  R22,BYTE3(@0)
                 	LDI  R23,BYTE4(@0)
                 	.ENDM
                 
                 	.MACRO __GETD2N
                 	LDI  R26,LOW(@0)
                 	LDI  R27,HIGH(@0)
                 	LDI  R24,BYTE3(@0)
                 	LDI  R25,BYTE4(@0)
                 	.ENDM
                 
                 	.MACRO __GETB1MN
                 	LDS  R30,@0+(@1)
                 	.ENDM
                 
                 	.MACRO __GETB1HMN
                 	LDS  R31,@0+(@1)
                 	.ENDM
                 
                 	.MACRO __GETW1MN
                 	LDS  R30,@0+(@1)
                 	LDS  R31,@0+(@1)+1
                 	.ENDM
                 
                 	.MACRO __GETD1MN
                 	LDS  R30,@0+(@1)
                 	LDS  R31,@0+(@1)+1
                 	LDS  R22,@0+(@1)+2
                 	LDS  R23,@0+(@1)+3
                 	.ENDM
                 
                 	.MACRO __GETBRMN
                 	LDS  R@0,@1+(@2)
                 	.ENDM
                 
                 	.MACRO __GETWRMN
                 	LDS  R@0,@2+(@3)
                 	LDS  R@1,@2+(@3)+1
                 	.ENDM
                 
                 	.MACRO __GETWRZ
                 	LDD  R@0,Z+@2
                 	LDD  R@1,Z+@2+1
                 	.ENDM
                 
                 	.MACRO __GETD2Z
                 	LDD  R26,Z+@0
                 	LDD  R27,Z+@0+1
                 	LDD  R24,Z+@0+2
                 	LDD  R25,Z+@0+3
                 	.ENDM
                 
                 	.MACRO __GETB2MN
                 	LDS  R26,@0+(@1)
                 	.ENDM
                 
                 	.MACRO __GETW2MN
                 	LDS  R26,@0+(@1)
                 	LDS  R27,@0+(@1)+1
                 	.ENDM
                 
                 	.MACRO __GETD2MN
                 	LDS  R26,@0+(@1)
                 	LDS  R27,@0+(@1)+1
                 	LDS  R24,@0+(@1)+2
                 	LDS  R25,@0+(@1)+3
                 	.ENDM
                 
                 	.MACRO __PUTB1MN
                 	STS  @0+(@1),R30
                 	.ENDM
                 
                 	.MACRO __PUTW1MN
                 	STS  @0+(@1),R30
                 	STS  @0+(@1)+1,R31
                 	.ENDM
                 
                 	.MACRO __PUTD1MN
                 	STS  @0+(@1),R30
                 	STS  @0+(@1)+1,R31
                 	STS  @0+(@1)+2,R22
                 	STS  @0+(@1)+3,R23
                 	.ENDM
                 
                 	.MACRO __PUTB1EN
                 	LDI  R26,LOW(@0+(@1))
                 	LDI  R27,HIGH(@0+(@1))
                 	RCALL __EEPROMWRB
                 	.ENDM
                 
                 	.MACRO __PUTW1EN
                 	LDI  R26,LOW(@0+(@1))
                 	LDI  R27,HIGH(@0+(@1))
                 	RCALL __EEPROMWRW
                 	.ENDM
                 
                 	.MACRO __PUTD1EN
                 	LDI  R26,LOW(@0+(@1))
                 	LDI  R27,HIGH(@0+(@1))
                 	RCALL __EEPROMWRD
                 	.ENDM
                 
                 	.MACRO __PUTBR0MN
                 	STS  @0+(@1),R0
                 	.ENDM
                 
                 	.MACRO __PUTBMRN
                 	STS  @0+(@1),R@2
                 	.ENDM
                 
                 	.MACRO __PUTWMRN
                 	STS  @0+(@1),R@2
                 	STS  @0+(@1)+1,R@3
                 	.ENDM
                 
                 	.MACRO __PUTBZR
                 	STD  Z+@1,R@0
                 	.ENDM
                 
                 	.MACRO __PUTWZR
                 	STD  Z+@2,R@0
                 	STD  Z+@2+1,R@1
                 	.ENDM
                 
                 	.MACRO __GETW1R
                 	MOV  R30,R@0
                 	MOV  R31,R@1
                 	.ENDM
                 
                 	.MACRO __GETW2R
                 	MOV  R26,R@0
                 	MOV  R27,R@1
                 	.ENDM
                 
                 	.MACRO __GETWRN
                 	LDI  R@0,LOW(@2)
                 	LDI  R@1,HIGH(@2)
                 	.ENDM
                 
                 	.MACRO __PUTW1R
                 	MOV  R@0,R30
                 	MOV  R@1,R31
                 	.ENDM
                 
                 	.MACRO __PUTW2R
                 	MOV  R@0,R26
                 	MOV  R@1,R27
                 	.ENDM
                 
                 	.MACRO __ADDWRN
                 	SUBI R@0,LOW(-@2)
                 	SBCI R@1,HIGH(-@2)
                 	.ENDM
                 
                 	.MACRO __ADDWRR
                 	ADD  R@0,R@2
                 	ADC  R@1,R@3
                 	.ENDM
                 
                 	.MACRO __SUBWRN
                 	SUBI R@0,LOW(@2)
                 	SBCI R@1,HIGH(@2)
                 	.ENDM
                 
                 	.MACRO __SUBWRR
                 	SUB  R@0,R@2
                 	SBC  R@1,R@3
                 	.ENDM
                 
                 	.MACRO __ANDWRN
                 	ANDI R@0,LOW(@2)
                 	ANDI R@1,HIGH(@2)
                 	.ENDM
                 
                 	.MACRO __ANDWRR
                 	AND  R@0,R@2
                 	AND  R@1,R@3
                 	.ENDM
                 
                 	.MACRO __ORWRN
                 	ORI  R@0,LOW(@2)
                 	ORI  R@1,HIGH(@2)
                 	.ENDM
                 
                 	.MACRO __ORWRR
                 	OR   R@0,R@2
                 	OR   R@1,R@3
                 	.ENDM
                 
                 	.MACRO __EORWRR
                 	EOR  R@0,R@2
                 	EOR  R@1,R@3
                 	.ENDM
                 
                 	.MACRO __GETWRS
                 	LDD  R@0,Y+@2
                 	LDD  R@1,Y+@2+1
                 	.ENDM
                 
                 	.MACRO __PUTBSR
                 	STD  Y+@1,R@0
                 	.ENDM
                 
                 	.MACRO __PUTWSR
                 	STD  Y+@2,R@0
                 	STD  Y+@2+1,R@1
                 	.ENDM
                 
                 	.MACRO __MOVEWRR
                 	MOV  R@0,R@2
                 	MOV  R@1,R@3
                 	.ENDM
                 
                 	.MACRO __INWR
                 	IN   R@0,@2
                 	IN   R@1,@2+1
                 	.ENDM
                 
                 	.MACRO __OUTWR
                 	OUT  @2+1,R@1
                 	OUT  @2,R@0
                 	.ENDM
                 
                 	.MACRO __CALL1MN
                 	LDS  R30,@0+(@1)
                 	LDS  R31,@0+(@1)+1
                 	ICALL
                 	.ENDM
                 
                 	.MACRO __CALL1FN
                 	LDI  R30,LOW(2*@0+(@1))
                 	LDI  R31,HIGH(2*@0+(@1))
                 	RCALL __GETW1PF
                 	ICALL
                 	.ENDM
                 
                 	.MACRO __CALL2EN
                 	PUSH R26
                 	PUSH R27
                 	LDI  R26,LOW(@0+(@1))
                 	LDI  R27,HIGH(@0+(@1))
                 	RCALL __EEPROMRDW
                 	POP  R27
                 	POP  R26
                 	ICALL
                 	.ENDM
                 
                 	.MACRO __CALL2EX
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	RCALL __EEPROMRDD
                 	ICALL
                 	.ENDM
                 
                 	.MACRO __GETW1STACK
                 	IN   R30,SPL
                 	IN   R31,SPH
                 	ADIW R30,@0+1
                 	LD   R0,Z+
                 	LD   R31,Z
                 	MOV  R30,R0
                 	.ENDM
                 
                 	.MACRO __GETD1STACK
                 	IN   R30,SPL
                 	IN   R31,SPH
                 	ADIW R30,@0+1
                 	LD   R0,Z+
                 	LD   R1,Z+
                 	LD   R22,Z
                 	MOVW R30,R0
                 	.ENDM
                 
                 	.MACRO __NBST
                 	BST  R@0,@1
                 	IN   R30,SREG
                 	LDI  R31,0x40
                 	EOR  R30,R31
                 	OUT  SREG,R30
                 	.ENDM
                 
                 
                 	.MACRO __PUTB1SN
                 	LDD  R26,Y+@0
                 	SUBI R26,-@1
                 	ST   X,R30
                 	.ENDM
                 
                 	.MACRO __PUTW1SN
                 	LDD  R26,Y+@0
                 	SUBI R26,-@1
                 	ST   X+,R30
                 	ST   X,R31
                 	.ENDM
                 
                 	.MACRO __PUTD1SN
                 	LDD  R26,Y+@0
                 	SUBI R26,-@1
                 	RCALL __PUTDP1
                 	.ENDM
                 
                 	.MACRO __PUTB1SNS
                 	LDD  R26,Y+@0
                 	SUBI R26,-@1
                 	ST   X,R30
                 	.ENDM
                 
                 	.MACRO __PUTW1SNS
                 	LDD  R26,Y+@0
                 	SUBI R26,-@1
                 	ST   X+,R30
                 	ST   X,R31
                 	.ENDM
                 
                 	.MACRO __PUTD1SNS
                 	LDD  R26,Y+@0
                 	SUBI R26,-@1
                 	RCALL __PUTDP1
                 	.ENDM
                 
                 	.MACRO __PUTB1RN
                 	MOV  R26,R@0
                 	SUBI R26,-@1
                 	ST   X,R30
                 	.ENDM
                 
                 	.MACRO __PUTW1RN
                 	MOV  R26,R@0
                 	SUBI R26,-@1
                 	ST   X+,R30
                 	ST   X,R31
                 	.ENDM
                 
                 	.MACRO __PUTD1RN
                 	MOV  R26,R@0
                 	SUBI R26,-@1
                 	RCALL __PUTDP1
                 	.ENDM
                 
                 	.MACRO __PUTB1RNS
                 	MOV  R26,R@0
                 	SUBI R26,-@1
                 	ST   X,R30
                 	.ENDM
                 
                 	.MACRO __PUTW1RNS
                 	MOV  R26,R@0
                 	SUBI R26,-@1
                 	ST   X+,R30
                 	ST   X,R31
                 	.ENDM
                 
                 	.MACRO __PUTD1RNS
                 	MOV  R26,R@0
                 	SUBI R26,-@1
                 	RCALL __PUTDP1
                 	.ENDM
                 
                 	.MACRO __PUTB1PMN
                 	LDS  R26,@0
                 	SUBI R26,-@1
                 	ST   X,R30
                 	.ENDM
                 
                 	.MACRO __PUTW1PMN
                 	LDS  R26,@0
                 	SUBI R26,-@1
                 	ST   X+,R30
                 	ST   X,R31
                 	.ENDM
                 
                 	.MACRO __PUTD1PMN
                 	LDS  R26,@0
                 	SUBI R26,-@1
                 	RCALL __PUTDP1
                 	.ENDM
                 
                 	.MACRO __PUTB1PMNS
                 	LDS  R26,@0
                 	SUBI R26,-@1
                 	ST   X,R30
                 	.ENDM
                 
                 	.MACRO __PUTW1PMNS
                 	LDS  R26,@0
                 	SUBI R26,-@1
                 	ST   X+,R30
                 	ST   X,R31
                 	.ENDM
                 
                 	.MACRO __PUTD1PMNS
                 	LDS  R26,@0
                 	SUBI R26,-@1
                 	RCALL __PUTDP1
                 	.ENDM
                 
                 	.MACRO __GETB1SX
                 	MOVW R30,R28
                 	SUBI R30,LOW(-@0)
                 	SBCI R31,HIGH(-@0)
                 	LD   R30,Z
                 	.ENDM
                 
                 	.MACRO __GETB1HSX
                 	MOVW R30,R28
                 	SUBI R30,LOW(-@0)
                 	SBCI R31,HIGH(-@0)
                 	LD   R31,Z
                 	.ENDM
                 
                 	.MACRO __GETW1SX
                 	MOVW R30,R28
                 	SUBI R30,LOW(-@0)
                 	SBCI R31,HIGH(-@0)
                 	LD   R0,Z+
                 	LD   R31,Z
                 	MOV  R30,R0
                 	.ENDM
                 
                 	.MACRO __GETD1SX
                 	MOVW R30,R28
                 	SUBI R30,LOW(-@0)
                 	SBCI R31,HIGH(-@0)
                 	LD   R0,Z+
                 	LD   R1,Z+
                 	LD   R22,Z+
                 	LD   R23,Z
                 	MOVW R30,R0
                 	.ENDM
                 
                 	.MACRO __GETB2SX
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	LD   R26,X
                 	.ENDM
                 
                 	.MACRO __GETW2SX
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	LD   R0,X+
                 	LD   R27,X
                 	MOV  R26,R0
                 	.ENDM
                 
                 	.MACRO __GETD2SX
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	LD   R0,X+
                 	LD   R1,X+
                 	LD   R24,X+
                 	LD   R25,X
                 	MOVW R26,R0
                 	.ENDM
                 
                 	.MACRO __GETBRSX
                 	MOVW R30,R28
                 	SUBI R30,LOW(-@1)
                 	SBCI R31,HIGH(-@1)
                 	LD   R@0,Z
                 	.ENDM
                 
                 	.MACRO __GETWRSX
                 	MOVW R30,R28
                 	SUBI R30,LOW(-@2)
                 	SBCI R31,HIGH(-@2)
                 	LD   R@0,Z+
                 	LD   R@1,Z
                 	.ENDM
                 
                 	.MACRO __GETBRSX2
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	LD   R@0,X
                 	.ENDM
                 
                 	.MACRO __GETWRSX2
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@2)
                 	SBCI R27,HIGH(-@2)
                 	LD   R@0,X+
                 	LD   R@1,X
                 	.ENDM
                 
                 	.MACRO __LSLW8SX
                 	MOVW R30,R28
                 	SUBI R30,LOW(-@0)
                 	SBCI R31,HIGH(-@0)
                 	LD   R31,Z
                 	CLR  R30
                 	.ENDM
                 
                 	.MACRO __PUTB1SX
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	ST   X,R30
                 	.ENDM
                 
                 	.MACRO __PUTW1SX
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	ST   X+,R30
                 	ST   X,R31
                 	.ENDM
                 
                 	.MACRO __PUTD1SX
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	ST   X+,R30
                 	ST   X+,R31
                 	ST   X+,R22
                 	ST   X,R23
                 	.ENDM
                 
                 	.MACRO __CLRW1SX
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	ST   X+,R30
                 	ST   X,R30
                 	.ENDM
                 
                 	.MACRO __CLRD1SX
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	ST   X+,R30
                 	ST   X+,R30
                 	ST   X+,R30
                 	ST   X,R30
                 	.ENDM
                 
                 	.MACRO __PUTB2SX
                 	MOVW R30,R28
                 	SUBI R30,LOW(-@0)
                 	SBCI R31,HIGH(-@0)
                 	ST   Z,R26
                 	.ENDM
                 
                 	.MACRO __PUTW2SX
                 	MOVW R30,R28
                 	SUBI R30,LOW(-@0)
                 	SBCI R31,HIGH(-@0)
                 	ST   Z+,R26
                 	ST   Z,R27
                 	.ENDM
                 
                 	.MACRO __PUTD2SX
                 	MOVW R30,R28
                 	SUBI R30,LOW(-@0)
                 	SBCI R31,HIGH(-@0)
                 	ST   Z+,R26
                 	ST   Z+,R27
                 	ST   Z+,R24
                 	ST   Z,R25
                 	.ENDM
                 
                 	.MACRO __PUTBSRX
                 	MOVW R30,R28
                 	SUBI R30,LOW(-@1)
                 	SBCI R31,HIGH(-@1)
                 	ST   Z,R@0
                 	.ENDM
                 
                 	.MACRO __PUTWSRX
                 	MOVW R30,R28
                 	SUBI R30,LOW(-@2)
                 	SBCI R31,HIGH(-@2)
                 	ST   Z+,R@0
                 	ST   Z,R@1
                 	.ENDM
                 
                 	.MACRO __PUTB1SNX
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	LD   R0,X+
                 	LD   R27,X
                 	MOV  R26,R0
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	ST   X,R30
                 	.ENDM
                 
                 	.MACRO __PUTW1SNX
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	LD   R0,X+
                 	LD   R27,X
                 	MOV  R26,R0
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	ST   X+,R30
                 	ST   X,R31
                 	.ENDM
                 
                 	.MACRO __PUTD1SNX
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	LD   R0,X+
                 	LD   R27,X
                 	MOV  R26,R0
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	ST   X+,R30
                 	ST   X+,R31
                 	ST   X+,R22
                 	ST   X,R23
                 	.ENDM
                 
                 ;NAME DEFINITIONS FOR GLOBAL VARIABLES ALLOCATED TO REGISTERS
                 	.DEF _Uc_Negative_5_over_count=R3
                 	.DEF _Uc_Negative_5_under_count=R2
                 	.DEF _Uc_Positive_5_over_count=R5
                 	.DEF _Uc_Positive_5_under_count=R4
                 	.DEF _Uc_Positive_12_over_count=R7
                 	.DEF _Uc_Positive_12_under_count=R6
                 	.DEF _Uc_Negative_12_over_count=R9
                 	.DEF _Uc_Negative_12_under_count=R8
                 	.DEF _Uc_Positive_24_over_count=R11
                 	.DEF _Uc_Positive_24_under_count=R10
                 
                 ;GPIOR0-GPIOR2 INITIALIZATION VALUES
                 	.EQU __GPIOR0_INIT=0x00
                 	.EQU __GPIOR1_INIT=0x00
                 	.EQU __GPIOR2_INIT=0x00
                 
                 	.CSEG
                 	.ORG 0x00
                 
                 ;START OF CODE MARKER
                 __START_OF_CODE:
                 
                 ;INTERRUPT VECTORS
000000 c010      	RJMP __RESET
000001 cffe      	RJMP 0x00
000002 cffd      	RJMP 0x00
000003 cffc      	RJMP 0x00
000004 cffb      	RJMP 0x00
000005 cffa      	RJMP 0x00
000006 cff9      	RJMP 0x00
000007 cff8      	RJMP 0x00
000008 cff7      	RJMP 0x00
000009 cff6      	RJMP 0x00
00000a cff5      	RJMP 0x00
00000b cff4      	RJMP 0x00
00000c cff3      	RJMP 0x00
00000d cff2      	RJMP 0x00
00000e cff1      	RJMP 0x00
00000f cff0      	RJMP 0x00
000010 cfef      	RJMP 0x00
                 
                 __RESET:
000011 94f8      	CLI
000012 27ee      	CLR  R30
000013 bbec      	OUT  EECR,R30
000014 bfe5      	OUT  MCUCR,R30
                 
                 ;CLEAR R2-R14
000015 e08d      	LDI  R24,(14-2)+1
000016 e0a2      	LDI  R26,2
                 __CLEAR_REG:
000017 93ed      	ST   X+,R30
000018 958a      	DEC  R24
000019 f7e9      	BRNE __CLEAR_REG
                 
                 ;CLEAR SRAM
00001a e880      	LDI  R24,__CLEAR_SRAM_SIZE
00001b e6a0      	LDI  R26,__SRAM_START
                 __CLEAR_SRAM:
00001c 93ed      	ST   X+,R30
00001d 958a      	DEC  R24
00001e f7e9      	BRNE __CLEAR_SRAM
                 
                 ;GPIOR0-GPIOR2 INITIALIZATION
00001f e0e0      	LDI  R30,__GPIOR0_INIT
000020 bbe3      	OUT  GPIOR0,R30
                 	;__GPIOR1_INIT = __GPIOR0_INIT
000021 bbe4      	OUT  GPIOR1,R30
                 	;__GPIOR2_INIT = __GPIOR0_INIT
000022 bbe5      	OUT  GPIOR2,R30
                 
                 ;HARDWARE STACK POINTER INITIALIZATION
000023 edef      	LDI  R30,LOW(__SRAM_END-__HEAP_SIZE)
000024 bfed      	OUT  SPL,R30
                 
                 ;DATA STACK POINTER INITIALIZATION
000025 e8c0      	LDI  R28,LOW(__SRAM_START+__DSTACK_SIZE)
                 
000026 c0a1      	RJMP _main
                 
                 	.ESEG
                 	.ORG 0
                 
                 	.DSEG
                 	.ORG 0x80
                 
                 	.CSEG
                 ;/*******************************************************
                 ;This program was created by the
                 ;CodeWizardAVR V3.12 Advanced
                 ;Automatic Program Generator
                 ;� Copyright 1998-2014 Pavel Haiduc, HP InfoTech s.r.l.
                 ;http://www.hpinfotech.com
                 ;
                 ;Project : DC_Power_Supply_Protect
                 ;Version : 1.0
                 ;Date    : 11/28/2018
                 ;Author  :
                 ;Company :
                 ;Comments:
                 ;Bao ve duong nguon DC +24V +12V -12V +5V -5V
                 ;
                 ;
                 ;Chip type               : ATtiny24
                 ;AVR Core Clock frequency: 8.000000 MHz
                 ;Memory model            : Tiny
                 ;External RAM size       : 0
                 ;Data Stack size         : 32
                 ;*******************************************************/
                 ;
                 ;#include <tiny24.h>
                 	#ifndef __SLEEP_DEFINED__
                 	#define __SLEEP_DEFINED__
                 	.EQU __se_bit=0x20
                 	.EQU __sm_mask=0x18
                 	.EQU __sm_adc_noise_red=0x08
                 	.EQU __sm_powerdown=0x10
                 	.EQU __sm_standby=0x18
                 	.SET power_ctrl_reg=mcucr
                 	#endif
                 ;#include <delay.h>
                 ;
                 ;#define ADC_Negative_5  1
                 ;#define ADC_Negative_12 4
                 ;#define ADC_Positive_5  5
                 ;#define ADC_Positive_12 3
                 ;#define ADC_Positive_24 2
                 ;
                 ;
                 ;#define ADC_Negative_5_ratio    1
                 ;#define ADC_Positive_5_ratio    1
                 ;
                 ;#define ADC_Negative_12_ratio   1
                 ;#define ADC_Positive_12_ratio   1
                 ;
                 ;#define ADC_Positive_24_ratio   1
                 ;
                 ;#define ADC_Negative_5_Set_OVER 10
                 ;#define ADC_Positive_5_Set_OVER 10
                 ;
                 ;#define ADC_Negative_12_Set_OVER    10
                 ;#define ADC_Positive_12_Set_OVER    10
                 ;
                 ;#define ADC_Positive_24_Set_OVER    10
                 ;
                 ;#define CONTROL_UNDER_24    PORTA.7
                 ;#define CONTROL_24  PORTA.6
                 ;#define BUZZER  PORTB.2
                 ;
                 ;#define CONTROL_UNDER_24_ON CONTROL_UNDER_24=0
                 ;#define CONTROL_UNDER_24_OFF CONTROL_UNDER_24=1
                 ;
                 ;#define CONTROL_24_ON   CONTROL_24=0
                 ;#define CONTROL_24_OFF  CONTROL_24=1
                 ;
                 ;#define BUZZER_ON   BUZZER = 1
                 ;#define BUZZER_OFF  BUZZER = 0
                 ;
                 ;
                 ;unsigned char  Uc_Negative_5_over_count;
                 ;unsigned char  Uc_Negative_5_under_count;
                 ;
                 ;unsigned char  Uc_Positive_5_over_count;
                 ;unsigned char  Uc_Positive_5_under_count;
                 ;
                 ;unsigned char  Uc_Positive_12_over_count;
                 ;unsigned char  Uc_Positive_12_under_count;
                 ;
                 ;unsigned char  Uc_Negative_12_over_count;
                 ;unsigned char  Uc_Negative_12_under_count;
                 ;
                 ;unsigned char  Uc_Positive_24_over_count;
                 ;unsigned char  Uc_Positive_24_under_count;
                 ;
                 ;
                 ;bit  Uc_Negative_5_warning;
                 ;bit  Uc_Positive_5_warning;
                 ;bit  Uc_Positive_12_warning;
                 ;bit  Uc_Negative_12_warning;
                 ;bit  Uc_Positive_24_warning;
                 ;// Declare your global variables here
                 ;
                 ;// Voltage Reference: AVCC pin
                 ;#define ADC_VREF_TYPE ((0<<REFS1) | (0<<REFS0))
                 ;
                 ;// Read the AD conversion result
                 ;unsigned int read_adc(unsigned char adc_input)
                 ; 0000 005C {
                 
                 	.CSEG
                 _read_adc:
                 ; .FSTART _read_adc
                 ; 0000 005D ADMUX=(adc_input & 0x3f) | ADC_VREF_TYPE;
000027 93aa      	ST   -Y,R26
                 ;	adc_input -> Y+0
000028 81e8      	LD   R30,Y
000029 73ef      	ANDI R30,LOW(0x3F)
00002a b9e7      	OUT  0x7,R30
                 ; 0000 005E // Delay needed for the stabilization of the ADC input voltage
                 ; 0000 005F delay_us(10);
                +
00002b e18b     +LDI R24 , LOW ( 27 )
                +__DELAY_USB_LOOP :
00002c 958a     +DEC R24
00002d f7f1     +BRNE __DELAY_USB_LOOP
                 	__DELAY_USB 27
                 ; 0000 0060 // Start the AD conversion
                 ; 0000 0061 ADCSRA|=(1<<ADSC);
00002e 9a36      	SBI  0x6,6
                 ; 0000 0062 // Wait for the AD conversion to complete
                 ; 0000 0063 while ((ADCSRA & (1<<ADIF))==0);
                 _0x3:
00002f 9b34      	SBIS 0x6,4
000030 cffe      	RJMP _0x3
                 ; 0000 0064 ADCSRA|=(1<<ADIF);
000031 9a34      	SBI  0x6,4
                 ; 0000 0065 return ADCW;
000032 b1e4      	IN   R30,0x4
000033 b1f5      	IN   R31,0x4+1
000034 9621      	ADIW R28,1
000035 9508      	RET
                 ; 0000 0066 }
                 ; .FEND
                 ;
                 ;void    Init(void)
                 ; 0000 0069 {
                 _Init:
                 ; .FSTART _Init
                 ; 0000 006A     Uc_Negative_5_warning = 0;
000036 9898      	CBI  0x13,0
                 ; 0000 006B     Uc_Positive_5_warning = 0;
000037 9899      	CBI  0x13,1
                 ; 0000 006C     Uc_Positive_12_warning = 0;
000038 989a      	CBI  0x13,2
                 ; 0000 006D     Uc_Negative_12_warning = 0;
000039 989b      	CBI  0x13,3
                 ; 0000 006E     Uc_Positive_24_warning = 0;
00003a 989c      	CBI  0x13,4
                 ; 0000 006F 
                 ; 0000 0070     Uc_Negative_5_over_count = 0;
00003b 2433      	CLR  R3
                 ; 0000 0071     Uc_Negative_5_under_count = 0;
00003c 2422      	CLR  R2
                 ; 0000 0072     Uc_Positive_5_over_count = 0;
00003d 2455      	CLR  R5
                 ; 0000 0073     Uc_Positive_5_under_count = 0;
00003e 2444      	CLR  R4
                 ; 0000 0074     Uc_Positive_12_over_count = 0;
00003f 2477      	CLR  R7
                 ; 0000 0075     Uc_Positive_12_under_count = 0;
000040 2466      	CLR  R6
                 ; 0000 0076     Uc_Negative_12_over_count = 0;
000041 2499      	CLR  R9
                 ; 0000 0077     Uc_Negative_12_under_count = 0;
000042 2488      	CLR  R8
                 ; 0000 0078     Uc_Positive_24_over_count = 0;
000043 24bb      	CLR  R11
                 ; 0000 0079     Uc_Positive_24_under_count = 0;
000044 24aa      	CLR  R10
                 ; 0000 007A 
                 ; 0000 007B     CONTROL_24_ON;
000045 98de      	CBI  0x1B,6
                 ; 0000 007C     CONTROL_UNDER_24_ON;
000046 98df      	CBI  0x1B,7
                 ; 0000 007D 
                 ; 0000 007E     BUZZER_ON;
000047 9ac2      	SBI  0x18,2
                 ; 0000 007F     delay_ms(200);
000048 eca8      	LDI  R26,LOW(200)
000049 e0b0      	LDI  R27,0
00004a d0b1      	RCALL _delay_ms
                 ; 0000 0080     BUZZER_OFF;
00004b 98c2      	CBI  0x18,2
                 ; 0000 0081 }
00004c 9508      	RET
                 ; .FEND
                 ;
                 ;void    Protect(void)
                 ; 0000 0084 {
                 _Protect:
                 ; .FSTART _Protect
                 ; 0000 0085     unsigned int    Uint_adc_value;
                 ; 0000 0086 
                 ; 0000 0087     /* Kiem tra nguon -5vdc */
                 ; 0000 0088     Uint_adc_value = read_adc(ADC_Negative_5);
00004d d0b8      	RCALL __SAVELOCR2
                 ;	Uint_adc_value -> R16,R17
00004e e0a1      	LDI  R26,LOW(1)
00004f d0a6      	RCALL SUBOPT_0x0
                 ; 0000 0089     if(Uint_adc_value*ADC_Negative_5_ratio > ADC_Negative_5_Set_OVER)
000050 f048      	BRLO _0x18
                 ; 0000 008A     {
                 ; 0000 008B         Uc_Negative_5_over_count++;
000051 9433      	INC  R3
                 ; 0000 008C         if(Uc_Negative_5_over_count > 10)
000052 e0ea      	LDI  R30,LOW(10)
000053 15e3      	CP   R30,R3
000054 f420      	BRSH _0x19
                 ; 0000 008D         {
                 ; 0000 008E             Uc_Negative_5_over_count = 11;
000055 e0eb      	LDI  R30,LOW(11)
000056 2e3e      	MOV  R3,R30
                 ; 0000 008F             Uc_Negative_5_under_count = 0;
000057 2422      	CLR  R2
                 ; 0000 0090             /* Set warning */
                 ; 0000 0091             Uc_Negative_5_warning = 1;
000058 9a98      	SBI  0x13,0
                 ; 0000 0092         }
                 ; 0000 0093     }
                 _0x19:
                 ; 0000 0094     else
000059 c008      	RJMP _0x1C
                 _0x18:
                 ; 0000 0095     {
                 ; 0000 0096         Uc_Negative_5_under_count++;
00005a 9423      	INC  R2
                 ; 0000 0097         if(Uc_Negative_5_under_count > 10)
00005b e0ea      	LDI  R30,LOW(10)
00005c 15e2      	CP   R30,R2
00005d f420      	BRSH _0x1D
                 ; 0000 0098         {
                 ; 0000 0099             Uc_Negative_5_over_count = 0;
00005e 2433      	CLR  R3
                 ; 0000 009A             Uc_Negative_5_under_count = 11;
00005f e0eb      	LDI  R30,LOW(11)
000060 2e2e      	MOV  R2,R30
                 ; 0000 009B             /* clear warning */
                 ; 0000 009C             Uc_Negative_5_warning = 0;
000061 9898      	CBI  0x13,0
                 ; 0000 009D         }
                 ; 0000 009E     }
                 _0x1D:
                 _0x1C:
                 ; 0000 009F 
                 ; 0000 00A0     /* Kiem tra nguon +5VDC */
                 ; 0000 00A1     Uint_adc_value = read_adc(ADC_Positive_5);
000062 e0a5      	LDI  R26,LOW(5)
000063 d092      	RCALL SUBOPT_0x0
                 ; 0000 00A2     if(Uint_adc_value*ADC_Positive_5_ratio > ADC_Positive_5_Set_OVER)
000064 f048      	BRLO _0x20
                 ; 0000 00A3     {
                 ; 0000 00A4         Uc_Positive_5_over_count++;
000065 9453      	INC  R5
                 ; 0000 00A5         if(Uc_Positive_5_over_count > 10)
000066 e0ea      	LDI  R30,LOW(10)
000067 15e5      	CP   R30,R5
000068 f420      	BRSH _0x21
                 ; 0000 00A6         {
                 ; 0000 00A7             Uc_Positive_5_over_count = 11;
000069 e0eb      	LDI  R30,LOW(11)
00006a 2e5e      	MOV  R5,R30
                 ; 0000 00A8             Uc_Positive_5_under_count = 0;
00006b 2444      	CLR  R4
                 ; 0000 00A9             /* Set warning */
                 ; 0000 00AA             Uc_Positive_5_warning = 1;
00006c 9a99      	SBI  0x13,1
                 ; 0000 00AB         }
                 ; 0000 00AC     }
                 _0x21:
                 ; 0000 00AD     else
00006d c008      	RJMP _0x24
                 _0x20:
                 ; 0000 00AE     {
                 ; 0000 00AF         Uc_Positive_5_under_count++;
00006e 9443      	INC  R4
                 ; 0000 00B0         if(Uc_Positive_5_under_count > 10)
00006f e0ea      	LDI  R30,LOW(10)
000070 15e4      	CP   R30,R4
000071 f420      	BRSH _0x25
                 ; 0000 00B1         {
                 ; 0000 00B2             Uc_Positive_5_over_count = 0;
000072 2455      	CLR  R5
                 ; 0000 00B3             Uc_Positive_5_under_count = 11;
000073 e0eb      	LDI  R30,LOW(11)
000074 2e4e      	MOV  R4,R30
                 ; 0000 00B4             /* clear warning */
                 ; 0000 00B5             Uc_Positive_5_warning = 0;
000075 9899      	CBI  0x13,1
                 ; 0000 00B6         }
                 ; 0000 00B7     }
                 _0x25:
                 _0x24:
                 ; 0000 00B8 
                 ; 0000 00B9     /* Kiem tra nguon -12VDC */
                 ; 0000 00BA     Uint_adc_value = read_adc(ADC_Negative_12);
000076 e0a4      	LDI  R26,LOW(4)
000077 d07e      	RCALL SUBOPT_0x0
                 ; 0000 00BB     if(Uint_adc_value*ADC_Negative_12_ratio > ADC_Negative_12_Set_OVER)
000078 f048      	BRLO _0x28
                 ; 0000 00BC     {
                 ; 0000 00BD         Uc_Negative_12_over_count++;
000079 9493      	INC  R9
                 ; 0000 00BE         if(Uc_Negative_12_over_count > 10)
00007a e0ea      	LDI  R30,LOW(10)
00007b 15e9      	CP   R30,R9
00007c f420      	BRSH _0x29
                 ; 0000 00BF         {
                 ; 0000 00C0             Uc_Negative_12_over_count = 11;
00007d e0eb      	LDI  R30,LOW(11)
00007e 2e9e      	MOV  R9,R30
                 ; 0000 00C1             Uc_Negative_12_under_count = 0;
00007f 2488      	CLR  R8
                 ; 0000 00C2             /* Set warning */
                 ; 0000 00C3             Uc_Negative_12_warning = 1;
000080 9a9b      	SBI  0x13,3
                 ; 0000 00C4         }
                 ; 0000 00C5     }
                 _0x29:
                 ; 0000 00C6     else
000081 c008      	RJMP _0x2C
                 _0x28:
                 ; 0000 00C7     {
                 ; 0000 00C8         Uc_Negative_12_under_count++;
000082 9483      	INC  R8
                 ; 0000 00C9         if(Uc_Negative_12_under_count > 10)
000083 e0ea      	LDI  R30,LOW(10)
000084 15e8      	CP   R30,R8
000085 f420      	BRSH _0x2D
                 ; 0000 00CA         {
                 ; 0000 00CB             Uc_Negative_12_over_count = 0;
000086 2499      	CLR  R9
                 ; 0000 00CC             Uc_Negative_12_under_count = 11;
000087 e0eb      	LDI  R30,LOW(11)
000088 2e8e      	MOV  R8,R30
                 ; 0000 00CD             /* clear warning */
                 ; 0000 00CE             Uc_Negative_12_warning = 0;
000089 989b      	CBI  0x13,3
                 ; 0000 00CF         }
                 ; 0000 00D0     }
                 _0x2D:
                 _0x2C:
                 ; 0000 00D1 
                 ; 0000 00D2     /* Kiem tra nguon +12VDC */
                 ; 0000 00D3     Uint_adc_value = read_adc(ADC_Positive_12);
00008a e0a3      	LDI  R26,LOW(3)
00008b d06a      	RCALL SUBOPT_0x0
                 ; 0000 00D4     if(Uint_adc_value*ADC_Positive_12_ratio > ADC_Positive_12_Set_OVER)
00008c f048      	BRLO _0x30
                 ; 0000 00D5     {
                 ; 0000 00D6         Uc_Positive_12_over_count++;
00008d 9473      	INC  R7
                 ; 0000 00D7         if(Uc_Positive_12_over_count > 10)
00008e e0ea      	LDI  R30,LOW(10)
00008f 15e7      	CP   R30,R7
000090 f420      	BRSH _0x31
                 ; 0000 00D8         {
                 ; 0000 00D9             Uc_Positive_12_over_count = 11;
000091 e0eb      	LDI  R30,LOW(11)
000092 2e7e      	MOV  R7,R30
                 ; 0000 00DA             Uc_Positive_12_under_count = 0;
000093 2466      	CLR  R6
                 ; 0000 00DB             /* Set warning */
                 ; 0000 00DC             Uc_Positive_12_warning = 1;
000094 9a9a      	SBI  0x13,2
                 ; 0000 00DD         }
                 ; 0000 00DE     }
                 _0x31:
                 ; 0000 00DF     else
000095 c008      	RJMP _0x34
                 _0x30:
                 ; 0000 00E0     {
                 ; 0000 00E1         Uc_Positive_12_under_count++;
000096 9463      	INC  R6
                 ; 0000 00E2         if(Uc_Positive_12_under_count > 10)
000097 e0ea      	LDI  R30,LOW(10)
000098 15e6      	CP   R30,R6
000099 f420      	BRSH _0x35
                 ; 0000 00E3         {
                 ; 0000 00E4             Uc_Positive_12_over_count = 0;
00009a 2477      	CLR  R7
                 ; 0000 00E5             Uc_Positive_12_under_count = 11;
00009b e0eb      	LDI  R30,LOW(11)
00009c 2e6e      	MOV  R6,R30
                 ; 0000 00E6             /* clear warning */
                 ; 0000 00E7             Uc_Positive_12_warning = 0;
00009d 989a      	CBI  0x13,2
                 ; 0000 00E8         }
                 ; 0000 00E9     }
                 _0x35:
                 _0x34:
                 ; 0000 00EA 
                 ; 0000 00EB     /* Kiem tra nguon +24VDC */
                 ; 0000 00EC     Uint_adc_value = read_adc(ADC_Positive_24);
00009e e0a2      	LDI  R26,LOW(2)
00009f d056      	RCALL SUBOPT_0x0
                 ; 0000 00ED     if(Uint_adc_value*ADC_Positive_24_ratio > ADC_Positive_24_Set_OVER)
0000a0 f048      	BRLO _0x38
                 ; 0000 00EE     {
                 ; 0000 00EF         Uc_Positive_24_over_count++;
0000a1 94b3      	INC  R11
                 ; 0000 00F0         if(Uc_Positive_24_over_count > 10)
0000a2 e0ea      	LDI  R30,LOW(10)
0000a3 15eb      	CP   R30,R11
0000a4 f420      	BRSH _0x39
                 ; 0000 00F1         {
                 ; 0000 00F2             Uc_Positive_24_over_count = 11;
0000a5 e0eb      	LDI  R30,LOW(11)
0000a6 2ebe      	MOV  R11,R30
                 ; 0000 00F3             Uc_Positive_24_under_count = 0;
0000a7 24aa      	CLR  R10
                 ; 0000 00F4             /* Set warning */
                 ; 0000 00F5             Uc_Positive_24_warning = 1;
0000a8 9a9c      	SBI  0x13,4
                 ; 0000 00F6         }
                 ; 0000 00F7     }
                 _0x39:
                 ; 0000 00F8     else
0000a9 c008      	RJMP _0x3C
                 _0x38:
                 ; 0000 00F9     {
                 ; 0000 00FA         Uc_Positive_24_under_count++;
0000aa 94a3      	INC  R10
                 ; 0000 00FB         if(Uc_Positive_24_under_count > 10)
0000ab e0ea      	LDI  R30,LOW(10)
0000ac 15ea      	CP   R30,R10
0000ad f420      	BRSH _0x3D
                 ; 0000 00FC         {
                 ; 0000 00FD             Uc_Positive_24_over_count = 0;
0000ae 24bb      	CLR  R11
                 ; 0000 00FE             Uc_Positive_24_under_count = 11;
0000af e0eb      	LDI  R30,LOW(11)
0000b0 2eae      	MOV  R10,R30
                 ; 0000 00FF             /* clear warning */
                 ; 0000 0100             Uc_Positive_24_warning = 0;
0000b1 989c      	CBI  0x13,4
                 ; 0000 0101         }
                 ; 0000 0102     }
                 _0x3D:
                 _0x3C:
                 ; 0000 0103 
                 ; 0000 0104     if(Uc_Negative_5_warning || Uc_Negative_12_warning || Uc_Positive_5_warning || Uc_Positive_12_warning)
0000b2 9998      	SBIC 0x13,0
0000b3 c006      	RJMP _0x41
0000b4 999b      	SBIC 0x13,3
0000b5 c004      	RJMP _0x41
0000b6 9999      	SBIC 0x13,1
0000b7 c002      	RJMP _0x41
0000b8 9b9a      	SBIS 0x13,2
0000b9 c002      	RJMP _0x40
                 _0x41:
                 ; 0000 0105     {
                 ; 0000 0106         CONTROL_UNDER_24_OFF;
0000ba 9adf      	SBI  0x1B,7
                 ; 0000 0107     }
                 ; 0000 0108     else
0000bb c001      	RJMP _0x45
                 _0x40:
                 ; 0000 0109     {
                 ; 0000 010A         CONTROL_UNDER_24_ON;
0000bc 98df      	CBI  0x1B,7
                 ; 0000 010B     }
                 _0x45:
                 ; 0000 010C 
                 ; 0000 010D     if(Uc_Positive_24_warning)
0000bd 9b9c      	SBIS 0x13,4
0000be c002      	RJMP _0x48
                 ; 0000 010E     {
                 ; 0000 010F         CONTROL_24_OFF;
0000bf 9ade      	SBI  0x1B,6
                 ; 0000 0110     }
                 ; 0000 0111     else
0000c0 c001      	RJMP _0x4B
                 _0x48:
                 ; 0000 0112     {
                 ; 0000 0113         CONTROL_24_ON;
0000c1 98de      	CBI  0x1B,6
                 ; 0000 0114     }
                 _0x4B:
                 ; 0000 0115     delay_ms(10);
0000c2 e0aa      	LDI  R26,LOW(10)
0000c3 e0b0      	LDI  R27,0
0000c4 d037      	RCALL _delay_ms
                 ; 0000 0116 }
0000c5 9109      	LD   R16,Y+
0000c6 9119      	LD   R17,Y+
0000c7 9508      	RET
                 ; .FEND
                 ;
                 ;void main(void)
                 ; 0000 0119 {
                 _main:
                 ; .FSTART _main
                 ; 0000 011A     // Declare your local variables here
                 ; 0000 011B 
                 ; 0000 011C     // Crystal Oscillator division factor: 1
                 ; 0000 011D     #pragma optsize-
                 ; 0000 011E     CLKPR=(1<<CLKPCE);
0000c8 e8e0      	LDI  R30,LOW(128)
0000c9 bde6      	OUT  0x26,R30
                 ; 0000 011F     CLKPR=(0<<CLKPCE) | (0<<CLKPS3) | (0<<CLKPS2) | (0<<CLKPS1) | (0<<CLKPS0);
0000ca e0e0      	LDI  R30,LOW(0)
0000cb bde6      	OUT  0x26,R30
                 ; 0000 0120     #ifdef _OPTIMIZE_SIZE_
                 ; 0000 0121     #pragma optsize+
                 ; 0000 0122     #endif
                 ; 0000 0123 
                 ; 0000 0124     // Input/Output Ports initialization
                 ; 0000 0125     // Port A initialization
                 ; 0000 0126     // Function: Bit7=Out Bit6=Out Bit5=In Bit4=In Bit3=In Bit2=In Bit1=In Bit0=In
                 ; 0000 0127     DDRA=(1<<DDA7) | (1<<DDA6) | (0<<DDA5) | (0<<DDA4) | (0<<DDA3) | (0<<DDA2) | (0<<DDA1) | (0<<DDA0);
0000cc ece0      	LDI  R30,LOW(192)
0000cd bbea      	OUT  0x1A,R30
                 ; 0000 0128     // State: Bit7=0 Bit6=0 Bit5=T Bit4=T Bit3=T Bit2=T Bit1=T Bit0=T
                 ; 0000 0129     PORTA=(0<<PORTA7) | (0<<PORTA6) | (0<<PORTA5) | (0<<PORTA4) | (0<<PORTA3) | (0<<PORTA2) | (0<<PORTA1) | (0<<PORTA0);
0000ce e0e0      	LDI  R30,LOW(0)
0000cf bbeb      	OUT  0x1B,R30
                 ; 0000 012A 
                 ; 0000 012B     // Port B initialization
                 ; 0000 012C     // Function: Bit3=In Bit2=Out Bit1=In Bit0=In
                 ; 0000 012D     DDRB=(0<<DDB3) | (1<<DDB2) | (0<<DDB1) | (0<<DDB0);
0000d0 e0e4      	LDI  R30,LOW(4)
0000d1 bbe7      	OUT  0x17,R30
                 ; 0000 012E     // State: Bit3=T Bit2=0 Bit1=T Bit0=T
                 ; 0000 012F     PORTB=(0<<PORTB3) | (0<<PORTB2) | (0<<PORTB1) | (0<<PORTB0);
0000d2 e0e0      	LDI  R30,LOW(0)
0000d3 bbe8      	OUT  0x18,R30
                 ; 0000 0130 
                 ; 0000 0131     // Timer/Counter 0 initialization
                 ; 0000 0132     // Clock source: System Clock
                 ; 0000 0133     // Clock value: Timer 0 Stopped
                 ; 0000 0134     // Mode: Normal top=0xFF
                 ; 0000 0135     // OC0A output: Disconnected
                 ; 0000 0136     // OC0B output: Disconnected
                 ; 0000 0137     TCCR0A=(0<<COM0A1) | (0<<COM0A0) | (0<<COM0B1) | (0<<COM0B0) | (0<<WGM01) | (0<<WGM00);
0000d4 bfe0      	OUT  0x30,R30
                 ; 0000 0138     TCCR0B=(0<<WGM02) | (0<<CS02) | (0<<CS01) | (0<<CS00);
0000d5 bfe3      	OUT  0x33,R30
                 ; 0000 0139     TCNT0=0x00;
0000d6 bfe2      	OUT  0x32,R30
                 ; 0000 013A     OCR0A=0x00;
0000d7 bfe6      	OUT  0x36,R30
                 ; 0000 013B     OCR0B=0x00;
0000d8 bfec      	OUT  0x3C,R30
                 ; 0000 013C 
                 ; 0000 013D     // Timer/Counter 1 initialization
                 ; 0000 013E     // Clock source: System Clock
                 ; 0000 013F     // Clock value: Timer1 Stopped
                 ; 0000 0140     // Mode: Normal top=0xFFFF
                 ; 0000 0141     // OC1A output: Disconnected
                 ; 0000 0142     // OC1B output: Disconnected
                 ; 0000 0143     // Noise Canceler: Off
                 ; 0000 0144     // Input Capture on Falling Edge
                 ; 0000 0145     // Timer1 Overflow Interrupt: Off
                 ; 0000 0146     // Input Capture Interrupt: Off
                 ; 0000 0147     // Compare A Match Interrupt: Off
                 ; 0000 0148     // Compare B Match Interrupt: Off
                 ; 0000 0149     TCCR1A=(0<<COM1A1) | (0<<COM1A0) | (0<<COM1B1) | (0<<COM1B0) | (0<<WGM11) | (0<<WGM10);
0000d9 bdef      	OUT  0x2F,R30
                 ; 0000 014A     TCCR1B=(0<<ICNC1) | (0<<ICES1) | (0<<WGM13) | (0<<WGM12) | (0<<CS12) | (0<<CS11) | (0<<CS10);
0000da bdee      	OUT  0x2E,R30
                 ; 0000 014B     TCNT1H=0x00;
0000db bded      	OUT  0x2D,R30
                 ; 0000 014C     TCNT1L=0x00;
0000dc bdec      	OUT  0x2C,R30
                 ; 0000 014D     ICR1H=0x00;
0000dd bde5      	OUT  0x25,R30
                 ; 0000 014E     ICR1L=0x00;
0000de bde4      	OUT  0x24,R30
                 ; 0000 014F     OCR1AH=0x00;
0000df bdeb      	OUT  0x2B,R30
                 ; 0000 0150     OCR1AL=0x00;
0000e0 bdea      	OUT  0x2A,R30
                 ; 0000 0151     OCR1BH=0x00;
0000e1 bde9      	OUT  0x29,R30
                 ; 0000 0152     OCR1BL=0x00;
0000e2 bde8      	OUT  0x28,R30
                 ; 0000 0153 
                 ; 0000 0154     // Timer/Counter 0 Interrupt(s) initialization
                 ; 0000 0155     TIMSK0=(0<<OCIE0B) | (0<<OCIE0A) | (0<<TOIE0);
0000e3 bfe9      	OUT  0x39,R30
                 ; 0000 0156 
                 ; 0000 0157     // Timer/Counter 1 Interrupt(s) initialization
                 ; 0000 0158     TIMSK1=(0<<ICIE1) | (0<<OCIE1B) | (0<<OCIE1A) | (0<<TOIE1);
0000e4 b9ec      	OUT  0xC,R30
                 ; 0000 0159 
                 ; 0000 015A     // External Interrupt(s) initialization
                 ; 0000 015B     // INT0: Off
                 ; 0000 015C     // Interrupt on any change on pins PCINT0-7: Off
                 ; 0000 015D     // Interrupt on any change on pins PCINT8-11: Off
                 ; 0000 015E     MCUCR=(0<<ISC01) | (0<<ISC00);
0000e5 bfe5      	OUT  0x35,R30
                 ; 0000 015F     GIMSK=(0<<INT0) | (0<<PCIE1) | (0<<PCIE0);
0000e6 bfeb      	OUT  0x3B,R30
                 ; 0000 0160 
                 ; 0000 0161     // USI initialization
                 ; 0000 0162     // Mode: Disabled
                 ; 0000 0163     // Clock source: Register & Counter=no clk.
                 ; 0000 0164     // USI Counter Overflow Interrupt: Off
                 ; 0000 0165     USICR=(0<<USISIE) | (0<<USIOIE) | (0<<USIWM1) | (0<<USIWM0) | (0<<USICS1) | (0<<USICS0) | (0<<USICLK) | (0<<USITC);
0000e7 b9ed      	OUT  0xD,R30
                 ; 0000 0166 
                 ; 0000 0167     // Analog Comparator initialization
                 ; 0000 0168     // Analog Comparator: Off
                 ; 0000 0169     // The Analog Comparator's positive input is
                 ; 0000 016A     // connected to the AIN0 pin
                 ; 0000 016B     // The Analog Comparator's negative input is
                 ; 0000 016C     // connected to the AIN1 pin
                 ; 0000 016D     ACSR=(1<<ACD) | (0<<ACBG) | (0<<ACO) | (0<<ACI) | (0<<ACIE) | (0<<ACIC) | (0<<ACIS1) | (0<<ACIS0);
0000e8 e8e0      	LDI  R30,LOW(128)
0000e9 b9e8      	OUT  0x8,R30
                 ; 0000 016E     // Digital input buffer on AIN0: On
                 ; 0000 016F     // Digital input buffer on AIN1: On
                 ; 0000 0170     DIDR0=(0<<ADC1D) | (0<<ADC2D);
0000ea e0e0      	LDI  R30,LOW(0)
0000eb b9e1      	OUT  0x1,R30
                 ; 0000 0171 
                 ; 0000 0172     // ADC initialization
                 ; 0000 0173     // ADC Clock frequency: 1000.000 kHz
                 ; 0000 0174     // ADC Voltage Reference: AVCC pin
                 ; 0000 0175     // ADC Bipolar Input Mode: Off
                 ; 0000 0176     // ADC Auto Trigger Source: ADC Stopped
                 ; 0000 0177     // Digital input buffers on ADC0: On, ADC1: On, ADC2: On, ADC3: On
                 ; 0000 0178     // ADC4: On, ADC5: On, ADC6: On, ADC7: On
                 ; 0000 0179     DIDR0=(0<<ADC7D) | (0<<ADC6D) | (0<<ADC5D) | (0<<ADC4D) | (0<<ADC3D) | (0<<ADC2D) | (0<<ADC1D) | (0<<ADC0D);
0000ec b9e1      	OUT  0x1,R30
                 ; 0000 017A     ADMUX=ADC_VREF_TYPE;
0000ed b9e7      	OUT  0x7,R30
                 ; 0000 017B     ADCSRA=(1<<ADEN) | (0<<ADSC) | (0<<ADATE) | (0<<ADIF) | (0<<ADIE) | (0<<ADPS2) | (1<<ADPS1) | (1<<ADPS0);
0000ee e8e3      	LDI  R30,LOW(131)
0000ef b9e6      	OUT  0x6,R30
                 ; 0000 017C     ADCSRB=(0<<BIN) | (0<<ADLAR) | (0<<ADTS2) | (0<<ADTS1) | (0<<ADTS0);
0000f0 e0e0      	LDI  R30,LOW(0)
0000f1 b9e3      	OUT  0x3,R30
                 ; 0000 017D 
                 ; 0000 017E     Init();
0000f2 df43      	RCALL _Init
                 ; 0000 017F     while (1)
                 _0x4E:
                 ; 0000 0180     {
                 ; 0000 0181     // Place your code here
                 ; 0000 0182         Protect();
0000f3 df59      	RCALL _Protect
                 ; 0000 0183 
                 ; 0000 0184     }
0000f4 cffe      	RJMP _0x4E
                 ; 0000 0185 }
                 _0x51:
0000f5 cfff      	RJMP _0x51
                 ; .FEND
                 
                 	.CSEG
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 5 TIMES, CODE SIZE REDUCTION:14 WORDS
                 SUBOPT_0x0:
0000f6 df30      	RCALL _read_adc
0000f7 018f      	MOVW R16,R30
                +
0000f8 300b     +CPI R16 , LOW ( 11 )
0000f9 e0e0     +LDI R30 , HIGH ( 11 )
0000fa 071e     +CPC R17 , R30
                 	__CPWRN 16,17,11
0000fb 9508      	RET
                 
                 
                 	.CSEG
                 _delay_ms:
0000fc 9610      	adiw r26,0
0000fd f039      	breq __delay_ms1
                 __delay_ms0:
                +
0000fe ed80     +LDI R24 , LOW ( 0x7D0 )
0000ff e097     +LDI R25 , HIGH ( 0x7D0 )
                +__DELAY_USW_LOOP :
000100 9701     +SBIW R24 , 1
000101 f7f1     +BRNE __DELAY_USW_LOOP
                 	__DELAY_USW 0x7D0
000102 95a8      	wdr
000103 9711      	sbiw r26,1
000104 f7c9      	brne __delay_ms0
                 __delay_ms1:
000105 9508      	ret
                 
                 __SAVELOCR2:
000106 931a      	ST   -Y,R17
000107 930a      	ST   -Y,R16
000108 9508      	RET
                 
                 ;END OF CODE MARKER
                 __END_OF_CODE:


RESOURCE USE INFORMATION
------------------------

Notice:
The register and instruction counts are symbol table hit counts,
and hence implicitly used resources are not counted, eg, the
'lpm' instruction without operands implicitly uses r0 and z,
none of which are counted.

x,y,z are separate entities in the symbol table and are
counted separately from r26..r31 here.

.dseg memory usage only counts static data declared with .byte

ATtiny24 register use summary:
r0 :   0 r1 :   0 r2 :   5 r3 :   5 r4 :   5 r5 :   5 r6 :   5 r7 :   5 
r8 :   5 r9 :   5 r10:   5 r11:   5 r12:   0 r13:   0 r14:   0 r15:   0 
r16:   4 r17:   3 r18:   0 r19:   0 r20:   0 r21:   0 r22:   0 r23:   0 
r24:   8 r25:   1 r26:  12 r27:   2 r28:   2 r29:   0 r30: 100 r31:   1 
x  :   2 y  :   6 z  :   0 
Registers used: 21 out of 35 (60.0%)

ATtiny24 instruction use summary:
.lds  :   0 .lds.l:   0 .sts  :   0 .sts.l:   0 adc   :   0 add   :   0 
adiw  :   2 and   :   0 andi  :   1 asr   :   0 bclr  :   0 bld   :   0 
brbc  :   0 brbs  :   0 brcc  :   0 brcs  :   0 break :   0 breq  :   1 
brge  :   0 brhc  :   0 brhs  :   0 brid  :   0 brie  :   0 brlo  :   5 
brlt  :   0 brmi  :   0 brne  :   5 brpl  :   0 brsh  :  10 brtc  :   0 
brts  :   0 brvc  :   0 brvs  :   0 bset  :   0 bst   :   0 cbi   :  15 
cbr   :   0 clc   :   0 clh   :   0 cli   :   1 cln   :   0 clr   :  21 
cls   :   0 clt   :   0 clv   :   0 clz   :   0 com   :   0 cp    :  10 
cpc   :   1 cpi   :   1 cpse  :   0 dec   :   3 des   :   0 eor   :   0 
fmul  :   0 fmuls :   0 fmulsu:   0 icall :   0 ijmp  :   0 in    :   2 
inc   :  10 ld    :   3 ldd   :   0 ldi   :  50 lds   :   0 lpm   :   0 
lsl   :   0 lsr   :   0 mov   :  10 movw  :   1 mul   :   0 muls  :   0 
mulsu :   0 neg   :   0 nop   :   0 or    :   0 ori   :   0 out   :  39 
pop   :   0 push  :   0 rcall :  11 ret   :   6 reti  :   0 rjmp  :  33 
rol   :   0 ror   :   0 sbc   :   0 sbci  :   0 sbi   :  10 sbic  :   3 
sbis  :   3 sbiw  :   2 sbr   :   0 sbrc  :   0 sbrs  :   0 sec   :   0 
seh   :   0 sei   :   0 sen   :   0 ser   :   0 ses   :   0 set   :   0 
sev   :   0 sez   :   0 sleep :   0 spm   :   0 st    :   5 std   :   0 
sts   :   0 sub   :   0 subi  :   0 swap  :   0 tst   :   0 wdr   :   1 

Instructions used: 29 out of 114 (25.4%)

ATtiny24 memory use summary [bytes]:
Segment   Begin    End      Code   Data   Used    Size   Use%
---------------------------------------------------------------
[.cseg] 0x000000 0x000212    530      0    530    2048  25.9%
[.dseg] 0x000060 0x000080      0      0      0     128   0.0%
[.eseg] 0x000000 0x000000      0      0      0     128   0.0%

Assembly complete, 0 errors, 10 warnings
