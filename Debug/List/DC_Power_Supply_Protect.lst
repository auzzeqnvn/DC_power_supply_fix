
AVRASM ver. 2.1.30  D:\My Data\TanPhat\DC_power_supply_fix\Debug\List\DC_Power_Supply_Protect.asm Thu Nov 29 23:47:59 2018

D:\My Data\TanPhat\DC_power_supply_fix\Debug\List\DC_Power_Supply_Protect.asm(987): warning: Register r3 already defined by the .DEF directive
D:\My Data\TanPhat\DC_power_supply_fix\Debug\List\DC_Power_Supply_Protect.asm(988): warning: Register r2 already defined by the .DEF directive
D:\My Data\TanPhat\DC_power_supply_fix\Debug\List\DC_Power_Supply_Protect.asm(989): warning: Register r5 already defined by the .DEF directive
D:\My Data\TanPhat\DC_power_supply_fix\Debug\List\DC_Power_Supply_Protect.asm(990): warning: Register r4 already defined by the .DEF directive
D:\My Data\TanPhat\DC_power_supply_fix\Debug\List\DC_Power_Supply_Protect.asm(991): warning: Register r7 already defined by the .DEF directive
D:\My Data\TanPhat\DC_power_supply_fix\Debug\List\DC_Power_Supply_Protect.asm(992): warning: Register r6 already defined by the .DEF directive
D:\My Data\TanPhat\DC_power_supply_fix\Debug\List\DC_Power_Supply_Protect.asm(993): warning: Register r9 already defined by the .DEF directive
D:\My Data\TanPhat\DC_power_supply_fix\Debug\List\DC_Power_Supply_Protect.asm(994): warning: Register r8 already defined by the .DEF directive
D:\My Data\TanPhat\DC_power_supply_fix\Debug\List\DC_Power_Supply_Protect.asm(995): warning: Register r11 already defined by the .DEF directive
D:\My Data\TanPhat\DC_power_supply_fix\Debug\List\DC_Power_Supply_Protect.asm(996): warning: Register r10 already defined by the .DEF directive
                 
                 
                 ;CodeVisionAVR C Compiler V3.12 Advanced
                 ;(C) Copyright 1998-2014 Pavel Haiduc, HP InfoTech s.r.l.
                 ;http://www.hpinfotech.com
                 
                 ;Build configuration    : Debug
                 ;Chip type              : ATtiny24
                 ;Program type           : Application
                 ;Clock frequency        : 8.000000 MHz
                 ;Memory model           : Tiny
                 ;Optimize for           : Size
                 ;(s)printf features     : int, width
                 ;(s)scanf features      : int, width
                 ;External RAM size      : 0
                 ;Data Stack size        : 32 byte(s)
                 ;Heap size              : 0 byte(s)
                 ;Promote 'char' to 'int': Yes
                 ;'char' is unsigned     : Yes
                 ;8 bit enums            : Yes
                 ;Global 'const' stored in FLASH: Yes
                 ;Enhanced function parameter passing: Yes
                 ;Enhanced core instructions: On
                 ;Automatic register allocation for global variables: On
                 ;Smart register allocation: On
                 
                 	#define _MODEL_TINY_
                 
                 	#pragma AVRPART ADMIN PART_NAME ATtiny24
                 	#pragma AVRPART MEMORY PROG_FLASH 2048
                 	#pragma AVRPART MEMORY EEPROM 128
                 	#pragma AVRPART MEMORY INT_SRAM SIZE 128
                 	#pragma AVRPART MEMORY INT_SRAM START_ADDR 0x60
                 
                 	.LISTMAC
                 	.EQU EERE=0x0
                 	.EQU EEWE=0x1
                 	.EQU EEMWE=0x2
                 	.EQU EECR=0x1C
                 	.EQU EEDR=0x1D
                 	.EQU EEARL=0x1E
                 
                 	.EQU WDTCSR=0x21
                 	.EQU MCUSR=0x34
                 	.EQU MCUCR=0x35
                 	.EQU SPL=0x3D
                 	.EQU SREG=0x3F
                 	.EQU GPIOR0=0x13
                 	.EQU GPIOR1=0x14
                 	.EQU GPIOR2=0x15
                 
                 	.DEF R0X0=R0
                 	.DEF R0X1=R1
                 	.DEF R0X2=R2
                 	.DEF R0X3=R3
                 	.DEF R0X4=R4
                 	.DEF R0X5=R5
                 	.DEF R0X6=R6
                 	.DEF R0X7=R7
                 	.DEF R0X8=R8
                 	.DEF R0X9=R9
                 	.DEF R0XA=R10
                 	.DEF R0XB=R11
                 	.DEF R0XC=R12
                 	.DEF R0XD=R13
                 	.DEF R0XE=R14
                 	.DEF R0XF=R15
                 	.DEF R0X10=R16
                 	.DEF R0X11=R17
                 	.DEF R0X12=R18
                 	.DEF R0X13=R19
                 	.DEF R0X14=R20
                 	.DEF R0X15=R21
                 	.DEF R0X16=R22
                 	.DEF R0X17=R23
                 	.DEF R0X18=R24
                 	.DEF R0X19=R25
                 	.DEF R0X1A=R26
                 	.DEF R0X1B=R27
                 	.DEF R0X1C=R28
                 	.DEF R0X1D=R29
                 	.DEF R0X1E=R30
                 	.DEF R0X1F=R31
                 
                 	.EQU __SRAM_START=0x0060
                 	.EQU __SRAM_END=0x00DF
                 	.EQU __DSTACK_SIZE=0x0020
                 	.EQU __HEAP_SIZE=0x0000
                 	.EQU __CLEAR_SRAM_SIZE=__SRAM_END-__SRAM_START+1
                 
                 	.MACRO __CPD1N
                 	CPI  R30,LOW(@0)
                 	LDI  R26,HIGH(@0)
                 	CPC  R31,R26
                 	LDI  R26,BYTE3(@0)
                 	CPC  R22,R26
                 	LDI  R26,BYTE4(@0)
                 	CPC  R23,R26
                 	.ENDM
                 
                 	.MACRO __CPD2N
                 	CPI  R26,LOW(@0)
                 	LDI  R30,HIGH(@0)
                 	CPC  R27,R30
                 	LDI  R30,BYTE3(@0)
                 	CPC  R24,R30
                 	LDI  R30,BYTE4(@0)
                 	CPC  R25,R30
                 	.ENDM
                 
                 	.MACRO __CPWRR
                 	CP   R@0,R@2
                 	CPC  R@1,R@3
                 	.ENDM
                 
                 	.MACRO __CPWRN
                 	CPI  R@0,LOW(@2)
                 	LDI  R30,HIGH(@2)
                 	CPC  R@1,R30
                 	.ENDM
                 
                 	.MACRO __ADDB1MN
                 	SUBI R30,LOW(-@0-(@1))
                 	.ENDM
                 
                 	.MACRO __ADDB2MN
                 	SUBI R26,LOW(-@0-(@1))
                 	.ENDM
                 
                 	.MACRO __ADDW1MN
                 	SUBI R30,LOW(-@0-(@1))
                 	SBCI R31,HIGH(-@0-(@1))
                 	.ENDM
                 
                 	.MACRO __ADDW2MN
                 	SUBI R26,LOW(-@0-(@1))
                 	SBCI R27,HIGH(-@0-(@1))
                 	.ENDM
                 
                 	.MACRO __ADDW1FN
                 	SUBI R30,LOW(-2*@0-(@1))
                 	SBCI R31,HIGH(-2*@0-(@1))
                 	.ENDM
                 
                 	.MACRO __ADDD1FN
                 	SUBI R30,LOW(-2*@0-(@1))
                 	SBCI R31,HIGH(-2*@0-(@1))
                 	SBCI R22,BYTE3(-2*@0-(@1))
                 	.ENDM
                 
                 	.MACRO __ADDD1N
                 	SUBI R30,LOW(-@0)
                 	SBCI R31,HIGH(-@0)
                 	SBCI R22,BYTE3(-@0)
                 	SBCI R23,BYTE4(-@0)
                 	.ENDM
                 
                 	.MACRO __ADDD2N
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	SBCI R24,BYTE3(-@0)
                 	SBCI R25,BYTE4(-@0)
                 	.ENDM
                 
                 	.MACRO __SUBD1N
                 	SUBI R30,LOW(@0)
                 	SBCI R31,HIGH(@0)
                 	SBCI R22,BYTE3(@0)
                 	SBCI R23,BYTE4(@0)
                 	.ENDM
                 
                 	.MACRO __SUBD2N
                 	SUBI R26,LOW(@0)
                 	SBCI R27,HIGH(@0)
                 	SBCI R24,BYTE3(@0)
                 	SBCI R25,BYTE4(@0)
                 	.ENDM
                 
                 	.MACRO __ANDBMNN
                 	LDS  R30,@0+(@1)
                 	ANDI R30,LOW(@2)
                 	STS  @0+(@1),R30
                 	.ENDM
                 
                 	.MACRO __ANDWMNN
                 	LDS  R30,@0+(@1)
                 	ANDI R30,LOW(@2)
                 	STS  @0+(@1),R30
                 	LDS  R30,@0+(@1)+1
                 	ANDI R30,HIGH(@2)
                 	STS  @0+(@1)+1,R30
                 	.ENDM
                 
                 	.MACRO __ANDD1N
                 	ANDI R30,LOW(@0)
                 	ANDI R31,HIGH(@0)
                 	ANDI R22,BYTE3(@0)
                 	ANDI R23,BYTE4(@0)
                 	.ENDM
                 
                 	.MACRO __ANDD2N
                 	ANDI R26,LOW(@0)
                 	ANDI R27,HIGH(@0)
                 	ANDI R24,BYTE3(@0)
                 	ANDI R25,BYTE4(@0)
                 	.ENDM
                 
                 	.MACRO __ORBMNN
                 	LDS  R30,@0+(@1)
                 	ORI  R30,LOW(@2)
                 	STS  @0+(@1),R30
                 	.ENDM
                 
                 	.MACRO __ORWMNN
                 	LDS  R30,@0+(@1)
                 	ORI  R30,LOW(@2)
                 	STS  @0+(@1),R30
                 	LDS  R30,@0+(@1)+1
                 	ORI  R30,HIGH(@2)
                 	STS  @0+(@1)+1,R30
                 	.ENDM
                 
                 	.MACRO __ORD1N
                 	ORI  R30,LOW(@0)
                 	ORI  R31,HIGH(@0)
                 	ORI  R22,BYTE3(@0)
                 	ORI  R23,BYTE4(@0)
                 	.ENDM
                 
                 	.MACRO __ORD2N
                 	ORI  R26,LOW(@0)
                 	ORI  R27,HIGH(@0)
                 	ORI  R24,BYTE3(@0)
                 	ORI  R25,BYTE4(@0)
                 	.ENDM
                 
                 	.MACRO __DELAY_USB
                 	LDI  R24,LOW(@0)
                 __DELAY_USB_LOOP:
                 	DEC  R24
                 	BRNE __DELAY_USB_LOOP
                 	.ENDM
                 
                 	.MACRO __DELAY_USW
                 	LDI  R24,LOW(@0)
                 	LDI  R25,HIGH(@0)
                 __DELAY_USW_LOOP:
                 	SBIW R24,1
                 	BRNE __DELAY_USW_LOOP
                 	.ENDM
                 
                 	.MACRO __GETD1S
                 	LDD  R30,Y+@0
                 	LDD  R31,Y+@0+1
                 	LDD  R22,Y+@0+2
                 	LDD  R23,Y+@0+3
                 	.ENDM
                 
                 	.MACRO __GETD2S
                 	LDD  R26,Y+@0
                 	LDD  R27,Y+@0+1
                 	LDD  R24,Y+@0+2
                 	LDD  R25,Y+@0+3
                 	.ENDM
                 
                 	.MACRO __PUTD1S
                 	STD  Y+@0,R30
                 	STD  Y+@0+1,R31
                 	STD  Y+@0+2,R22
                 	STD  Y+@0+3,R23
                 	.ENDM
                 
                 	.MACRO __PUTD2S
                 	STD  Y+@0,R26
                 	STD  Y+@0+1,R27
                 	STD  Y+@0+2,R24
                 	STD  Y+@0+3,R25
                 	.ENDM
                 
                 	.MACRO __PUTDZ2
                 	STD  Z+@0,R26
                 	STD  Z+@0+1,R27
                 	STD  Z+@0+2,R24
                 	STD  Z+@0+3,R25
                 	.ENDM
                 
                 	.MACRO __CLRD1S
                 	STD  Y+@0,R30
                 	STD  Y+@0+1,R30
                 	STD  Y+@0+2,R30
                 	STD  Y+@0+3,R30
                 	.ENDM
                 
                 	.MACRO __POINTB1MN
                 	LDI  R30,LOW(@0+(@1))
                 	.ENDM
                 
                 	.MACRO __POINTW1MN
                 	LDI  R30,LOW(@0+(@1))
                 	LDI  R31,HIGH(@0+(@1))
                 	.ENDM
                 
                 	.MACRO __POINTD1M
                 	LDI  R30,LOW(@0)
                 	LDI  R31,HIGH(@0)
                 	LDI  R22,BYTE3(@0)
                 	LDI  R23,BYTE4(@0)
                 	.ENDM
                 
                 	.MACRO __POINTW1FN
                 	LDI  R30,LOW(2*@0+(@1))
                 	LDI  R31,HIGH(2*@0+(@1))
                 	.ENDM
                 
                 	.MACRO __POINTD1FN
                 	LDI  R30,LOW(2*@0+(@1))
                 	LDI  R31,HIGH(2*@0+(@1))
                 	LDI  R22,BYTE3(2*@0+(@1))
                 	LDI  R23,BYTE4(2*@0+(@1))
                 	.ENDM
                 
                 	.MACRO __POINTB2MN
                 	LDI  R26,LOW(@0+(@1))
                 	.ENDM
                 
                 	.MACRO __POINTW2MN
                 	LDI  R26,LOW(@0+(@1))
                 	LDI  R27,HIGH(@0+(@1))
                 	.ENDM
                 
                 	.MACRO __POINTW2FN
                 	LDI  R26,LOW(2*@0+(@1))
                 	LDI  R27,HIGH(2*@0+(@1))
                 	.ENDM
                 
                 	.MACRO __POINTD2FN
                 	LDI  R26,LOW(2*@0+(@1))
                 	LDI  R27,HIGH(2*@0+(@1))
                 	LDI  R24,BYTE3(2*@0+(@1))
                 	LDI  R25,BYTE4(2*@0+(@1))
                 	.ENDM
                 
                 	.MACRO __POINTBRM
                 	LDI  R@0,LOW(@1)
                 	.ENDM
                 
                 	.MACRO __POINTWRM
                 	LDI  R@0,LOW(@2)
                 	LDI  R@1,HIGH(@2)
                 	.ENDM
                 
                 	.MACRO __POINTBRMN
                 	LDI  R@0,LOW(@1+(@2))
                 	.ENDM
                 
                 	.MACRO __POINTWRMN
                 	LDI  R@0,LOW(@2+(@3))
                 	LDI  R@1,HIGH(@2+(@3))
                 	.ENDM
                 
                 	.MACRO __POINTWRFN
                 	LDI  R@0,LOW(@2*2+(@3))
                 	LDI  R@1,HIGH(@2*2+(@3))
                 	.ENDM
                 
                 	.MACRO __GETD1N
                 	LDI  R30,LOW(@0)
                 	LDI  R31,HIGH(@0)
                 	LDI  R22,BYTE3(@0)
                 	LDI  R23,BYTE4(@0)
                 	.ENDM
                 
                 	.MACRO __GETD2N
                 	LDI  R26,LOW(@0)
                 	LDI  R27,HIGH(@0)
                 	LDI  R24,BYTE3(@0)
                 	LDI  R25,BYTE4(@0)
                 	.ENDM
                 
                 	.MACRO __GETB1MN
                 	LDS  R30,@0+(@1)
                 	.ENDM
                 
                 	.MACRO __GETB1HMN
                 	LDS  R31,@0+(@1)
                 	.ENDM
                 
                 	.MACRO __GETW1MN
                 	LDS  R30,@0+(@1)
                 	LDS  R31,@0+(@1)+1
                 	.ENDM
                 
                 	.MACRO __GETD1MN
                 	LDS  R30,@0+(@1)
                 	LDS  R31,@0+(@1)+1
                 	LDS  R22,@0+(@1)+2
                 	LDS  R23,@0+(@1)+3
                 	.ENDM
                 
                 	.MACRO __GETBRMN
                 	LDS  R@0,@1+(@2)
                 	.ENDM
                 
                 	.MACRO __GETWRMN
                 	LDS  R@0,@2+(@3)
                 	LDS  R@1,@2+(@3)+1
                 	.ENDM
                 
                 	.MACRO __GETWRZ
                 	LDD  R@0,Z+@2
                 	LDD  R@1,Z+@2+1
                 	.ENDM
                 
                 	.MACRO __GETD2Z
                 	LDD  R26,Z+@0
                 	LDD  R27,Z+@0+1
                 	LDD  R24,Z+@0+2
                 	LDD  R25,Z+@0+3
                 	.ENDM
                 
                 	.MACRO __GETB2MN
                 	LDS  R26,@0+(@1)
                 	.ENDM
                 
                 	.MACRO __GETW2MN
                 	LDS  R26,@0+(@1)
                 	LDS  R27,@0+(@1)+1
                 	.ENDM
                 
                 	.MACRO __GETD2MN
                 	LDS  R26,@0+(@1)
                 	LDS  R27,@0+(@1)+1
                 	LDS  R24,@0+(@1)+2
                 	LDS  R25,@0+(@1)+3
                 	.ENDM
                 
                 	.MACRO __PUTB1MN
                 	STS  @0+(@1),R30
                 	.ENDM
                 
                 	.MACRO __PUTW1MN
                 	STS  @0+(@1),R30
                 	STS  @0+(@1)+1,R31
                 	.ENDM
                 
                 	.MACRO __PUTD1MN
                 	STS  @0+(@1),R30
                 	STS  @0+(@1)+1,R31
                 	STS  @0+(@1)+2,R22
                 	STS  @0+(@1)+3,R23
                 	.ENDM
                 
                 	.MACRO __PUTB1EN
                 	LDI  R26,LOW(@0+(@1))
                 	LDI  R27,HIGH(@0+(@1))
                 	RCALL __EEPROMWRB
                 	.ENDM
                 
                 	.MACRO __PUTW1EN
                 	LDI  R26,LOW(@0+(@1))
                 	LDI  R27,HIGH(@0+(@1))
                 	RCALL __EEPROMWRW
                 	.ENDM
                 
                 	.MACRO __PUTD1EN
                 	LDI  R26,LOW(@0+(@1))
                 	LDI  R27,HIGH(@0+(@1))
                 	RCALL __EEPROMWRD
                 	.ENDM
                 
                 	.MACRO __PUTBR0MN
                 	STS  @0+(@1),R0
                 	.ENDM
                 
                 	.MACRO __PUTBMRN
                 	STS  @0+(@1),R@2
                 	.ENDM
                 
                 	.MACRO __PUTWMRN
                 	STS  @0+(@1),R@2
                 	STS  @0+(@1)+1,R@3
                 	.ENDM
                 
                 	.MACRO __PUTBZR
                 	STD  Z+@1,R@0
                 	.ENDM
                 
                 	.MACRO __PUTWZR
                 	STD  Z+@2,R@0
                 	STD  Z+@2+1,R@1
                 	.ENDM
                 
                 	.MACRO __GETW1R
                 	MOV  R30,R@0
                 	MOV  R31,R@1
                 	.ENDM
                 
                 	.MACRO __GETW2R
                 	MOV  R26,R@0
                 	MOV  R27,R@1
                 	.ENDM
                 
                 	.MACRO __GETWRN
                 	LDI  R@0,LOW(@2)
                 	LDI  R@1,HIGH(@2)
                 	.ENDM
                 
                 	.MACRO __PUTW1R
                 	MOV  R@0,R30
                 	MOV  R@1,R31
                 	.ENDM
                 
                 	.MACRO __PUTW2R
                 	MOV  R@0,R26
                 	MOV  R@1,R27
                 	.ENDM
                 
                 	.MACRO __ADDWRN
                 	SUBI R@0,LOW(-@2)
                 	SBCI R@1,HIGH(-@2)
                 	.ENDM
                 
                 	.MACRO __ADDWRR
                 	ADD  R@0,R@2
                 	ADC  R@1,R@3
                 	.ENDM
                 
                 	.MACRO __SUBWRN
                 	SUBI R@0,LOW(@2)
                 	SBCI R@1,HIGH(@2)
                 	.ENDM
                 
                 	.MACRO __SUBWRR
                 	SUB  R@0,R@2
                 	SBC  R@1,R@3
                 	.ENDM
                 
                 	.MACRO __ANDWRN
                 	ANDI R@0,LOW(@2)
                 	ANDI R@1,HIGH(@2)
                 	.ENDM
                 
                 	.MACRO __ANDWRR
                 	AND  R@0,R@2
                 	AND  R@1,R@3
                 	.ENDM
                 
                 	.MACRO __ORWRN
                 	ORI  R@0,LOW(@2)
                 	ORI  R@1,HIGH(@2)
                 	.ENDM
                 
                 	.MACRO __ORWRR
                 	OR   R@0,R@2
                 	OR   R@1,R@3
                 	.ENDM
                 
                 	.MACRO __EORWRR
                 	EOR  R@0,R@2
                 	EOR  R@1,R@3
                 	.ENDM
                 
                 	.MACRO __GETWRS
                 	LDD  R@0,Y+@2
                 	LDD  R@1,Y+@2+1
                 	.ENDM
                 
                 	.MACRO __PUTBSR
                 	STD  Y+@1,R@0
                 	.ENDM
                 
                 	.MACRO __PUTWSR
                 	STD  Y+@2,R@0
                 	STD  Y+@2+1,R@1
                 	.ENDM
                 
                 	.MACRO __MOVEWRR
                 	MOV  R@0,R@2
                 	MOV  R@1,R@3
                 	.ENDM
                 
                 	.MACRO __INWR
                 	IN   R@0,@2
                 	IN   R@1,@2+1
                 	.ENDM
                 
                 	.MACRO __OUTWR
                 	OUT  @2+1,R@1
                 	OUT  @2,R@0
                 	.ENDM
                 
                 	.MACRO __CALL1MN
                 	LDS  R30,@0+(@1)
                 	LDS  R31,@0+(@1)+1
                 	ICALL
                 	.ENDM
                 
                 	.MACRO __CALL1FN
                 	LDI  R30,LOW(2*@0+(@1))
                 	LDI  R31,HIGH(2*@0+(@1))
                 	RCALL __GETW1PF
                 	ICALL
                 	.ENDM
                 
                 	.MACRO __CALL2EN
                 	PUSH R26
                 	PUSH R27
                 	LDI  R26,LOW(@0+(@1))
                 	LDI  R27,HIGH(@0+(@1))
                 	RCALL __EEPROMRDW
                 	POP  R27
                 	POP  R26
                 	ICALL
                 	.ENDM
                 
                 	.MACRO __CALL2EX
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	RCALL __EEPROMRDD
                 	ICALL
                 	.ENDM
                 
                 	.MACRO __GETW1STACK
                 	IN   R30,SPL
                 	IN   R31,SPH
                 	ADIW R30,@0+1
                 	LD   R0,Z+
                 	LD   R31,Z
                 	MOV  R30,R0
                 	.ENDM
                 
                 	.MACRO __GETD1STACK
                 	IN   R30,SPL
                 	IN   R31,SPH
                 	ADIW R30,@0+1
                 	LD   R0,Z+
                 	LD   R1,Z+
                 	LD   R22,Z
                 	MOVW R30,R0
                 	.ENDM
                 
                 	.MACRO __NBST
                 	BST  R@0,@1
                 	IN   R30,SREG
                 	LDI  R31,0x40
                 	EOR  R30,R31
                 	OUT  SREG,R30
                 	.ENDM
                 
                 
                 	.MACRO __PUTB1SN
                 	LDD  R26,Y+@0
                 	SUBI R26,-@1
                 	ST   X,R30
                 	.ENDM
                 
                 	.MACRO __PUTW1SN
                 	LDD  R26,Y+@0
                 	SUBI R26,-@1
                 	ST   X+,R30
                 	ST   X,R31
                 	.ENDM
                 
                 	.MACRO __PUTD1SN
                 	LDD  R26,Y+@0
                 	SUBI R26,-@1
                 	RCALL __PUTDP1
                 	.ENDM
                 
                 	.MACRO __PUTB1SNS
                 	LDD  R26,Y+@0
                 	SUBI R26,-@1
                 	ST   X,R30
                 	.ENDM
                 
                 	.MACRO __PUTW1SNS
                 	LDD  R26,Y+@0
                 	SUBI R26,-@1
                 	ST   X+,R30
                 	ST   X,R31
                 	.ENDM
                 
                 	.MACRO __PUTD1SNS
                 	LDD  R26,Y+@0
                 	SUBI R26,-@1
                 	RCALL __PUTDP1
                 	.ENDM
                 
                 	.MACRO __PUTB1RN
                 	MOV  R26,R@0
                 	SUBI R26,-@1
                 	ST   X,R30
                 	.ENDM
                 
                 	.MACRO __PUTW1RN
                 	MOV  R26,R@0
                 	SUBI R26,-@1
                 	ST   X+,R30
                 	ST   X,R31
                 	.ENDM
                 
                 	.MACRO __PUTD1RN
                 	MOV  R26,R@0
                 	SUBI R26,-@1
                 	RCALL __PUTDP1
                 	.ENDM
                 
                 	.MACRO __PUTB1RNS
                 	MOV  R26,R@0
                 	SUBI R26,-@1
                 	ST   X,R30
                 	.ENDM
                 
                 	.MACRO __PUTW1RNS
                 	MOV  R26,R@0
                 	SUBI R26,-@1
                 	ST   X+,R30
                 	ST   X,R31
                 	.ENDM
                 
                 	.MACRO __PUTD1RNS
                 	MOV  R26,R@0
                 	SUBI R26,-@1
                 	RCALL __PUTDP1
                 	.ENDM
                 
                 	.MACRO __PUTB1PMN
                 	LDS  R26,@0
                 	SUBI R26,-@1
                 	ST   X,R30
                 	.ENDM
                 
                 	.MACRO __PUTW1PMN
                 	LDS  R26,@0
                 	SUBI R26,-@1
                 	ST   X+,R30
                 	ST   X,R31
                 	.ENDM
                 
                 	.MACRO __PUTD1PMN
                 	LDS  R26,@0
                 	SUBI R26,-@1
                 	RCALL __PUTDP1
                 	.ENDM
                 
                 	.MACRO __PUTB1PMNS
                 	LDS  R26,@0
                 	SUBI R26,-@1
                 	ST   X,R30
                 	.ENDM
                 
                 	.MACRO __PUTW1PMNS
                 	LDS  R26,@0
                 	SUBI R26,-@1
                 	ST   X+,R30
                 	ST   X,R31
                 	.ENDM
                 
                 	.MACRO __PUTD1PMNS
                 	LDS  R26,@0
                 	SUBI R26,-@1
                 	RCALL __PUTDP1
                 	.ENDM
                 
                 	.MACRO __GETB1SX
                 	MOVW R30,R28
                 	SUBI R30,LOW(-@0)
                 	SBCI R31,HIGH(-@0)
                 	LD   R30,Z
                 	.ENDM
                 
                 	.MACRO __GETB1HSX
                 	MOVW R30,R28
                 	SUBI R30,LOW(-@0)
                 	SBCI R31,HIGH(-@0)
                 	LD   R31,Z
                 	.ENDM
                 
                 	.MACRO __GETW1SX
                 	MOVW R30,R28
                 	SUBI R30,LOW(-@0)
                 	SBCI R31,HIGH(-@0)
                 	LD   R0,Z+
                 	LD   R31,Z
                 	MOV  R30,R0
                 	.ENDM
                 
                 	.MACRO __GETD1SX
                 	MOVW R30,R28
                 	SUBI R30,LOW(-@0)
                 	SBCI R31,HIGH(-@0)
                 	LD   R0,Z+
                 	LD   R1,Z+
                 	LD   R22,Z+
                 	LD   R23,Z
                 	MOVW R30,R0
                 	.ENDM
                 
                 	.MACRO __GETB2SX
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	LD   R26,X
                 	.ENDM
                 
                 	.MACRO __GETW2SX
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	LD   R0,X+
                 	LD   R27,X
                 	MOV  R26,R0
                 	.ENDM
                 
                 	.MACRO __GETD2SX
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	LD   R0,X+
                 	LD   R1,X+
                 	LD   R24,X+
                 	LD   R25,X
                 	MOVW R26,R0
                 	.ENDM
                 
                 	.MACRO __GETBRSX
                 	MOVW R30,R28
                 	SUBI R30,LOW(-@1)
                 	SBCI R31,HIGH(-@1)
                 	LD   R@0,Z
                 	.ENDM
                 
                 	.MACRO __GETWRSX
                 	MOVW R30,R28
                 	SUBI R30,LOW(-@2)
                 	SBCI R31,HIGH(-@2)
                 	LD   R@0,Z+
                 	LD   R@1,Z
                 	.ENDM
                 
                 	.MACRO __GETBRSX2
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	LD   R@0,X
                 	.ENDM
                 
                 	.MACRO __GETWRSX2
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@2)
                 	SBCI R27,HIGH(-@2)
                 	LD   R@0,X+
                 	LD   R@1,X
                 	.ENDM
                 
                 	.MACRO __LSLW8SX
                 	MOVW R30,R28
                 	SUBI R30,LOW(-@0)
                 	SBCI R31,HIGH(-@0)
                 	LD   R31,Z
                 	CLR  R30
                 	.ENDM
                 
                 	.MACRO __PUTB1SX
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	ST   X,R30
                 	.ENDM
                 
                 	.MACRO __PUTW1SX
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	ST   X+,R30
                 	ST   X,R31
                 	.ENDM
                 
                 	.MACRO __PUTD1SX
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	ST   X+,R30
                 	ST   X+,R31
                 	ST   X+,R22
                 	ST   X,R23
                 	.ENDM
                 
                 	.MACRO __CLRW1SX
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	ST   X+,R30
                 	ST   X,R30
                 	.ENDM
                 
                 	.MACRO __CLRD1SX
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	ST   X+,R30
                 	ST   X+,R30
                 	ST   X+,R30
                 	ST   X,R30
                 	.ENDM
                 
                 	.MACRO __PUTB2SX
                 	MOVW R30,R28
                 	SUBI R30,LOW(-@0)
                 	SBCI R31,HIGH(-@0)
                 	ST   Z,R26
                 	.ENDM
                 
                 	.MACRO __PUTW2SX
                 	MOVW R30,R28
                 	SUBI R30,LOW(-@0)
                 	SBCI R31,HIGH(-@0)
                 	ST   Z+,R26
                 	ST   Z,R27
                 	.ENDM
                 
                 	.MACRO __PUTD2SX
                 	MOVW R30,R28
                 	SUBI R30,LOW(-@0)
                 	SBCI R31,HIGH(-@0)
                 	ST   Z+,R26
                 	ST   Z+,R27
                 	ST   Z+,R24
                 	ST   Z,R25
                 	.ENDM
                 
                 	.MACRO __PUTBSRX
                 	MOVW R30,R28
                 	SUBI R30,LOW(-@1)
                 	SBCI R31,HIGH(-@1)
                 	ST   Z,R@0
                 	.ENDM
                 
                 	.MACRO __PUTWSRX
                 	MOVW R30,R28
                 	SUBI R30,LOW(-@2)
                 	SBCI R31,HIGH(-@2)
                 	ST   Z+,R@0
                 	ST   Z,R@1
                 	.ENDM
                 
                 	.MACRO __PUTB1SNX
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	LD   R0,X+
                 	LD   R27,X
                 	MOV  R26,R0
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	ST   X,R30
                 	.ENDM
                 
                 	.MACRO __PUTW1SNX
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	LD   R0,X+
                 	LD   R27,X
                 	MOV  R26,R0
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	ST   X+,R30
                 	ST   X,R31
                 	.ENDM
                 
                 	.MACRO __PUTD1SNX
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	LD   R0,X+
                 	LD   R27,X
                 	MOV  R26,R0
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	ST   X+,R30
                 	ST   X+,R31
                 	ST   X+,R22
                 	ST   X,R23
                 	.ENDM
                 
                 ;NAME DEFINITIONS FOR GLOBAL VARIABLES ALLOCATED TO REGISTERS
                 	.DEF _Uc_Negative_5_over_count=R3
                 	.DEF _Uc_Negative_5_under_count=R2
                 	.DEF _Uc_Positive_5_over_count=R5
                 	.DEF _Uc_Positive_5_under_count=R4
                 	.DEF _Uc_Positive_12_over_count=R7
                 	.DEF _Uc_Positive_12_under_count=R6
                 	.DEF _Uc_Negative_12_over_count=R9
                 	.DEF _Uc_Negative_12_under_count=R8
                 	.DEF _Uc_Positive_24_over_count=R11
                 	.DEF _Uc_Positive_24_under_count=R10
                 
                 ;GPIOR0-GPIOR2 INITIALIZATION VALUES
                 	.EQU __GPIOR0_INIT=0x00
                 	.EQU __GPIOR1_INIT=0x00
                 	.EQU __GPIOR2_INIT=0x00
                 
                 	.CSEG
                 	.ORG 0x00
                 
                 ;START OF CODE MARKER
                 __START_OF_CODE:
                 
                 ;INTERRUPT VECTORS
000000 c010      	RJMP __RESET
000001 cffe      	RJMP 0x00
000002 cffd      	RJMP 0x00
000003 cffc      	RJMP 0x00
000004 cffb      	RJMP 0x00
000005 cffa      	RJMP 0x00
000006 cff9      	RJMP 0x00
000007 cff8      	RJMP 0x00
000008 cff7      	RJMP 0x00
000009 cff6      	RJMP 0x00
00000a cff5      	RJMP 0x00
00000b cff4      	RJMP 0x00
00000c cff3      	RJMP 0x00
00000d cff2      	RJMP 0x00
00000e cff1      	RJMP 0x00
00000f cff0      	RJMP 0x00
000010 cfef      	RJMP 0x00
                 
                 __RESET:
000011 94f8      	CLI
000012 27ee      	CLR  R30
000013 bbec      	OUT  EECR,R30
000014 bfe5      	OUT  MCUCR,R30
                 
                 ;CLEAR R2-R14
000015 e08d      	LDI  R24,(14-2)+1
000016 e0a2      	LDI  R26,2
                 __CLEAR_REG:
000017 93ed      	ST   X+,R30
000018 958a      	DEC  R24
000019 f7e9      	BRNE __CLEAR_REG
                 
                 ;CLEAR SRAM
00001a e880      	LDI  R24,__CLEAR_SRAM_SIZE
00001b e6a0      	LDI  R26,__SRAM_START
                 __CLEAR_SRAM:
00001c 93ed      	ST   X+,R30
00001d 958a      	DEC  R24
00001e f7e9      	BRNE __CLEAR_SRAM
                 
                 ;GPIOR0-GPIOR2 INITIALIZATION
00001f e0e0      	LDI  R30,__GPIOR0_INIT
000020 bbe3      	OUT  GPIOR0,R30
                 	;__GPIOR1_INIT = __GPIOR0_INIT
000021 bbe4      	OUT  GPIOR1,R30
                 	;__GPIOR2_INIT = __GPIOR0_INIT
000022 bbe5      	OUT  GPIOR2,R30
                 
                 ;HARDWARE STACK POINTER INITIALIZATION
000023 edef      	LDI  R30,LOW(__SRAM_END-__HEAP_SIZE)
000024 bfed      	OUT  SPL,R30
                 
                 ;DATA STACK POINTER INITIALIZATION
000025 e8c0      	LDI  R28,LOW(__SRAM_START+__DSTACK_SIZE)
                 
000026 c017      	RJMP _main
                 
                 	.ESEG
                 	.ORG 0
                 
                 	.DSEG
                 	.ORG 0x80
                 
                 	.CSEG
                 ;/*******************************************************
                 ;This program was created by the
                 ;CodeWizardAVR V3.12 Advanced
                 ;Automatic Program Generator
                 ;� Copyright 1998-2014 Pavel Haiduc, HP InfoTech s.r.l.
                 ;http://www.hpinfotech.com
                 ;
                 ;Project : DC_Power_Supply_Protect
                 ;Version : 1.0
                 ;Date    : 11/28/2018
                 ;Author  :
                 ;Company :
                 ;Comments:
                 ;Bao ve duong nguon DC +24V +12V -12V +5V -5V
                 ;
                 ;
                 ;Chip type               : ATtiny24
                 ;AVR Core Clock frequency: 8.000000 MHz
                 ;Memory model            : Tiny
                 ;External RAM size       : 0
                 ;Data Stack size         : 32
                 ;*******************************************************/
                 ;
                 ;#include <tiny24.h>
                 	#ifndef __SLEEP_DEFINED__
                 	#define __SLEEP_DEFINED__
                 	.EQU __se_bit=0x20
                 	.EQU __sm_mask=0x18
                 	.EQU __sm_adc_noise_red=0x08
                 	.EQU __sm_powerdown=0x10
                 	.EQU __sm_standby=0x18
                 	.SET power_ctrl_reg=mcucr
                 	#endif
                 ;#include <delay.h>
                 ;
                 ;#define ADC_Negative_5  1
                 ;#define ADC_Negative_12 4
                 ;#define ADC_Positive_5  5
                 ;#define ADC_Positive_12 3
                 ;#define ADC_Positive_24 2
                 ;
                 ;
                 ;#define ADC_Negative_5_ratio    1
                 ;#define ADC_Positive_5_ratio    1
                 ;
                 ;#define ADC_Negative_12_ratio   1
                 ;#define ADC_Positive_12_ratio   1
                 ;
                 ;#define ADC_Positive_24_ratio   1
                 ;
                 ;#define ADC_Negative_5_Set_OVER 10
                 ;#define ADC_Positive_5_Set_OVER 10
                 ;
                 ;#define ADC_Negative_12_Set_OVER    10
                 ;#define ADC_Positive_12_Set_OVER    10
                 ;
                 ;#define ADC_Positive_24_Set_OVER    10
                 ;
                 ;#define CONTROL_UNDER_24    PORTA.7
                 ;#define CONTROL_24  PORTA.6
                 ;#define BUZZER  PORTB.2
                 ;
                 ;#define CONTROL_UNDER_24_ON CONTROL_UNDER_24=0
                 ;#define CONTROL_UNDER_24_OFF CONTROL_UNDER_24=1
                 ;
                 ;#define CONTROL_24_ON   CONTROL_24=0
                 ;#define CONTROL_24_OFF  CONTROL_24=1
                 ;
                 ;#define BUZZER_ON   BUZZER = 1
                 ;#define BUZZER_OFF  BUZZER = 0
                 ;
                 ;
                 ;unsigned char  Uc_Negative_5_over_count;
                 ;unsigned char  Uc_Negative_5_under_count;
                 ;
                 ;unsigned char  Uc_Positive_5_over_count;
                 ;unsigned char  Uc_Positive_5_under_count;
                 ;
                 ;unsigned char  Uc_Positive_12_over_count;
                 ;unsigned char  Uc_Positive_12_under_count;
                 ;
                 ;unsigned char  Uc_Negative_12_over_count;
                 ;unsigned char  Uc_Negative_12_under_count;
                 ;
                 ;unsigned char  Uc_Positive_24_over_count;
                 ;unsigned char  Uc_Positive_24_under_count;
                 ;
                 ;
                 ;bit  Uc_Negative_5_warning;
                 ;bit  Uc_Positive_5_warning;
                 ;bit  Uc_Positive_12_warning;
                 ;bit  Uc_Negative_12_warning;
                 ;bit  Uc_Positive_24_warning;
                 ;// Declare your global variables here
                 ;
                 ;// Voltage Reference: AVCC pin
                 ;#define ADC_VREF_TYPE ((0<<REFS1) | (0<<REFS0))
                 ;
                 ;// Read the AD conversion result
                 ;unsigned int read_adc(unsigned char adc_input)
                 ; 0000 005C {
                 
                 	.CSEG
                 ; 0000 005D ADMUX=(adc_input & 0x3f) | ADC_VREF_TYPE;
                 ;	adc_input -> Y+0
                 ; 0000 005E // Delay needed for the stabilization of the ADC input voltage
                 ; 0000 005F delay_us(10);
                 ; 0000 0060 // Start the AD conversion
                 ; 0000 0061 ADCSRA|=(1<<ADSC);
                 ; 0000 0062 // Wait for the AD conversion to complete
                 ; 0000 0063 while ((ADCSRA & (1<<ADIF))==0);
                 ; 0000 0064 ADCSRA|=(1<<ADIF);
                 ; 0000 0065 return ADCW;
                 ; 0000 0066 }
                 ;
                 ;void    Init(void)
                 ; 0000 0069 {
                 _Init:
                 ; .FSTART _Init
                 ; 0000 006A     Uc_Negative_5_warning = 0;
000027 9898      	CBI  0x13,0
                 ; 0000 006B     Uc_Positive_5_warning = 0;
000028 9899      	CBI  0x13,1
                 ; 0000 006C     Uc_Positive_12_warning = 0;
000029 989a      	CBI  0x13,2
                 ; 0000 006D     Uc_Negative_12_warning = 0;
00002a 989b      	CBI  0x13,3
                 ; 0000 006E     Uc_Positive_24_warning = 0;
00002b 989c      	CBI  0x13,4
                 ; 0000 006F 
                 ; 0000 0070     Uc_Negative_5_over_count = 0;
00002c 2433      	CLR  R3
                 ; 0000 0071     Uc_Negative_5_under_count = 0;
00002d 2422      	CLR  R2
                 ; 0000 0072     Uc_Positive_5_over_count = 0;
00002e 2455      	CLR  R5
                 ; 0000 0073     Uc_Positive_5_under_count = 0;
00002f 2444      	CLR  R4
                 ; 0000 0074     Uc_Positive_12_over_count = 0;
000030 2477      	CLR  R7
                 ; 0000 0075     Uc_Positive_12_under_count = 0;
000031 2466      	CLR  R6
                 ; 0000 0076     Uc_Negative_12_over_count = 0;
000032 2499      	CLR  R9
                 ; 0000 0077     Uc_Negative_12_under_count = 0;
000033 2488      	CLR  R8
                 ; 0000 0078     Uc_Positive_24_over_count = 0;
000034 24bb      	CLR  R11
                 ; 0000 0079     Uc_Positive_24_under_count = 0;
000035 24aa      	CLR  R10
                 ; 0000 007A 
                 ; 0000 007B     CONTROL_24_ON;
000036 98de      	CBI  0x1B,6
                 ; 0000 007C     CONTROL_UNDER_24_ON;
000037 98df      	CBI  0x1B,7
                 ; 0000 007D 
                 ; 0000 007E     BUZZER_ON;
000038 9ac2      	SBI  0x18,2
                 ; 0000 007F     delay_ms(200);
000039 eca8      	LDI  R26,LOW(200)
00003a e0b0      	LDI  R27,0
00003b d039      	RCALL _delay_ms
                 ; 0000 0080     BUZZER_OFF;
00003c 98c2      	CBI  0x18,2
                 ; 0000 0081 }
00003d 9508      	RET
                 ; .FEND
                 ;
                 ;void    Protect(void)
                 ; 0000 0084 {
                 ; 0000 0085     unsigned int    Uint_adc_value;
                 ; 0000 0086 
                 ; 0000 0087     /* Kiem tra nguon -5vdc */
                 ; 0000 0088     Uint_adc_value = read_adc(ADC_Negative_5);
                 ;	Uint_adc_value -> R16,R17
                 ; 0000 0089     if(Uint_adc_value*ADC_Negative_5_ratio > ADC_Negative_5_Set_OVER)
                 ; 0000 008A     {
                 ; 0000 008B         Uc_Negative_5_over_count++;
                 ; 0000 008C         if(Uc_Negative_5_over_count > 10)
                 ; 0000 008D         {
                 ; 0000 008E             Uc_Negative_5_over_count = 11;
                 ; 0000 008F             Uc_Negative_5_under_count = 0;
                 ; 0000 0090             /* Set warning */
                 ; 0000 0091             Uc_Negative_5_warning = 1;
                 ; 0000 0092         }
                 ; 0000 0093     }
                 ; 0000 0094     else
                 ; 0000 0095     {
                 ; 0000 0096         Uc_Negative_5_under_count++;
                 ; 0000 0097         if(Uc_Negative_5_under_count > 10)
                 ; 0000 0098         {
                 ; 0000 0099             Uc_Negative_5_over_count = 0;
                 ; 0000 009A             Uc_Negative_5_under_count = 11;
                 ; 0000 009B             /* clear warning */
                 ; 0000 009C             Uc_Negative_5_warning = 0;
                 ; 0000 009D         }
                 ; 0000 009E     }
                 ; 0000 009F 
                 ; 0000 00A0     /* Kiem tra nguon +5VDC */
                 ; 0000 00A1     Uint_adc_value = read_adc(ADC_Positive_5);
                 ; 0000 00A2     if(Uint_adc_value*ADC_Positive_5_ratio > ADC_Positive_5_Set_OVER)
                 ; 0000 00A3     {
                 ; 0000 00A4         Uc_Positive_5_over_count++;
                 ; 0000 00A5         if(Uc_Positive_5_over_count > 10)
                 ; 0000 00A6         {
                 ; 0000 00A7             Uc_Positive_5_over_count = 11;
                 ; 0000 00A8             Uc_Positive_5_under_count = 0;
                 ; 0000 00A9             /* Set warning */
                 ; 0000 00AA             Uc_Positive_5_warning = 1;
                 ; 0000 00AB         }
                 ; 0000 00AC     }
                 ; 0000 00AD     else
                 ; 0000 00AE     {
                 ; 0000 00AF         Uc_Positive_5_under_count++;
                 ; 0000 00B0         if(Uc_Positive_5_under_count > 10)
                 ; 0000 00B1         {
                 ; 0000 00B2             Uc_Positive_5_over_count = 0;
                 ; 0000 00B3             Uc_Positive_5_under_count = 11;
                 ; 0000 00B4             /* clear warning */
                 ; 0000 00B5             Uc_Positive_5_warning = 0;
                 ; 0000 00B6         }
                 ; 0000 00B7     }
                 ; 0000 00B8 
                 ; 0000 00B9     /* Kiem tra nguon -12VDC */
                 ; 0000 00BA     Uint_adc_value = read_adc(ADC_Negative_12);
                 ; 0000 00BB     if(Uint_adc_value*ADC_Negative_12_ratio > ADC_Negative_12_Set_OVER)
                 ; 0000 00BC     {
                 ; 0000 00BD         Uc_Negative_12_over_count++;
                 ; 0000 00BE         if(Uc_Negative_12_over_count > 10)
                 ; 0000 00BF         {
                 ; 0000 00C0             Uc_Negative_12_over_count = 11;
                 ; 0000 00C1             Uc_Negative_12_under_count = 0;
                 ; 0000 00C2             /* Set warning */
                 ; 0000 00C3             Uc_Negative_12_warning = 1;
                 ; 0000 00C4         }
                 ; 0000 00C5     }
                 ; 0000 00C6     else
                 ; 0000 00C7     {
                 ; 0000 00C8         Uc_Negative_12_under_count++;
                 ; 0000 00C9         if(Uc_Negative_12_under_count > 10)
                 ; 0000 00CA         {
                 ; 0000 00CB             Uc_Negative_12_over_count = 0;
                 ; 0000 00CC             Uc_Negative_12_under_count = 11;
                 ; 0000 00CD             /* clear warning */
                 ; 0000 00CE             Uc_Negative_12_warning = 0;
                 ; 0000 00CF         }
                 ; 0000 00D0     }
                 ; 0000 00D1 
                 ; 0000 00D2     /* Kiem tra nguon +12VDC */
                 ; 0000 00D3     Uint_adc_value = read_adc(ADC_Positive_12);
                 ; 0000 00D4     if(Uint_adc_value*ADC_Positive_12_ratio > ADC_Positive_12_Set_OVER)
                 ; 0000 00D5     {
                 ; 0000 00D6         Uc_Positive_12_over_count++;
                 ; 0000 00D7         if(Uc_Positive_12_over_count > 10)
                 ; 0000 00D8         {
                 ; 0000 00D9             Uc_Positive_12_over_count = 11;
                 ; 0000 00DA             Uc_Positive_12_under_count = 0;
                 ; 0000 00DB             /* Set warning */
                 ; 0000 00DC             Uc_Positive_12_warning = 1;
                 ; 0000 00DD         }
                 ; 0000 00DE     }
                 ; 0000 00DF     else
                 ; 0000 00E0     {
                 ; 0000 00E1         Uc_Positive_12_under_count++;
                 ; 0000 00E2         if(Uc_Positive_12_under_count > 10)
                 ; 0000 00E3         {
                 ; 0000 00E4             Uc_Positive_12_over_count = 0;
                 ; 0000 00E5             Uc_Positive_12_under_count = 11;
                 ; 0000 00E6             /* clear warning */
                 ; 0000 00E7             Uc_Positive_12_warning = 0;
                 ; 0000 00E8         }
                 ; 0000 00E9     }
                 ; 0000 00EA 
                 ; 0000 00EB     /* Kiem tra nguon +24VDC */
                 ; 0000 00EC     Uint_adc_value = read_adc(ADC_Positive_24);
                 ; 0000 00ED     if(Uint_adc_value*ADC_Positive_24_ratio > ADC_Positive_24_Set_OVER)
                 ; 0000 00EE     {
                 ; 0000 00EF         Uc_Positive_24_over_count++;
                 ; 0000 00F0         if(Uc_Positive_24_over_count > 10)
                 ; 0000 00F1         {
                 ; 0000 00F2             Uc_Positive_24_over_count = 11;
                 ; 0000 00F3             Uc_Positive_24_under_count = 0;
                 ; 0000 00F4             /* Set warning */
                 ; 0000 00F5             Uc_Positive_24_warning = 1;
                 ; 0000 00F6         }
                 ; 0000 00F7     }
                 ; 0000 00F8     else
                 ; 0000 00F9     {
                 ; 0000 00FA         Uc_Positive_24_under_count++;
                 ; 0000 00FB         if(Uc_Positive_24_under_count > 10)
                 ; 0000 00FC         {
                 ; 0000 00FD             Uc_Positive_24_over_count = 0;
                 ; 0000 00FE             Uc_Positive_24_under_count = 11;
                 ; 0000 00FF             /* clear warning */
                 ; 0000 0100             Uc_Positive_24_warning = 0;
                 ; 0000 0101         }
                 ; 0000 0102     }
                 ; 0000 0103 
                 ; 0000 0104     if(Uc_Negative_5_warning || Uc_Negative_12_warning || Uc_Positive_5_warning || Uc_Positive_12_warning)
                 ; 0000 0105     {
                 ; 0000 0106         CONTROL_UNDER_24_OFF;
                 ; 0000 0107     }
                 ; 0000 0108     else
                 ; 0000 0109     {
                 ; 0000 010A         CONTROL_UNDER_24_ON;
                 ; 0000 010B     }
                 ; 0000 010C 
                 ; 0000 010D     if(Uc_Positive_24_warning)
                 ; 0000 010E     {
                 ; 0000 010F         CONTROL_24_OFF;
                 ; 0000 0110     }
                 ; 0000 0111     else
                 ; 0000 0112     {
                 ; 0000 0113         CONTROL_24_ON;
                 ; 0000 0114     }
                 ; 0000 0115     delay_ms(10);
                 ; 0000 0116 }
                 ;
                 ;void main(void)
                 ; 0000 0119 {
                 _main:
                 ; .FSTART _main
                 ; 0000 011A     // Declare your local variables here
                 ; 0000 011B 
                 ; 0000 011C     // Crystal Oscillator division factor: 1
                 ; 0000 011D     #pragma optsize-
                 ; 0000 011E     CLKPR=(1<<CLKPCE);
00003e e8e0      	LDI  R30,LOW(128)
00003f bde6      	OUT  0x26,R30
                 ; 0000 011F     CLKPR=(0<<CLKPCE) | (0<<CLKPS3) | (0<<CLKPS2) | (0<<CLKPS1) | (0<<CLKPS0);
000040 e0e0      	LDI  R30,LOW(0)
000041 bde6      	OUT  0x26,R30
                 ; 0000 0120     #ifdef _OPTIMIZE_SIZE_
                 ; 0000 0121     #pragma optsize+
                 ; 0000 0122     #endif
                 ; 0000 0123 
                 ; 0000 0124     // Input/Output Ports initialization
                 ; 0000 0125     // Port A initialization
                 ; 0000 0126     // Function: Bit7=Out Bit6=Out Bit5=In Bit4=In Bit3=In Bit2=In Bit1=In Bit0=In
                 ; 0000 0127     DDRA=(1<<DDA7) | (1<<DDA6) | (0<<DDA5) | (0<<DDA4) | (0<<DDA3) | (0<<DDA2) | (0<<DDA1) | (0<<DDA0);
000042 ece0      	LDI  R30,LOW(192)
000043 bbea      	OUT  0x1A,R30
                 ; 0000 0128     // State: Bit7=0 Bit6=0 Bit5=T Bit4=T Bit3=T Bit2=T Bit1=T Bit0=T
                 ; 0000 0129     PORTA=(0<<PORTA7) | (0<<PORTA6) | (0<<PORTA5) | (0<<PORTA4) | (0<<PORTA3) | (0<<PORTA2) | (0<<PORTA1) | (0<<PORTA0);
000044 e0e0      	LDI  R30,LOW(0)
000045 bbeb      	OUT  0x1B,R30
                 ; 0000 012A 
                 ; 0000 012B     // Port B initialization
                 ; 0000 012C     // Function: Bit3=In Bit2=Out Bit1=In Bit0=In
                 ; 0000 012D     DDRB=(0<<DDB3) | (1<<DDB2) | (0<<DDB1) | (0<<DDB0);
000046 e0e4      	LDI  R30,LOW(4)
000047 bbe7      	OUT  0x17,R30
                 ; 0000 012E     // State: Bit3=T Bit2=0 Bit1=T Bit0=T
                 ; 0000 012F     PORTB=(0<<PORTB3) | (0<<PORTB2) | (0<<PORTB1) | (0<<PORTB0);
000048 e0e0      	LDI  R30,LOW(0)
000049 bbe8      	OUT  0x18,R30
                 ; 0000 0130 
                 ; 0000 0131     // Timer/Counter 0 initialization
                 ; 0000 0132     // Clock source: System Clock
                 ; 0000 0133     // Clock value: Timer 0 Stopped
                 ; 0000 0134     // Mode: Normal top=0xFF
                 ; 0000 0135     // OC0A output: Disconnected
                 ; 0000 0136     // OC0B output: Disconnected
                 ; 0000 0137     TCCR0A=(0<<COM0A1) | (0<<COM0A0) | (0<<COM0B1) | (0<<COM0B0) | (0<<WGM01) | (0<<WGM00);
00004a bfe0      	OUT  0x30,R30
                 ; 0000 0138     TCCR0B=(0<<WGM02) | (0<<CS02) | (0<<CS01) | (0<<CS00);
00004b bfe3      	OUT  0x33,R30
                 ; 0000 0139     TCNT0=0x00;
00004c bfe2      	OUT  0x32,R30
                 ; 0000 013A     OCR0A=0x00;
00004d bfe6      	OUT  0x36,R30
                 ; 0000 013B     OCR0B=0x00;
00004e bfec      	OUT  0x3C,R30
                 ; 0000 013C 
                 ; 0000 013D     // Timer/Counter 1 initialization
                 ; 0000 013E     // Clock source: System Clock
                 ; 0000 013F     // Clock value: Timer1 Stopped
                 ; 0000 0140     // Mode: Normal top=0xFFFF
                 ; 0000 0141     // OC1A output: Disconnected
                 ; 0000 0142     // OC1B output: Disconnected
                 ; 0000 0143     // Noise Canceler: Off
                 ; 0000 0144     // Input Capture on Falling Edge
                 ; 0000 0145     // Timer1 Overflow Interrupt: Off
                 ; 0000 0146     // Input Capture Interrupt: Off
                 ; 0000 0147     // Compare A Match Interrupt: Off
                 ; 0000 0148     // Compare B Match Interrupt: Off
                 ; 0000 0149     TCCR1A=(0<<COM1A1) | (0<<COM1A0) | (0<<COM1B1) | (0<<COM1B0) | (0<<WGM11) | (0<<WGM10);
00004f bdef      	OUT  0x2F,R30
                 ; 0000 014A     TCCR1B=(0<<ICNC1) | (0<<ICES1) | (0<<WGM13) | (0<<WGM12) | (0<<CS12) | (0<<CS11) | (0<<CS10);
000050 bdee      	OUT  0x2E,R30
                 ; 0000 014B     TCNT1H=0x00;
000051 bded      	OUT  0x2D,R30
                 ; 0000 014C     TCNT1L=0x00;
000052 bdec      	OUT  0x2C,R30
                 ; 0000 014D     ICR1H=0x00;
000053 bde5      	OUT  0x25,R30
                 ; 0000 014E     ICR1L=0x00;
000054 bde4      	OUT  0x24,R30
                 ; 0000 014F     OCR1AH=0x00;
000055 bdeb      	OUT  0x2B,R30
                 ; 0000 0150     OCR1AL=0x00;
000056 bdea      	OUT  0x2A,R30
                 ; 0000 0151     OCR1BH=0x00;
000057 bde9      	OUT  0x29,R30
                 ; 0000 0152     OCR1BL=0x00;
000058 bde8      	OUT  0x28,R30
                 ; 0000 0153 
                 ; 0000 0154     // Timer/Counter 0 Interrupt(s) initialization
                 ; 0000 0155     TIMSK0=(0<<OCIE0B) | (0<<OCIE0A) | (0<<TOIE0);
000059 bfe9      	OUT  0x39,R30
                 ; 0000 0156 
                 ; 0000 0157     // Timer/Counter 1 Interrupt(s) initialization
                 ; 0000 0158     TIMSK1=(0<<ICIE1) | (0<<OCIE1B) | (0<<OCIE1A) | (0<<TOIE1);
00005a b9ec      	OUT  0xC,R30
                 ; 0000 0159 
                 ; 0000 015A     // External Interrupt(s) initialization
                 ; 0000 015B     // INT0: Off
                 ; 0000 015C     // Interrupt on any change on pins PCINT0-7: Off
                 ; 0000 015D     // Interrupt on any change on pins PCINT8-11: Off
                 ; 0000 015E     MCUCR=(0<<ISC01) | (0<<ISC00);
00005b bfe5      	OUT  0x35,R30
                 ; 0000 015F     GIMSK=(0<<INT0) | (0<<PCIE1) | (0<<PCIE0);
00005c bfeb      	OUT  0x3B,R30
                 ; 0000 0160 
                 ; 0000 0161     // USI initialization
                 ; 0000 0162     // Mode: Disabled
                 ; 0000 0163     // Clock source: Register & Counter=no clk.
                 ; 0000 0164     // USI Counter Overflow Interrupt: Off
                 ; 0000 0165     USICR=(0<<USISIE) | (0<<USIOIE) | (0<<USIWM1) | (0<<USIWM0) | (0<<USICS1) | (0<<USICS0) | (0<<USICLK) | (0<<USITC);
00005d b9ed      	OUT  0xD,R30
                 ; 0000 0166 
                 ; 0000 0167     // Analog Comparator initialization
                 ; 0000 0168     // Analog Comparator: Off
                 ; 0000 0169     // The Analog Comparator's positive input is
                 ; 0000 016A     // connected to the AIN0 pin
                 ; 0000 016B     // The Analog Comparator's negative input is
                 ; 0000 016C     // connected to the AIN1 pin
                 ; 0000 016D     ACSR=(1<<ACD) | (0<<ACBG) | (0<<ACO) | (0<<ACI) | (0<<ACIE) | (0<<ACIC) | (0<<ACIS1) | (0<<ACIS0);
00005e e8e0      	LDI  R30,LOW(128)
00005f b9e8      	OUT  0x8,R30
                 ; 0000 016E     // Digital input buffer on AIN0: On
                 ; 0000 016F     // Digital input buffer on AIN1: On
                 ; 0000 0170     DIDR0=(0<<ADC1D) | (0<<ADC2D);
000060 e0e0      	LDI  R30,LOW(0)
000061 b9e1      	OUT  0x1,R30
                 ; 0000 0171 
                 ; 0000 0172     // ADC initialization
                 ; 0000 0173     // ADC Clock frequency: 1000.000 kHz
                 ; 0000 0174     // ADC Voltage Reference: AVCC pin
                 ; 0000 0175     // ADC Bipolar Input Mode: Off
                 ; 0000 0176     // ADC Auto Trigger Source: ADC Stopped
                 ; 0000 0177     // Digital input buffers on ADC0: On, ADC1: On, ADC2: On, ADC3: On
                 ; 0000 0178     // ADC4: On, ADC5: On, ADC6: On, ADC7: On
                 ; 0000 0179     DIDR0=(0<<ADC7D) | (0<<ADC6D) | (0<<ADC5D) | (0<<ADC4D) | (0<<ADC3D) | (0<<ADC2D) | (0<<ADC1D) | (0<<ADC0D);
000062 b9e1      	OUT  0x1,R30
                 ; 0000 017A     ADMUX=ADC_VREF_TYPE;
000063 b9e7      	OUT  0x7,R30
                 ; 0000 017B     ADCSRA=(1<<ADEN) | (0<<ADSC) | (0<<ADATE) | (0<<ADIF) | (0<<ADIE) | (0<<ADPS2) | (1<<ADPS1) | (1<<ADPS0);
000064 e8e3      	LDI  R30,LOW(131)
000065 b9e6      	OUT  0x6,R30
                 ; 0000 017C     ADCSRB=(0<<BIN) | (0<<ADLAR) | (0<<ADTS2) | (0<<ADTS1) | (0<<ADTS0);
000066 e0e0      	LDI  R30,LOW(0)
000067 b9e3      	OUT  0x3,R30
                 ; 0000 017D 
                 ; 0000 017E     Init();
000068 dfbe      	RCALL _Init
                 ; 0000 017F     while (1)
                 _0x4E:
                 ; 0000 0180     {
                 ; 0000 0181     // Place your code here
                 ; 0000 0182         //Protect();
                 ; 0000 0183         CONTROL_UNDER_24_OFF;
000069 9adf      	SBI  0x1B,7
                 ; 0000 0184         CONTROL_24_OFF;
00006a 9ade      	SBI  0x1B,6
                 ; 0000 0185         delay_ms(5000);
00006b e8a8      	LDI  R26,LOW(5000)
00006c e1b3      	LDI  R27,HIGH(5000)
00006d d007      	RCALL _delay_ms
                 ; 0000 0186         CONTROL_UNDER_24_ON;
00006e 98df      	CBI  0x1B,7
                 ; 0000 0187         CONTROL_24_ON;
00006f 98de      	CBI  0x1B,6
                 ; 0000 0188         delay_ms(5000);
000070 e8a8      	LDI  R26,LOW(5000)
000071 e1b3      	LDI  R27,HIGH(5000)
000072 d002      	RCALL _delay_ms
                 ; 0000 0189 
                 ; 0000 018A     }
000073 cff5      	RJMP _0x4E
                 ; 0000 018B }
                 _0x59:
000074 cfff      	RJMP _0x59
                 ; .FEND
                 
                 	.CSEG
                 
                 	.CSEG
                 _delay_ms:
000075 9610      	adiw r26,0
000076 f039      	breq __delay_ms1
                 __delay_ms0:
                +
000077 ed80     +LDI R24 , LOW ( 0x7D0 )
000078 e097     +LDI R25 , HIGH ( 0x7D0 )
                +__DELAY_USW_LOOP :
000079 9701     +SBIW R24 , 1
00007a f7f1     +BRNE __DELAY_USW_LOOP
                 	__DELAY_USW 0x7D0
00007b 95a8      	wdr
00007c 9711      	sbiw r26,1
00007d f7c9      	brne __delay_ms0
                 __delay_ms1:
00007e 9508      	ret
                 
                 ;END OF CODE MARKER
                 __END_OF_CODE:


RESOURCE USE INFORMATION
------------------------

Notice:
The register and instruction counts are symbol table hit counts,
and hence implicitly used resources are not counted, eg, the
'lpm' instruction without operands implicitly uses r0 and z,
none of which are counted.

x,y,z are separate entities in the symbol table and are
counted separately from r26..r31 here.

.dseg memory usage only counts static data declared with .byte

ATtiny24 register use summary:
r0 :   0 r1 :   0 r2 :   1 r3 :   1 r4 :   1 r5 :   1 r6 :   1 r7 :   1 
r8 :   1 r9 :   1 r10:   1 r11:   1 r12:   0 r13:   0 r14:   0 r15:   0 
r16:   0 r17:   0 r18:   0 r19:   0 r20:   0 r21:   0 r22:   0 r23:   0 
r24:   6 r25:   1 r26:   7 r27:   3 r28:   1 r29:   0 r30:  53 r31:   0 
x  :   2 y  :   0 z  :   0 
Registers used: 17 out of 35 (48.6%)

ATtiny24 instruction use summary:
.lds  :   0 .lds.l:   0 .sts  :   0 .sts.l:   0 adc   :   0 add   :   0 
adiw  :   1 and   :   0 andi  :   0 asr   :   0 bclr  :   0 bld   :   0 
brbc  :   0 brbs  :   0 brcc  :   0 brcs  :   0 break :   0 breq  :   1 
brge  :   0 brhc  :   0 brhs  :   0 brid  :   0 brie  :   0 brlo  :   0 
brlt  :   0 brmi  :   0 brne  :   4 brpl  :   0 brsh  :   0 brtc  :   0 
brts  :   0 brvc  :   0 brvs  :   0 bset  :   0 bst   :   0 cbi   :  10 
cbr   :   0 clc   :   0 clh   :   0 cli   :   1 cln   :   0 clr   :  11 
cls   :   0 clt   :   0 clv   :   0 clz   :   0 com   :   0 cp    :   0 
cpc   :   0 cpi   :   0 cpse  :   0 dec   :   2 des   :   0 eor   :   0 
fmul  :   0 fmuls :   0 fmulsu:   0 icall :   0 ijmp  :   0 in    :   0 
inc   :   0 ld    :   0 ldd   :   0 ldi   :  25 lds   :   0 lpm   :   0 
lsl   :   0 lsr   :   0 mov   :   0 movw  :   0 mul   :   0 muls  :   0 
mulsu :   0 neg   :   0 nop   :   0 or    :   0 ori   :   0 out   :  38 
pop   :   0 push  :   0 rcall :   4 ret   :   2 reti  :   0 rjmp  :  20 
rol   :   0 ror   :   0 sbc   :   0 sbci  :   0 sbi   :   3 sbic  :   0 
sbis  :   0 sbiw  :   2 sbr   :   0 sbrc  :   0 sbrs  :   0 sec   :   0 
seh   :   0 sei   :   0 sen   :   0 ser   :   0 ses   :   0 set   :   0 
sev   :   0 sez   :   0 sleep :   0 spm   :   0 st    :   2 std   :   0 
sts   :   0 sub   :   0 subi  :   0 swap  :   0 tst   :   0 wdr   :   1 

Instructions used: 16 out of 114 (14.0%)

ATtiny24 memory use summary [bytes]:
Segment   Begin    End      Code   Data   Used    Size   Use%
---------------------------------------------------------------
[.cseg] 0x000000 0x0000fe    254      0    254    2048  12.4%
[.dseg] 0x000060 0x000080      0      0      0     128   0.0%
[.eseg] 0x000000 0x000000      0      0      0     128   0.0%

Assembly complete, 0 errors, 10 warnings
